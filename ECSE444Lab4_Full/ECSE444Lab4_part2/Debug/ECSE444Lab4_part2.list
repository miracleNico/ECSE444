
ECSE444Lab4_part2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a60  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08008c20  08008c20  00009c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e6c  08008e6c  0000a1ac  2**0
                  CONTENTS
  4 .ARM          00000008  08008e6c  08008e6c  00009e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e74  08008e74  0000a1ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e74  08008e74  00009e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e78  08008e78  00009e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ac  20000000  08008e7c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012e0  200001ac  08009028  0000a1ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000148c  08009028  0000a48c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001edce  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004833  00000000  00000000  00028faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b90  00000000  00000000  0002d7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001540  00000000  00000000  0002f370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fe22  00000000  00000000  000308b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002316c  00000000  00000000  000606d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ce10  00000000  00000000  0008383e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a064e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079cc  00000000  00000000  001a0694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001a8060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001ac 	.word	0x200001ac
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008c08 	.word	0x08008c08

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001b0 	.word	0x200001b0
 80001fc:	08008c08 	.word	0x08008c08

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	@ (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	@ (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	@ 0x80
 80005ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	200001c8 	.word	0x200001c8
 80005c0:	2000021c 	.word	0x2000021c

080005c4 <__io_putchar>:
static uint8_t str_buff[50] = "";
//uint8_t str_test[100] = "";


PUTCHAR_PROTO
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005cc:	1d39      	adds	r1, r7, #4
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
 80005d2:	2201      	movs	r2, #1
 80005d4:	4803      	ldr	r0, [pc, #12]	@ (80005e4 <__io_putchar+0x20>)
 80005d6:	f005 f8f5 	bl	80057c4 <HAL_UART_Transmit>
  return ch;
 80005da:	687b      	ldr	r3, [r7, #4]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000470 	.word	0x20000470

080005e8 <Button_Click_Poll>:

void Button_Click_Poll(){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	for(;;){
		osDelay(5);
 80005ec:	2005      	movs	r0, #5
 80005ee:	f005 fffa 	bl	80065e6 <osDelay>
		//snprintf(str_test,100,"ID1 %d\n\r",(uint8_t)Sensor_Change_Cooldown);
		//HAL_UART_Transmit(&huart1, str_test,100,HAL_MAX_DELAY);
		//str_test[0] = (char)HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13);//button
		//HAL_UART_Transmit(&huart1, str_test,1,HAL_MAX_DELAY);
		not_Pressed = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13);
 80005f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f6:	4835      	ldr	r0, [pc, #212]	@ (80006cc <Button_Click_Poll+0xe4>)
 80005f8:	f002 fa68 	bl	8002acc <HAL_GPIO_ReadPin>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	bf14      	ite	ne
 8000602:	2301      	movne	r3, #1
 8000604:	2300      	moveq	r3, #0
 8000606:	b2da      	uxtb	r2, r3
 8000608:	4b31      	ldr	r3, [pc, #196]	@ (80006d0 <Button_Click_Poll+0xe8>)
 800060a:	701a      	strb	r2, [r3, #0]
		if(!not_Pressed&&(!Sensor_Change_Cooldown)){
 800060c:	4b30      	ldr	r3, [pc, #192]	@ (80006d0 <Button_Click_Poll+0xe8>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	f083 0301 	eor.w	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d0e8      	beq.n	80005ec <Button_Click_Poll+0x4>
 800061a:	4b2e      	ldr	r3, [pc, #184]	@ (80006d4 <Button_Click_Poll+0xec>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	f083 0301 	eor.w	r3, r3, #1
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2b00      	cmp	r3, #0
 8000626:	d0e1      	beq.n	80005ec <Button_Click_Poll+0x4>
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);//toggle led
 8000628:	2120      	movs	r1, #32
 800062a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062e:	f002 fa7d 	bl	8002b2c <HAL_GPIO_TogglePin>
			Sensor_Change_Cooldown = true;
 8000632:	4b28      	ldr	r3, [pc, #160]	@ (80006d4 <Button_Click_Poll+0xec>)
 8000634:	2201      	movs	r2, #1
 8000636:	701a      	strb	r2, [r3, #0]
			switch(current_mode){
 8000638:	4b27      	ldr	r3, [pc, #156]	@ (80006d8 <Button_Click_Poll+0xf0>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	3b41      	subs	r3, #65	@ 0x41
 800063e:	2b13      	cmp	r3, #19
 8000640:	d8d4      	bhi.n	80005ec <Button_Click_Poll+0x4>
 8000642:	a201      	add	r2, pc, #4	@ (adr r2, 8000648 <Button_Click_Poll+0x60>)
 8000644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000648:	080006a9 	.word	0x080006a9
 800064c:	080005ed 	.word	0x080005ed
 8000650:	080005ed 	.word	0x080005ed
 8000654:	080005ed 	.word	0x080005ed
 8000658:	080005ed 	.word	0x080005ed
 800065c:	080005ed 	.word	0x080005ed
 8000660:	080006b1 	.word	0x080006b1
 8000664:	080006a1 	.word	0x080006a1
 8000668:	080005ed 	.word	0x080005ed
 800066c:	080005ed 	.word	0x080005ed
 8000670:	080005ed 	.word	0x080005ed
 8000674:	080005ed 	.word	0x080005ed
 8000678:	080006c1 	.word	0x080006c1
 800067c:	080005ed 	.word	0x080005ed
 8000680:	080005ed 	.word	0x080005ed
 8000684:	080006b9 	.word	0x080006b9
 8000688:	080005ed 	.word	0x080005ed
 800068c:	080005ed 	.word	0x080005ed
 8000690:	080005ed 	.word	0x080005ed
 8000694:	08000699 	.word	0x08000699
				case 'T': //T
					current_mode = (uint8_t)'H';
 8000698:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <Button_Click_Poll+0xf0>)
 800069a:	2248      	movs	r2, #72	@ 0x48
 800069c:	701a      	strb	r2, [r3, #0]
					break;
 800069e:	e014      	b.n	80006ca <Button_Click_Poll+0xe2>
				case 'H': //H
					current_mode = (uint8_t)'A';
 80006a0:	4b0d      	ldr	r3, [pc, #52]	@ (80006d8 <Button_Click_Poll+0xf0>)
 80006a2:	2241      	movs	r2, #65	@ 0x41
 80006a4:	701a      	strb	r2, [r3, #0]
					break;
 80006a6:	e010      	b.n	80006ca <Button_Click_Poll+0xe2>
				case 'A': //A
					current_mode = (uint8_t)'G';
 80006a8:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <Button_Click_Poll+0xf0>)
 80006aa:	2247      	movs	r2, #71	@ 0x47
 80006ac:	701a      	strb	r2, [r3, #0]
					break;
 80006ae:	e00c      	b.n	80006ca <Button_Click_Poll+0xe2>
				case 'G': //G
					current_mode = (uint8_t)'P';
 80006b0:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <Button_Click_Poll+0xf0>)
 80006b2:	2250      	movs	r2, #80	@ 0x50
 80006b4:	701a      	strb	r2, [r3, #0]
					break;
 80006b6:	e008      	b.n	80006ca <Button_Click_Poll+0xe2>
				case 'P':
					current_mode = (uint8_t)'M';
 80006b8:	4b07      	ldr	r3, [pc, #28]	@ (80006d8 <Button_Click_Poll+0xf0>)
 80006ba:	224d      	movs	r2, #77	@ 0x4d
 80006bc:	701a      	strb	r2, [r3, #0]
					break;
 80006be:	e004      	b.n	80006ca <Button_Click_Poll+0xe2>
				case 'M':
					current_mode = (uint8_t)'T';
 80006c0:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <Button_Click_Poll+0xf0>)
 80006c2:	2254      	movs	r2, #84	@ 0x54
 80006c4:	701a      	strb	r2, [r3, #0]
					break;
 80006c6:	bf00      	nop
 80006c8:	e790      	b.n	80005ec <Button_Click_Poll+0x4>
		osDelay(5);
 80006ca:	e78f      	b.n	80005ec <Button_Click_Poll+0x4>
 80006cc:	48000800 	.word	0x48000800
 80006d0:	20000504 	.word	0x20000504
 80006d4:	20000505 	.word	0x20000505
 80006d8:	20000506 	.word	0x20000506

080006dc <Flag_Reset>:
			}
		}
	}
}

void Flag_Reset(){
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	for(;;){
		osDelay(10);
 80006e0:	200a      	movs	r0, #10
 80006e2:	f005 ff80 	bl	80065e6 <osDelay>
		//snprintf(str_test,100,"ID2\n\r");
		//HAL_UART_Transmit(&huart1, str_test,1,HAL_MAX_DELAY);
		if(Sensor_Change_Cooldown){
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <Flag_Reset+0x24>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d0f8      	beq.n	80006e0 <Flag_Reset+0x4>
			osDelay(500);
 80006ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006f2:	f005 ff78 	bl	80065e6 <osDelay>
			Sensor_Change_Cooldown = false;
 80006f6:	4b02      	ldr	r3, [pc, #8]	@ (8000700 <Flag_Reset+0x24>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 80006fc:	e7f0      	b.n	80006e0 <Flag_Reset+0x4>
 80006fe:	bf00      	nop
 8000700:	20000505 	.word	0x20000505

08000704 <Sensor_SW_Poll>:
		}
	}
}

void Sensor_SW_Poll(){
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	for(;;){
		osDelay(100);
 8000708:	2064      	movs	r0, #100	@ 0x64
 800070a:	f005 ff6c 	bl	80065e6 <osDelay>
		//snprintf(str_test,100,"ID3\n\r%d\n\r",(int)Sensor_Change_Cooldown);
		//HAL_UART_Transmit(&huart1, str_test,100,HAL_MAX_DELAY);
		//HAL_UART_Transmit(&huart1, &current_mode,1,HAL_MAX_DELAY);
		if((!Sensor_Change_Cooldown)&&(current_mode != running_mode)){
 800070e:	4b33      	ldr	r3, [pc, #204]	@ (80007dc <Sensor_SW_Poll+0xd8>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	f083 0301 	eor.w	r3, r3, #1
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2b00      	cmp	r3, #0
 800071a:	d009      	beq.n	8000730 <Sensor_SW_Poll+0x2c>
 800071c:	4b30      	ldr	r3, [pc, #192]	@ (80007e0 <Sensor_SW_Poll+0xdc>)
 800071e:	781a      	ldrb	r2, [r3, #0]
 8000720:	4b30      	ldr	r3, [pc, #192]	@ (80007e4 <Sensor_SW_Poll+0xe0>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	429a      	cmp	r2, r3
 8000726:	d003      	beq.n	8000730 <Sensor_SW_Poll+0x2c>
			running_mode = current_mode;
 8000728:	4b2d      	ldr	r3, [pc, #180]	@ (80007e0 <Sensor_SW_Poll+0xdc>)
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	4b2d      	ldr	r3, [pc, #180]	@ (80007e4 <Sensor_SW_Poll+0xe0>)
 800072e:	701a      	strb	r2, [r3, #0]
		}
		switch(running_mode){
 8000730:	4b2c      	ldr	r3, [pc, #176]	@ (80007e4 <Sensor_SW_Poll+0xe0>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	3b41      	subs	r3, #65	@ 0x41
 8000736:	2b13      	cmp	r3, #19
 8000738:	d8e6      	bhi.n	8000708 <Sensor_SW_Poll+0x4>
 800073a:	a201      	add	r2, pc, #4	@ (adr r2, 8000740 <Sensor_SW_Poll+0x3c>)
 800073c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000740:	080007b1 	.word	0x080007b1
 8000744:	08000709 	.word	0x08000709
 8000748:	08000709 	.word	0x08000709
 800074c:	08000709 	.word	0x08000709
 8000750:	08000709 	.word	0x08000709
 8000754:	08000709 	.word	0x08000709
 8000758:	080007b9 	.word	0x080007b9
 800075c:	080007a1 	.word	0x080007a1
 8000760:	08000709 	.word	0x08000709
 8000764:	08000709 	.word	0x08000709
 8000768:	08000709 	.word	0x08000709
 800076c:	08000709 	.word	0x08000709
 8000770:	080007d1 	.word	0x080007d1
 8000774:	08000709 	.word	0x08000709
 8000778:	08000709 	.word	0x08000709
 800077c:	080007c1 	.word	0x080007c1
 8000780:	08000709 	.word	0x08000709
 8000784:	08000709 	.word	0x08000709
 8000788:	08000709 	.word	0x08000709
 800078c:	08000791 	.word	0x08000791
			case 'T':
				temp_buff = BSP_TSENSOR_ReadTemp();
 8000790:	f001 f880 	bl	8001894 <BSP_TSENSOR_ReadTemp>
 8000794:	eef0 7a40 	vmov.f32	s15, s0
 8000798:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <Sensor_SW_Poll+0xe4>)
 800079a:	edc3 7a00 	vstr	s15, [r3]
				break;
 800079e:	e01c      	b.n	80007da <Sensor_SW_Poll+0xd6>
			case 'H':
				hum_buff = BSP_HSENSOR_ReadHumidity();
 80007a0:	f000 ffdc 	bl	800175c <BSP_HSENSOR_ReadHumidity>
 80007a4:	eef0 7a40 	vmov.f32	s15, s0
 80007a8:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <Sensor_SW_Poll+0xe8>)
 80007aa:	edc3 7a00 	vstr	s15, [r3]
				break;
 80007ae:	e014      	b.n	80007da <Sensor_SW_Poll+0xd6>
			case 'A':
				BSP_ACCELERO_AccGetXYZ(pAcceloData);
 80007b0:	480f      	ldr	r0, [pc, #60]	@ (80007f0 <Sensor_SW_Poll+0xec>)
 80007b2:	f000 ff41 	bl	8001638 <BSP_ACCELERO_AccGetXYZ>
				break;
 80007b6:	e010      	b.n	80007da <Sensor_SW_Poll+0xd6>
			case 'G':
				BSP_GYRO_GetXYZ(pGyroData);
 80007b8:	480e      	ldr	r0, [pc, #56]	@ (80007f4 <Sensor_SW_Poll+0xf0>)
 80007ba:	f000 ff97 	bl	80016ec <BSP_GYRO_GetXYZ>
				break;
 80007be:	e00c      	b.n	80007da <Sensor_SW_Poll+0xd6>
			case 'P':
				pressure_buff =  BSP_PSENSOR_ReadPressure();
 80007c0:	f001 f83e 	bl	8001840 <BSP_PSENSOR_ReadPressure>
 80007c4:	eef0 7a40 	vmov.f32	s15, s0
 80007c8:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <Sensor_SW_Poll+0xf4>)
 80007ca:	edc3 7a00 	vstr	s15, [r3]
				break;
 80007ce:	e004      	b.n	80007da <Sensor_SW_Poll+0xd6>
			case 'M':
				BSP_MAGNETO_GetXYZ(pMagData);
 80007d0:	480a      	ldr	r0, [pc, #40]	@ (80007fc <Sensor_SW_Poll+0xf8>)
 80007d2:	f000 fffd 	bl	80017d0 <BSP_MAGNETO_GetXYZ>
				break;
 80007d6:	bf00      	nop
 80007d8:	e796      	b.n	8000708 <Sensor_SW_Poll+0x4>
		osDelay(100);
 80007da:	e795      	b.n	8000708 <Sensor_SW_Poll+0x4>
 80007dc:	20000505 	.word	0x20000505
 80007e0:	20000506 	.word	0x20000506
 80007e4:	20000507 	.word	0x20000507
 80007e8:	20000508 	.word	0x20000508
 80007ec:	2000050c 	.word	0x2000050c
 80007f0:	20000514 	.word	0x20000514
 80007f4:	20000524 	.word	0x20000524
 80007f8:	20000510 	.word	0x20000510
 80007fc:	2000051c 	.word	0x2000051c

08000800 <UART_Print_Data>:
		}
	}
}

void UART_Print_Data(){
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af02      	add	r7, sp, #8
	for(;;){
		osDelay(1000);
 8000806:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800080a:	f005 feec 	bl	80065e6 <osDelay>
		//snprintf(str_test,100,"ID4\n\r");
		//HAL_UART_Transmit(&huart1, str_test,100,HAL_MAX_DELAY);
			switch(running_mode){
 800080e:	4b84      	ldr	r3, [pc, #528]	@ (8000a20 <UART_Print_Data+0x220>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	3b41      	subs	r3, #65	@ 0x41
 8000814:	2b13      	cmp	r3, #19
 8000816:	d8f6      	bhi.n	8000806 <UART_Print_Data+0x6>
 8000818:	a201      	add	r2, pc, #4	@ (adr r2, 8000820 <UART_Print_Data+0x20>)
 800081a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800081e:	bf00      	nop
 8000820:	08000915 	.word	0x08000915
 8000824:	08000807 	.word	0x08000807
 8000828:	08000807 	.word	0x08000807
 800082c:	08000807 	.word	0x08000807
 8000830:	08000807 	.word	0x08000807
 8000834:	08000807 	.word	0x08000807
 8000838:	0800094b 	.word	0x0800094b
 800083c:	080008c3 	.word	0x080008c3
 8000840:	08000807 	.word	0x08000807
 8000844:	08000807 	.word	0x08000807
 8000848:	08000807 	.word	0x08000807
 800084c:	08000807 	.word	0x08000807
 8000850:	080009e5 	.word	0x080009e5
 8000854:	08000807 	.word	0x08000807
 8000858:	08000807 	.word	0x08000807
 800085c:	08000993 	.word	0x08000993
 8000860:	08000807 	.word	0x08000807
 8000864:	08000807 	.word	0x08000807
 8000868:	08000807 	.word	0x08000807
 800086c:	08000871 	.word	0x08000871
				case 'T':
					snprintf((char*)str_buff,50,"Temperature = %d.%02d       \n\r",(int)temp_buff, (int)((temp_buff-(int)temp_buff)*100));
 8000870:	4b6c      	ldr	r3, [pc, #432]	@ (8000a24 <UART_Print_Data+0x224>)
 8000872:	edd3 7a00 	vldr	s15, [r3]
 8000876:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800087a:	4b6a      	ldr	r3, [pc, #424]	@ (8000a24 <UART_Print_Data+0x224>)
 800087c:	ed93 7a00 	vldr	s14, [r3]
 8000880:	4b68      	ldr	r3, [pc, #416]	@ (8000a24 <UART_Print_Data+0x224>)
 8000882:	edd3 7a00 	vldr	s15, [r3]
 8000886:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800088a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800088e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000892:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8000a28 <UART_Print_Data+0x228>
 8000896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800089a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800089e:	ee17 3a90 	vmov	r3, s15
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	ee16 3a90 	vmov	r3, s13
 80008a8:	4a60      	ldr	r2, [pc, #384]	@ (8000a2c <UART_Print_Data+0x22c>)
 80008aa:	2132      	movs	r1, #50	@ 0x32
 80008ac:	4860      	ldr	r0, [pc, #384]	@ (8000a30 <UART_Print_Data+0x230>)
 80008ae:	f007 f965 	bl	8007b7c <sniprintf>
					HAL_UART_Transmit(&huart1, str_buff,50,HAL_MAX_DELAY);
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	2232      	movs	r2, #50	@ 0x32
 80008b8:	495d      	ldr	r1, [pc, #372]	@ (8000a30 <UART_Print_Data+0x230>)
 80008ba:	485e      	ldr	r0, [pc, #376]	@ (8000a34 <UART_Print_Data+0x234>)
 80008bc:	f004 ff82 	bl	80057c4 <HAL_UART_Transmit>
					break;
 80008c0:	e0ac      	b.n	8000a1c <UART_Print_Data+0x21c>
				case 'H':
					snprintf((char*)str_buff,50,"Humidity = %d.%02d          \n\r",(int)hum_buff, (int)((hum_buff-(int)hum_buff)*100));
 80008c2:	4b5d      	ldr	r3, [pc, #372]	@ (8000a38 <UART_Print_Data+0x238>)
 80008c4:	edd3 7a00 	vldr	s15, [r3]
 80008c8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80008cc:	4b5a      	ldr	r3, [pc, #360]	@ (8000a38 <UART_Print_Data+0x238>)
 80008ce:	ed93 7a00 	vldr	s14, [r3]
 80008d2:	4b59      	ldr	r3, [pc, #356]	@ (8000a38 <UART_Print_Data+0x238>)
 80008d4:	edd3 7a00 	vldr	s15, [r3]
 80008d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008e4:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8000a28 <UART_Print_Data+0x228>
 80008e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008f0:	ee17 3a90 	vmov	r3, s15
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	ee16 3a90 	vmov	r3, s13
 80008fa:	4a50      	ldr	r2, [pc, #320]	@ (8000a3c <UART_Print_Data+0x23c>)
 80008fc:	2132      	movs	r1, #50	@ 0x32
 80008fe:	484c      	ldr	r0, [pc, #304]	@ (8000a30 <UART_Print_Data+0x230>)
 8000900:	f007 f93c 	bl	8007b7c <sniprintf>
					HAL_UART_Transmit(&huart1, str_buff,50,HAL_MAX_DELAY);
 8000904:	f04f 33ff 	mov.w	r3, #4294967295
 8000908:	2232      	movs	r2, #50	@ 0x32
 800090a:	4949      	ldr	r1, [pc, #292]	@ (8000a30 <UART_Print_Data+0x230>)
 800090c:	4849      	ldr	r0, [pc, #292]	@ (8000a34 <UART_Print_Data+0x234>)
 800090e:	f004 ff59 	bl	80057c4 <HAL_UART_Transmit>
					break;
 8000912:	e083      	b.n	8000a1c <UART_Print_Data+0x21c>
				case 'A':
					snprintf((char*)str_buff,50,"Acceleration = (%d, %d, %d) \n\r",pAcceloData[0], pAcceloData[1],pAcceloData[2]);
 8000914:	4b4a      	ldr	r3, [pc, #296]	@ (8000a40 <UART_Print_Data+0x240>)
 8000916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800091a:	4619      	mov	r1, r3
 800091c:	4b48      	ldr	r3, [pc, #288]	@ (8000a40 <UART_Print_Data+0x240>)
 800091e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000922:	461a      	mov	r2, r3
 8000924:	4b46      	ldr	r3, [pc, #280]	@ (8000a40 <UART_Print_Data+0x240>)
 8000926:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800092a:	9301      	str	r3, [sp, #4]
 800092c:	9200      	str	r2, [sp, #0]
 800092e:	460b      	mov	r3, r1
 8000930:	4a44      	ldr	r2, [pc, #272]	@ (8000a44 <UART_Print_Data+0x244>)
 8000932:	2132      	movs	r1, #50	@ 0x32
 8000934:	483e      	ldr	r0, [pc, #248]	@ (8000a30 <UART_Print_Data+0x230>)
 8000936:	f007 f921 	bl	8007b7c <sniprintf>
					HAL_UART_Transmit(&huart1, str_buff,50,HAL_MAX_DELAY);
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
 800093e:	2232      	movs	r2, #50	@ 0x32
 8000940:	493b      	ldr	r1, [pc, #236]	@ (8000a30 <UART_Print_Data+0x230>)
 8000942:	483c      	ldr	r0, [pc, #240]	@ (8000a34 <UART_Print_Data+0x234>)
 8000944:	f004 ff3e 	bl	80057c4 <HAL_UART_Transmit>
					break;
 8000948:	e068      	b.n	8000a1c <UART_Print_Data+0x21c>
				case 'G':
					snprintf((char*)str_buff,50,"Gyro = (%d, %d, %d)         \n\r",(int)pGyroData[0], (int)pGyroData[1],(int)pGyroData[2]);
 800094a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a48 <UART_Print_Data+0x248>)
 800094c:	edd3 7a00 	vldr	s15, [r3]
 8000950:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000954:	4b3c      	ldr	r3, [pc, #240]	@ (8000a48 <UART_Print_Data+0x248>)
 8000956:	edd3 7a01 	vldr	s15, [r3, #4]
 800095a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800095e:	ee17 2a90 	vmov	r2, s15
 8000962:	4b39      	ldr	r3, [pc, #228]	@ (8000a48 <UART_Print_Data+0x248>)
 8000964:	edd3 7a02 	vldr	s15, [r3, #8]
 8000968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800096c:	ee17 3a90 	vmov	r3, s15
 8000970:	9301      	str	r3, [sp, #4]
 8000972:	9200      	str	r2, [sp, #0]
 8000974:	ee17 3a10 	vmov	r3, s14
 8000978:	4a34      	ldr	r2, [pc, #208]	@ (8000a4c <UART_Print_Data+0x24c>)
 800097a:	2132      	movs	r1, #50	@ 0x32
 800097c:	482c      	ldr	r0, [pc, #176]	@ (8000a30 <UART_Print_Data+0x230>)
 800097e:	f007 f8fd 	bl	8007b7c <sniprintf>
					HAL_UART_Transmit(&huart1, str_buff,50,HAL_MAX_DELAY);
 8000982:	f04f 33ff 	mov.w	r3, #4294967295
 8000986:	2232      	movs	r2, #50	@ 0x32
 8000988:	4929      	ldr	r1, [pc, #164]	@ (8000a30 <UART_Print_Data+0x230>)
 800098a:	482a      	ldr	r0, [pc, #168]	@ (8000a34 <UART_Print_Data+0x234>)
 800098c:	f004 ff1a 	bl	80057c4 <HAL_UART_Transmit>
					break;
 8000990:	e044      	b.n	8000a1c <UART_Print_Data+0x21c>
				case 'P':
					snprintf((char*)str_buff,50,"Pressure = %d.%02d          \n\r",(int)pressure_buff, (int)((pressure_buff-(int)pressure_buff)*100));
 8000992:	4b2f      	ldr	r3, [pc, #188]	@ (8000a50 <UART_Print_Data+0x250>)
 8000994:	edd3 7a00 	vldr	s15, [r3]
 8000998:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800099c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a50 <UART_Print_Data+0x250>)
 800099e:	ed93 7a00 	vldr	s14, [r3]
 80009a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a50 <UART_Print_Data+0x250>)
 80009a4:	edd3 7a00 	vldr	s15, [r3]
 80009a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009b4:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8000a28 <UART_Print_Data+0x228>
 80009b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009c0:	ee17 3a90 	vmov	r3, s15
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	ee16 3a90 	vmov	r3, s13
 80009ca:	4a22      	ldr	r2, [pc, #136]	@ (8000a54 <UART_Print_Data+0x254>)
 80009cc:	2132      	movs	r1, #50	@ 0x32
 80009ce:	4818      	ldr	r0, [pc, #96]	@ (8000a30 <UART_Print_Data+0x230>)
 80009d0:	f007 f8d4 	bl	8007b7c <sniprintf>
					HAL_UART_Transmit(&huart1, str_buff,50,HAL_MAX_DELAY);
 80009d4:	f04f 33ff 	mov.w	r3, #4294967295
 80009d8:	2232      	movs	r2, #50	@ 0x32
 80009da:	4915      	ldr	r1, [pc, #84]	@ (8000a30 <UART_Print_Data+0x230>)
 80009dc:	4815      	ldr	r0, [pc, #84]	@ (8000a34 <UART_Print_Data+0x234>)
 80009de:	f004 fef1 	bl	80057c4 <HAL_UART_Transmit>
					break;
 80009e2:	e01b      	b.n	8000a1c <UART_Print_Data+0x21c>
				case 'M':
					snprintf((char*)str_buff,50,"Mageneto = (%d, %d, %d)     \n\r",pMagData[0], pMagData[1],pMagData[2]);
 80009e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a58 <UART_Print_Data+0x258>)
 80009e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009ea:	4619      	mov	r1, r3
 80009ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <UART_Print_Data+0x258>)
 80009ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <UART_Print_Data+0x258>)
 80009f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80009fa:	9301      	str	r3, [sp, #4]
 80009fc:	9200      	str	r2, [sp, #0]
 80009fe:	460b      	mov	r3, r1
 8000a00:	4a16      	ldr	r2, [pc, #88]	@ (8000a5c <UART_Print_Data+0x25c>)
 8000a02:	2132      	movs	r1, #50	@ 0x32
 8000a04:	480a      	ldr	r0, [pc, #40]	@ (8000a30 <UART_Print_Data+0x230>)
 8000a06:	f007 f8b9 	bl	8007b7c <sniprintf>
					HAL_UART_Transmit(&huart1, str_buff,50,HAL_MAX_DELAY);
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0e:	2232      	movs	r2, #50	@ 0x32
 8000a10:	4907      	ldr	r1, [pc, #28]	@ (8000a30 <UART_Print_Data+0x230>)
 8000a12:	4808      	ldr	r0, [pc, #32]	@ (8000a34 <UART_Print_Data+0x234>)
 8000a14:	f004 fed6 	bl	80057c4 <HAL_UART_Transmit>
					break;
 8000a18:	bf00      	nop
 8000a1a:	e6f4      	b.n	8000806 <UART_Print_Data+0x6>
		osDelay(1000);
 8000a1c:	e6f3      	b.n	8000806 <UART_Print_Data+0x6>
 8000a1e:	bf00      	nop
 8000a20:	20000507 	.word	0x20000507
 8000a24:	20000508 	.word	0x20000508
 8000a28:	42c80000 	.word	0x42c80000
 8000a2c:	08008c20 	.word	0x08008c20
 8000a30:	20000530 	.word	0x20000530
 8000a34:	20000470 	.word	0x20000470
 8000a38:	2000050c 	.word	0x2000050c
 8000a3c:	08008c40 	.word	0x08008c40
 8000a40:	20000514 	.word	0x20000514
 8000a44:	08008c60 	.word	0x08008c60
 8000a48:	20000524 	.word	0x20000524
 8000a4c:	08008c80 	.word	0x08008c80
 8000a50:	20000510 	.word	0x20000510
 8000a54:	08008ca0 	.word	0x08008ca0
 8000a58:	2000051c 	.word	0x2000051c
 8000a5c:	08008cc0 	.word	0x08008cc0

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a64:	f001 fc94 	bl	8002390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a68:	f000 f880 	bl	8000b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6c:	f000 f95c 	bl	8000d28 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a70:	f000 f8ce 	bl	8000c10 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000a74:	f000 f90c 	bl	8000c90 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf((char*)msg1);
 8000a78:	482b      	ldr	r0, [pc, #172]	@ (8000b28 <main+0xc8>)
 8000a7a:	f007 f86d 	bl	8007b58 <iprintf>
  printf((char*)msg2);
 8000a7e:	482b      	ldr	r0, [pc, #172]	@ (8000b2c <main+0xcc>)
 8000a80:	f007 f86a 	bl	8007b58 <iprintf>
  BSP_HSENSOR_Init();
 8000a84:	f000 fe4a 	bl	800171c <BSP_HSENSOR_Init>
  BSP_TSENSOR_Init();
 8000a88:	f000 fee8 	bl	800185c <BSP_TSENSOR_Init>
  BSP_ACCELERO_Init();
 8000a8c:	f000 fd96 	bl	80015bc <BSP_ACCELERO_Init>
  BSP_GYRO_Init();
 8000a90:	f000 fdea 	bl	8001668 <BSP_GYRO_Init>
  BSP_PSENSOR_Init();
 8000a94:	f000 feb4 	bl	8001800 <BSP_PSENSOR_Init>
  BSP_MAGNETO_Init();
 8000a98:	f000 fe6e 	bl	8001778 <BSP_MAGNETO_Init>
  current_mode = 'T';
 8000a9c:	4b24      	ldr	r3, [pc, #144]	@ (8000b30 <main+0xd0>)
 8000a9e:	2254      	movs	r2, #84	@ 0x54
 8000aa0:	701a      	strb	r2, [r3, #0]
  running_mode = ' ';
 8000aa2:	4b24      	ldr	r3, [pc, #144]	@ (8000b34 <main+0xd4>)
 8000aa4:	2220      	movs	r2, #32
 8000aa6:	701a      	strb	r2, [r3, #0]
  printf((char*)msg3);
 8000aa8:	4823      	ldr	r0, [pc, #140]	@ (8000b38 <main+0xd8>)
 8000aaa:	f007 f855 	bl	8007b58 <iprintf>
  //osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 129);
  //defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  id1_handle = osThreadCreate(osThread(id1),NULL );
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4822      	ldr	r0, [pc, #136]	@ (8000b3c <main+0xdc>)
 8000ab2:	f005 fd4c 	bl	800654e <osThreadCreate>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4a21      	ldr	r2, [pc, #132]	@ (8000b40 <main+0xe0>)
 8000aba:	6013      	str	r3, [r2, #0]
  id2_handle = osThreadCreate(osThread(id2),NULL );
 8000abc:	2100      	movs	r1, #0
 8000abe:	4821      	ldr	r0, [pc, #132]	@ (8000b44 <main+0xe4>)
 8000ac0:	f005 fd45 	bl	800654e <osThreadCreate>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	4a20      	ldr	r2, [pc, #128]	@ (8000b48 <main+0xe8>)
 8000ac8:	6013      	str	r3, [r2, #0]
  id3_handle = osThreadCreate(osThread(id3),NULL );
 8000aca:	2100      	movs	r1, #0
 8000acc:	481f      	ldr	r0, [pc, #124]	@ (8000b4c <main+0xec>)
 8000ace:	f005 fd3e 	bl	800654e <osThreadCreate>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	4a1e      	ldr	r2, [pc, #120]	@ (8000b50 <main+0xf0>)
 8000ad6:	6013      	str	r3, [r2, #0]
  id4_handle = osThreadCreate(osThread(id4),NULL );
 8000ad8:	2100      	movs	r1, #0
 8000ada:	481e      	ldr	r0, [pc, #120]	@ (8000b54 <main+0xf4>)
 8000adc:	f005 fd37 	bl	800654e <osThreadCreate>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	4a1d      	ldr	r2, [pc, #116]	@ (8000b58 <main+0xf8>)
 8000ae4:	6013      	str	r3, [r2, #0]
  if(id1_handle==NULL)printf("ID1 creation failed/n/r");
 8000ae6:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <main+0xe0>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d102      	bne.n	8000af4 <main+0x94>
 8000aee:	481b      	ldr	r0, [pc, #108]	@ (8000b5c <main+0xfc>)
 8000af0:	f007 f832 	bl	8007b58 <iprintf>
  if(id2_handle==NULL)printf("ID2 creation failed/n/r");
 8000af4:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <main+0xe8>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <main+0xa2>
 8000afc:	4818      	ldr	r0, [pc, #96]	@ (8000b60 <main+0x100>)
 8000afe:	f007 f82b 	bl	8007b58 <iprintf>
  if(id3_handle==NULL)printf("ID3 creation failed/n/r");
 8000b02:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <main+0xf0>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d102      	bne.n	8000b10 <main+0xb0>
 8000b0a:	4816      	ldr	r0, [pc, #88]	@ (8000b64 <main+0x104>)
 8000b0c:	f007 f824 	bl	8007b58 <iprintf>
  if(id4_handle==NULL)printf("ID4 creation failed/n/r");
 8000b10:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <main+0xf8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d102      	bne.n	8000b1e <main+0xbe>
 8000b18:	4813      	ldr	r0, [pc, #76]	@ (8000b68 <main+0x108>)
 8000b1a:	f007 f81d 	bl	8007b58 <iprintf>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b1e:	f005 fd0f 	bl	8006540 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b22:	bf00      	nop
 8000b24:	e7fd      	b.n	8000b22 <main+0xc2>
 8000b26:	bf00      	nop
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	2000003c 	.word	0x2000003c
 8000b30:	20000506 	.word	0x20000506
 8000b34:	20000507 	.word	0x20000507
 8000b38:	2000005c 	.word	0x2000005c
 8000b3c:	08008d58 	.word	0x08008d58
 8000b40:	20000564 	.word	0x20000564
 8000b44:	08008d74 	.word	0x08008d74
 8000b48:	20000568 	.word	0x20000568
 8000b4c:	08008d90 	.word	0x08008d90
 8000b50:	2000056c 	.word	0x2000056c
 8000b54:	08008dac 	.word	0x08008dac
 8000b58:	20000570 	.word	0x20000570
 8000b5c:	08008cf0 	.word	0x08008cf0
 8000b60:	08008d08 	.word	0x08008d08
 8000b64:	08008d20 	.word	0x08008d20
 8000b68:	08008d38 	.word	0x08008d38

08000b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b096      	sub	sp, #88	@ 0x58
 8000b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	2244      	movs	r2, #68	@ 0x44
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f007 f875 	bl	8007c6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b80:	463b      	mov	r3, r7
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f002 fe4e 	bl	8003830 <HAL_PWREx_ControlVoltageScaling>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000b9a:	f000 f931 	bl	8000e00 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b9e:	2310      	movs	r3, #16
 8000ba0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000baa:	2360      	movs	r3, #96	@ 0x60
 8000bac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000bba:	233c      	movs	r3, #60	@ 0x3c
 8000bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f002 fed2 	bl	8003978 <HAL_RCC_OscConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000bda:	f000 f911 	bl	8000e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bde:	230f      	movs	r3, #15
 8000be0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be2:	2303      	movs	r3, #3
 8000be4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	2105      	movs	r1, #5
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 fad8 	bl	80041ac <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c02:	f000 f8fd 	bl	8000e00 <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3758      	adds	r7, #88	@ 0x58
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c16:	4a1c      	ldr	r2, [pc, #112]	@ (8000c88 <MX_I2C1_Init+0x78>)
 8000c18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c8c <MX_I2C1_Init+0x7c>)
 8000c1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c20:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c26:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c32:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c4a:	480e      	ldr	r0, [pc, #56]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c4c:	f001 ff88 	bl	8002b60 <HAL_I2C_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c56:	f000 f8d3 	bl	8000e00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4809      	ldr	r0, [pc, #36]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c5e:	f002 fd2f 	bl	80036c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c68:	f000 f8ca 	bl	8000e00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <MX_I2C1_Init+0x74>)
 8000c70:	f002 fd71 	bl	8003756 <HAL_I2CEx_ConfigDigitalFilter>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c7a:	f000 f8c1 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000041c 	.word	0x2000041c
 8000c88:	40005400 	.word	0x40005400
 8000c8c:	307075b1 	.word	0x307075b1

08000c90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c94:	4b22      	ldr	r3, [pc, #136]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000c96:	4a23      	ldr	r2, [pc, #140]	@ (8000d24 <MX_USART1_UART_Init+0x94>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c9a:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b1c      	ldr	r3, [pc, #112]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc6:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cd8:	4811      	ldr	r0, [pc, #68]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cda:	f004 fd23 	bl	8005724 <HAL_UART_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ce4:	f000 f88c 	bl	8000e00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce8:	2100      	movs	r1, #0
 8000cea:	480d      	ldr	r0, [pc, #52]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cec:	f005 fb46 	bl	800637c <HAL_UARTEx_SetTxFifoThreshold>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cf6:	f000 f883 	bl	8000e00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4808      	ldr	r0, [pc, #32]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000cfe:	f005 fb7b 	bl	80063f8 <HAL_UARTEx_SetRxFifoThreshold>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d08:	f000 f87a 	bl	8000e00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <MX_USART1_UART_Init+0x90>)
 8000d0e:	f005 fafc 	bl	800630a <HAL_UARTEx_DisableFifoMode>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d18:	f000 f872 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000470 	.word	0x20000470
 8000d24:	40013800 	.word	0x40013800

08000d28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	60da      	str	r2, [r3, #12]
 8000d3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3e:	4b25      	ldr	r3, [pc, #148]	@ (8000dd4 <MX_GPIO_Init+0xac>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d42:	4a24      	ldr	r2, [pc, #144]	@ (8000dd4 <MX_GPIO_Init+0xac>)
 8000d44:	f043 0304 	orr.w	r3, r3, #4
 8000d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d4a:	4b22      	ldr	r3, [pc, #136]	@ (8000dd4 <MX_GPIO_Init+0xac>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd4 <MX_GPIO_Init+0xac>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8000dd4 <MX_GPIO_Init+0xac>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d62:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <MX_GPIO_Init+0xac>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	4b19      	ldr	r3, [pc, #100]	@ (8000dd4 <MX_GPIO_Init+0xac>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d72:	4a18      	ldr	r2, [pc, #96]	@ (8000dd4 <MX_GPIO_Init+0xac>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7a:	4b16      	ldr	r3, [pc, #88]	@ (8000dd4 <MX_GPIO_Init+0xac>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2120      	movs	r1, #32
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d8e:	f001 feb5 	bl	8002afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	4619      	mov	r1, r3
 8000da6:	480c      	ldr	r0, [pc, #48]	@ (8000dd8 <MX_GPIO_Init+0xb0>)
 8000da8:	f001 fc0c 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dac:	2320      	movs	r3, #32
 8000dae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc6:	f001 fbfd 	bl	80025c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dca:	bf00      	nop
 8000dcc:	3720      	adds	r7, #32
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	48000800 	.word	0x48000800

08000ddc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a04      	ldr	r2, [pc, #16]	@ (8000dfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d101      	bne.n	8000df2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dee:	f001 fae7 	bl	80023c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40001000 	.word	0x40001000

08000e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e04:	b672      	cpsid	i
}
 8000e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <Error_Handler+0x8>

08000e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e16:	4a10      	ldr	r2, [pc, #64]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e36:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	210f      	movs	r1, #15
 8000e46:	f06f 0001 	mvn.w	r0, #1
 8000e4a:	f001 fb91 	bl	8002570 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000

08000e5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b0ae      	sub	sp, #184	@ 0xb8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	2294      	movs	r2, #148	@ 0x94
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f006 fef4 	bl	8007c6a <memset>
  if(hi2c->Instance==I2C1)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a21      	ldr	r2, [pc, #132]	@ (8000f0c <HAL_I2C_MspInit+0xb0>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d13b      	bne.n	8000f04 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e8c:	2340      	movs	r3, #64	@ 0x40
 8000e8e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f003 fc77 	bl	800478c <HAL_RCCEx_PeriphCLKConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ea4:	f7ff ffac 	bl	8000e00 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea8:	4b19      	ldr	r3, [pc, #100]	@ (8000f10 <HAL_I2C_MspInit+0xb4>)
 8000eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eac:	4a18      	ldr	r2, [pc, #96]	@ (8000f10 <HAL_I2C_MspInit+0xb4>)
 8000eae:	f043 0302 	orr.w	r3, r3, #2
 8000eb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb4:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <HAL_I2C_MspInit+0xb4>)
 8000eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ec0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ec4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec8:	2312      	movs	r3, #18
 8000eca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eda:	2304      	movs	r3, #4
 8000edc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480b      	ldr	r0, [pc, #44]	@ (8000f14 <HAL_I2C_MspInit+0xb8>)
 8000ee8:	f001 fb6c 	bl	80025c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eec:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <HAL_I2C_MspInit+0xb4>)
 8000eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef0:	4a07      	ldr	r2, [pc, #28]	@ (8000f10 <HAL_I2C_MspInit+0xb4>)
 8000ef2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ef6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ef8:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <HAL_I2C_MspInit+0xb4>)
 8000efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f04:	bf00      	nop
 8000f06:	37b8      	adds	r7, #184	@ 0xb8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40005400 	.word	0x40005400
 8000f10:	40021000 	.word	0x40021000
 8000f14:	48000400 	.word	0x48000400

08000f18 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0b      	ldr	r2, [pc, #44]	@ (8000f54 <HAL_I2C_MspDeInit+0x3c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d10f      	bne.n	8000f4a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <HAL_I2C_MspDeInit+0x40>)
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <HAL_I2C_MspDeInit+0x40>)
 8000f30:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000f34:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8000f36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f3a:	4808      	ldr	r0, [pc, #32]	@ (8000f5c <HAL_I2C_MspDeInit+0x44>)
 8000f3c:	f001 fcd4 	bl	80028e8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8000f40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f44:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <HAL_I2C_MspDeInit+0x44>)
 8000f46:	f001 fccf 	bl	80028e8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40005400 	.word	0x40005400
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	48000400 	.word	0x48000400

08000f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b0ae      	sub	sp, #184	@ 0xb8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	2294      	movs	r2, #148	@ 0x94
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f006 fe72 	bl	8007c6a <memset>
  if(huart->Instance==USART1)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a21      	ldr	r2, [pc, #132]	@ (8001010 <HAL_UART_MspInit+0xb0>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d13a      	bne.n	8001006 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f90:	2301      	movs	r3, #1
 8000f92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f94:	2300      	movs	r3, #0
 8000f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f003 fbf5 	bl	800478c <HAL_RCCEx_PeriphCLKConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fa8:	f7ff ff2a 	bl	8000e00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fac:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <HAL_UART_MspInit+0xb4>)
 8000fae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fb0:	4a18      	ldr	r2, [pc, #96]	@ (8001014 <HAL_UART_MspInit+0xb4>)
 8000fb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb6:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fb8:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <HAL_UART_MspInit+0xb4>)
 8000fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc4:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <HAL_UART_MspInit+0xb4>)
 8000fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc8:	4a12      	ldr	r2, [pc, #72]	@ (8001014 <HAL_UART_MspInit+0xb4>)
 8000fca:	f043 0302 	orr.w	r3, r3, #2
 8000fce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd0:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <HAL_UART_MspInit+0xb4>)
 8000fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fdc:	23c0      	movs	r3, #192	@ 0xc0
 8000fde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	@ (8001018 <HAL_UART_MspInit+0xb8>)
 8001002:	f001 fadf 	bl	80025c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001006:	bf00      	nop
 8001008:	37b8      	adds	r7, #184	@ 0xb8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40013800 	.word	0x40013800
 8001014:	40021000 	.word	0x40021000
 8001018:	48000400 	.word	0x48000400

0800101c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08e      	sub	sp, #56	@ 0x38
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800102a:	4b34      	ldr	r3, [pc, #208]	@ (80010fc <HAL_InitTick+0xe0>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102e:	4a33      	ldr	r2, [pc, #204]	@ (80010fc <HAL_InitTick+0xe0>)
 8001030:	f043 0310 	orr.w	r3, r3, #16
 8001034:	6593      	str	r3, [r2, #88]	@ 0x58
 8001036:	4b31      	ldr	r3, [pc, #196]	@ (80010fc <HAL_InitTick+0xe0>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800103a:	f003 0310 	and.w	r3, r3, #16
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001042:	f107 0210 	add.w	r2, r7, #16
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f003 faab 	bl	80045a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001058:	2b00      	cmp	r3, #0
 800105a:	d103      	bne.n	8001064 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800105c:	f003 fa78 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 8001060:	6378      	str	r0, [r7, #52]	@ 0x34
 8001062:	e004      	b.n	800106e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001064:	f003 fa74 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 8001068:	4603      	mov	r3, r0
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800106e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001070:	4a23      	ldr	r2, [pc, #140]	@ (8001100 <HAL_InitTick+0xe4>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	0c9b      	lsrs	r3, r3, #18
 8001078:	3b01      	subs	r3, #1
 800107a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800107c:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <HAL_InitTick+0xe8>)
 800107e:	4a22      	ldr	r2, [pc, #136]	@ (8001108 <HAL_InitTick+0xec>)
 8001080:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001082:	4b20      	ldr	r3, [pc, #128]	@ (8001104 <HAL_InitTick+0xe8>)
 8001084:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001088:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800108a:	4a1e      	ldr	r2, [pc, #120]	@ (8001104 <HAL_InitTick+0xe8>)
 800108c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800108e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001090:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <HAL_InitTick+0xe8>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001096:	4b1b      	ldr	r3, [pc, #108]	@ (8001104 <HAL_InitTick+0xe8>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109c:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <HAL_InitTick+0xe8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80010a2:	4818      	ldr	r0, [pc, #96]	@ (8001104 <HAL_InitTick+0xe8>)
 80010a4:	f004 f88a 	bl	80051bc <HAL_TIM_Base_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80010ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d11b      	bne.n	80010ee <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80010b6:	4813      	ldr	r0, [pc, #76]	@ (8001104 <HAL_InitTick+0xe8>)
 80010b8:	f004 f8e2 	bl	8005280 <HAL_TIM_Base_Start_IT>
 80010bc:	4603      	mov	r3, r0
 80010be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80010c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d111      	bne.n	80010ee <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010ca:	2036      	movs	r0, #54	@ 0x36
 80010cc:	f001 fa6c 	bl	80025a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b0f      	cmp	r3, #15
 80010d4:	d808      	bhi.n	80010e8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80010d6:	2200      	movs	r2, #0
 80010d8:	6879      	ldr	r1, [r7, #4]
 80010da:	2036      	movs	r0, #54	@ 0x36
 80010dc:	f001 fa48 	bl	8002570 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e0:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <HAL_InitTick+0xf0>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	e002      	b.n	80010ee <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3738      	adds	r7, #56	@ 0x38
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000
 8001100:	431bde83 	.word	0x431bde83
 8001104:	20000574 	.word	0x20000574
 8001108:	40001000 	.word	0x40001000
 800110c:	20000144 	.word	0x20000144

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <NMI_Handler+0x4>

08001118 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <MemManage_Handler+0x4>

08001128 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <BusFault_Handler+0x4>

08001130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <UsageFault_Handler+0x4>

08001138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800114c:	4802      	ldr	r0, [pc, #8]	@ (8001158 <TIM6_DAC_IRQHandler+0x10>)
 800114e:	f004 f907 	bl	8005360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000574 	.word	0x20000574

0800115c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	e00a      	b.n	8001184 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800116e:	f3af 8000 	nop.w
 8001172:	4601      	mov	r1, r0
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	60ba      	str	r2, [r7, #8]
 800117a:	b2ca      	uxtb	r2, r1
 800117c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	3301      	adds	r3, #1
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	429a      	cmp	r2, r3
 800118a:	dbf0      	blt.n	800116e <_read+0x12>
  }

  return len;
 800118c:	687b      	ldr	r3, [r7, #4]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	e009      	b.n	80011bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	1c5a      	adds	r2, r3, #1
 80011ac:	60ba      	str	r2, [r7, #8]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fa07 	bl	80005c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3301      	adds	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dbf1      	blt.n	80011a8 <_write+0x12>
  }
  return len;
 80011c4:	687b      	ldr	r3, [r7, #4]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <_close>:

int _close(int file)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011f6:	605a      	str	r2, [r3, #4]
  return 0;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <_isatty>:

int _isatty(int file)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800120e:	2301      	movs	r3, #1
}
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001240:	4a14      	ldr	r2, [pc, #80]	@ (8001294 <_sbrk+0x5c>)
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <_sbrk+0x60>)
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800124c:	4b13      	ldr	r3, [pc, #76]	@ (800129c <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001254:	4b11      	ldr	r3, [pc, #68]	@ (800129c <_sbrk+0x64>)
 8001256:	4a12      	ldr	r2, [pc, #72]	@ (80012a0 <_sbrk+0x68>)
 8001258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125a:	4b10      	ldr	r3, [pc, #64]	@ (800129c <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	429a      	cmp	r2, r3
 8001266:	d207      	bcs.n	8001278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001268:	f006 fd4e 	bl	8007d08 <__errno>
 800126c:	4603      	mov	r3, r0
 800126e:	220c      	movs	r2, #12
 8001270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	e009      	b.n	800128c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001278:	4b08      	ldr	r3, [pc, #32]	@ (800129c <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127e:	4b07      	ldr	r3, [pc, #28]	@ (800129c <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	4a05      	ldr	r2, [pc, #20]	@ (800129c <_sbrk+0x64>)
 8001288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128a:	68fb      	ldr	r3, [r7, #12]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200a0000 	.word	0x200a0000
 8001298:	00000400 	.word	0x00000400
 800129c:	200005c0 	.word	0x200005c0
 80012a0:	20001490 	.word	0x20001490

080012a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <SystemInit+0x20>)
 80012aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012ae:	4a05      	ldr	r2, [pc, #20]	@ (80012c4 <SystemInit+0x20>)
 80012b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001300 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012cc:	f7ff ffea 	bl	80012a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d0:	480c      	ldr	r0, [pc, #48]	@ (8001304 <LoopForever+0x6>)
  ldr r1, =_edata
 80012d2:	490d      	ldr	r1, [pc, #52]	@ (8001308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012d4:	4a0d      	ldr	r2, [pc, #52]	@ (800130c <LoopForever+0xe>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d8:	e002      	b.n	80012e0 <LoopCopyDataInit>

080012da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012de:	3304      	adds	r3, #4

080012e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e4:	d3f9      	bcc.n	80012da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001314 <LoopForever+0x16>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ec:	e001      	b.n	80012f2 <LoopFillZerobss>

080012ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f0:	3204      	adds	r2, #4

080012f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f4:	d3fb      	bcc.n	80012ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012f6:	f006 fd0d 	bl	8007d14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012fa:	f7ff fbb1 	bl	8000a60 <main>

080012fe <LoopForever>:

LoopForever:
    b LoopForever
 80012fe:	e7fe      	b.n	80012fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001300:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001308:	200001ac 	.word	0x200001ac
  ldr r2, =_sidata
 800130c:	08008e7c 	.word	0x08008e7c
  ldr r2, =_sbss
 8001310:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 8001314:	2000148c 	.word	0x2000148c

08001318 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001318:	e7fe      	b.n	8001318 <ADC1_IRQHandler>
	...

0800131c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001324:	4b27      	ldr	r3, [pc, #156]	@ (80013c4 <I2Cx_MspInit+0xa8>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001328:	4a26      	ldr	r2, [pc, #152]	@ (80013c4 <I2Cx_MspInit+0xa8>)
 800132a:	f043 0302 	orr.w	r3, r3, #2
 800132e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001330:	4b24      	ldr	r3, [pc, #144]	@ (80013c4 <I2Cx_MspInit+0xa8>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800133c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001340:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001342:	2312      	movs	r3, #18
 8001344:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001346:	2301      	movs	r3, #1
 8001348:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134a:	2303      	movs	r3, #3
 800134c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800134e:	2304      	movs	r3, #4
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	481b      	ldr	r0, [pc, #108]	@ (80013c8 <I2Cx_MspInit+0xac>)
 800135a:	f001 f933 	bl	80025c4 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	4818      	ldr	r0, [pc, #96]	@ (80013c8 <I2Cx_MspInit+0xac>)
 8001366:	f001 f92d 	bl	80025c4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800136a:	4b16      	ldr	r3, [pc, #88]	@ (80013c4 <I2Cx_MspInit+0xa8>)
 800136c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136e:	4a15      	ldr	r2, [pc, #84]	@ (80013c4 <I2Cx_MspInit+0xa8>)
 8001370:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001374:	6593      	str	r3, [r2, #88]	@ 0x58
 8001376:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <I2Cx_MspInit+0xa8>)
 8001378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001382:	4b10      	ldr	r3, [pc, #64]	@ (80013c4 <I2Cx_MspInit+0xa8>)
 8001384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001386:	4a0f      	ldr	r2, [pc, #60]	@ (80013c4 <I2Cx_MspInit+0xa8>)
 8001388:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800138c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800138e:	4b0d      	ldr	r3, [pc, #52]	@ (80013c4 <I2Cx_MspInit+0xa8>)
 8001390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001392:	4a0c      	ldr	r2, [pc, #48]	@ (80013c4 <I2Cx_MspInit+0xa8>)
 8001394:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001398:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	210f      	movs	r1, #15
 800139e:	2021      	movs	r0, #33	@ 0x21
 80013a0:	f001 f8e6 	bl	8002570 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80013a4:	2021      	movs	r0, #33	@ 0x21
 80013a6:	f001 f8ff 	bl	80025a8 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	210f      	movs	r1, #15
 80013ae:	2022      	movs	r0, #34	@ 0x22
 80013b0:	f001 f8de 	bl	8002570 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80013b4:	2022      	movs	r0, #34	@ 0x22
 80013b6:	f001 f8f7 	bl	80025a8 <HAL_NVIC_EnableIRQ>
}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	@ 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
 80013c8:	48000400 	.word	0x48000400

080013cc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a12      	ldr	r2, [pc, #72]	@ (8001420 <I2Cx_Init+0x54>)
 80013d8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a11      	ldr	r2, [pc, #68]	@ (8001424 <I2Cx_Init+0x58>)
 80013de:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2201      	movs	r2, #1
 80013ea:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff89 	bl	800131c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f001 fba8 	bl	8002b60 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001410:	2100      	movs	r1, #0
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f002 f954 	bl	80036c0 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40005800 	.word	0x40005800
 8001424:	00702681 	.word	0x00702681

08001428 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	@ 0x28
 800142c:	af04      	add	r7, sp, #16
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	4608      	mov	r0, r1
 8001432:	4611      	mov	r1, r2
 8001434:	461a      	mov	r2, r3
 8001436:	4603      	mov	r3, r0
 8001438:	72fb      	strb	r3, [r7, #11]
 800143a:	460b      	mov	r3, r1
 800143c:	813b      	strh	r3, [r7, #8]
 800143e:	4613      	mov	r3, r2
 8001440:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001446:	7afb      	ldrb	r3, [r7, #11]
 8001448:	b299      	uxth	r1, r3
 800144a:	88f8      	ldrh	r0, [r7, #6]
 800144c:	893a      	ldrh	r2, [r7, #8]
 800144e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001452:	9302      	str	r3, [sp, #8]
 8001454:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	6a3b      	ldr	r3, [r7, #32]
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	4603      	mov	r3, r0
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f001 fd5c 	bl	8002f1c <HAL_I2C_Mem_Read>
 8001464:	4603      	mov	r3, r0
 8001466:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d004      	beq.n	8001478 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800146e:	7afb      	ldrb	r3, [r7, #11]
 8001470:	4619      	mov	r1, r3
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f000 f832 	bl	80014dc <I2Cx_Error>
  }
  return status;
 8001478:	7dfb      	ldrb	r3, [r7, #23]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b08a      	sub	sp, #40	@ 0x28
 8001486:	af04      	add	r7, sp, #16
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	4608      	mov	r0, r1
 800148c:	4611      	mov	r1, r2
 800148e:	461a      	mov	r2, r3
 8001490:	4603      	mov	r3, r0
 8001492:	72fb      	strb	r3, [r7, #11]
 8001494:	460b      	mov	r3, r1
 8001496:	813b      	strh	r3, [r7, #8]
 8001498:	4613      	mov	r3, r2
 800149a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80014a0:	7afb      	ldrb	r3, [r7, #11]
 80014a2:	b299      	uxth	r1, r3
 80014a4:	88f8      	ldrh	r0, [r7, #6]
 80014a6:	893a      	ldrh	r2, [r7, #8]
 80014a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ac:	9302      	str	r3, [sp, #8]
 80014ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	4603      	mov	r3, r0
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f001 fc1b 	bl	8002cf4 <HAL_I2C_Mem_Write>
 80014be:	4603      	mov	r3, r0
 80014c0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d004      	beq.n	80014d2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80014c8:	7afb      	ldrb	r3, [r7, #11]
 80014ca:	4619      	mov	r1, r3
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f000 f805 	bl	80014dc <I2Cx_Error>
  }
  return status;
 80014d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f001 fbd4 	bl	8002c96 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ff6c 	bl	80013cc <I2Cx_Init>
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001500:	4802      	ldr	r0, [pc, #8]	@ (800150c <SENSOR_IO_Init+0x10>)
 8001502:	f7ff ff63 	bl	80013cc <I2Cx_Init>
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200005c4 	.word	0x200005c4

08001510 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af02      	add	r7, sp, #8
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
 800151a:	460b      	mov	r3, r1
 800151c:	71bb      	strb	r3, [r7, #6]
 800151e:	4613      	mov	r3, r2
 8001520:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001522:	79bb      	ldrb	r3, [r7, #6]
 8001524:	b29a      	uxth	r2, r3
 8001526:	79f9      	ldrb	r1, [r7, #7]
 8001528:	2301      	movs	r3, #1
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	1d7b      	adds	r3, r7, #5
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2301      	movs	r3, #1
 8001532:	4803      	ldr	r0, [pc, #12]	@ (8001540 <SENSOR_IO_Write+0x30>)
 8001534:	f7ff ffa5 	bl	8001482 <I2Cx_WriteMultiple>
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200005c4 	.word	0x200005c4

08001544 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af02      	add	r7, sp, #8
 800154a:	4603      	mov	r3, r0
 800154c:	460a      	mov	r2, r1
 800154e:	71fb      	strb	r3, [r7, #7]
 8001550:	4613      	mov	r3, r2
 8001552:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	b29a      	uxth	r2, r3
 800155c:	79f9      	ldrb	r1, [r7, #7]
 800155e:	2301      	movs	r3, #1
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	f107 030f 	add.w	r3, r7, #15
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2301      	movs	r3, #1
 800156a:	4804      	ldr	r0, [pc, #16]	@ (800157c <SENSOR_IO_Read+0x38>)
 800156c:	f7ff ff5c 	bl	8001428 <I2Cx_ReadMultiple>

  return read_value;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200005c4 	.word	0x200005c4

08001580 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af02      	add	r7, sp, #8
 8001586:	603a      	str	r2, [r7, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
 800158e:	460b      	mov	r3, r1
 8001590:	71bb      	strb	r3, [r7, #6]
 8001592:	4613      	mov	r3, r2
 8001594:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001596:	79bb      	ldrb	r3, [r7, #6]
 8001598:	b29a      	uxth	r2, r3
 800159a:	79f9      	ldrb	r1, [r7, #7]
 800159c:	88bb      	ldrh	r3, [r7, #4]
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	2301      	movs	r3, #1
 80015a6:	4804      	ldr	r0, [pc, #16]	@ (80015b8 <SENSOR_IO_ReadMultiple+0x38>)
 80015a8:	f7ff ff3e 	bl	8001428 <I2Cx_ReadMultiple>
 80015ac:	4603      	mov	r3, r0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200005c4 	.word	0x200005c4

080015bc <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80015c2:	2300      	movs	r3, #0
 80015c4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80015c6:	2300      	movs	r3, #0
 80015c8:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80015ca:	4b19      	ldr	r3, [pc, #100]	@ (8001630 <BSP_ACCELERO_Init+0x74>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	4798      	blx	r3
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b6a      	cmp	r3, #106	@ 0x6a
 80015d4:	d002      	beq.n	80015dc <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	e024      	b.n	8001626 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80015dc:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <BSP_ACCELERO_Init+0x78>)
 80015de:	4a14      	ldr	r2, [pc, #80]	@ (8001630 <BSP_ACCELERO_Init+0x74>)
 80015e0:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80015e2:	2330      	movs	r3, #48	@ 0x30
 80015e4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80015ea:	2300      	movs	r3, #0
 80015ec:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80015ee:	2340      	movs	r3, #64	@ 0x40
 80015f0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80015fa:	797a      	ldrb	r2, [r7, #5]
 80015fc:	7abb      	ldrb	r3, [r7, #10]
 80015fe:	4313      	orrs	r3, r2
 8001600:	b2db      	uxtb	r3, r3
 8001602:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001604:	7a3b      	ldrb	r3, [r7, #8]
 8001606:	f043 0304 	orr.w	r3, r3, #4
 800160a:	b2db      	uxtb	r3, r3
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	b21a      	sxth	r2, r3
 8001610:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001614:	4313      	orrs	r3, r2
 8001616:	b21b      	sxth	r3, r3
 8001618:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800161a:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <BSP_ACCELERO_Init+0x78>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	89ba      	ldrh	r2, [r7, #12]
 8001622:	4610      	mov	r0, r2
 8001624:	4798      	blx	r3
  }  

  return ret;
 8001626:	7bfb      	ldrb	r3, [r7, #15]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200000dc 	.word	0x200000dc
 8001634:	20000618 	.word	0x20000618

08001638 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001640:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d009      	beq.n	800165c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001648:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	2b00      	cmp	r3, #0
 8001650:	d004      	beq.n	800165c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001652:	4b04      	ldr	r3, [pc, #16]	@ (8001664 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	4798      	blx	r3
    }
  }
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000618 	.word	0x20000618

08001668 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001672:	2300      	movs	r3, #0
 8001674:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001676:	4b1b      	ldr	r3, [pc, #108]	@ (80016e4 <BSP_GYRO_Init+0x7c>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	4798      	blx	r3
 800167c:	4603      	mov	r3, r0
 800167e:	2b6a      	cmp	r3, #106	@ 0x6a
 8001680:	d002      	beq.n	8001688 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	73fb      	strb	r3, [r7, #15]
 8001686:	e028      	b.n	80016da <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8001688:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <BSP_GYRO_Init+0x80>)
 800168a:	4a16      	ldr	r2, [pc, #88]	@ (80016e4 <BSP_GYRO_Init+0x7c>)
 800168c:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8001692:	2330      	movs	r3, #48	@ 0x30
 8001694:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800169e:	2340      	movs	r3, #64	@ 0x40
 80016a0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 80016a6:	230c      	movs	r3, #12
 80016a8:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 80016aa:	7aba      	ldrb	r2, [r7, #10]
 80016ac:	797b      	ldrb	r3, [r7, #5]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80016b4:	7a3b      	ldrb	r3, [r7, #8]
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b21a      	sxth	r2, r3
 80016c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 80016ca:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <BSP_GYRO_Init+0x80>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	89ba      	ldrh	r2, [r7, #12]
 80016d2:	4610      	mov	r0, r2
 80016d4:	4798      	blx	r3
    
    ret = GYRO_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000110 	.word	0x20000110
 80016e8:	2000061c 	.word	0x2000061c

080016ec <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 80016f4:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <BSP_GYRO_GetXYZ+0x2c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d009      	beq.n	8001710 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <BSP_GYRO_GetXYZ+0x2c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	2b00      	cmp	r3, #0
 8001704:	d004      	beq.n	8001710 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8001706:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <BSP_GYRO_GetXYZ+0x2c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	4798      	blx	r3
    }
  }
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	2000061c 	.word	0x2000061c

0800171c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001722:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <BSP_HSENSOR_Init+0x38>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	20be      	movs	r0, #190	@ 0xbe
 8001728:	4798      	blx	r3
 800172a:	4603      	mov	r3, r0
 800172c:	2bbc      	cmp	r3, #188	@ 0xbc
 800172e:	d002      	beq.n	8001736 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	e009      	b.n	800174a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001736:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <BSP_HSENSOR_Init+0x3c>)
 8001738:	4a06      	ldr	r2, [pc, #24]	@ (8001754 <BSP_HSENSOR_Init+0x38>)
 800173a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <BSP_HSENSOR_Init+0x3c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	20be      	movs	r0, #190	@ 0xbe
 8001744:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800174a:	687b      	ldr	r3, [r7, #4]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000080 	.word	0x20000080
 8001758:	20000620 	.word	0x20000620

0800175c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001760:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <BSP_HSENSOR_ReadHumidity+0x18>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	20be      	movs	r0, #190	@ 0xbe
 8001768:	4798      	blx	r3
 800176a:	eef0 7a40 	vmov.f32	s15, s0
}
 800176e:	eeb0 0a67 	vmov.f32	s0, s15
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000620 	.word	0x20000620

08001778 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8001782:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <BSP_MAGNETO_Init+0x50>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	4798      	blx	r3
 8001788:	4603      	mov	r3, r0
 800178a:	2b3d      	cmp	r3, #61	@ 0x3d
 800178c:	d002      	beq.n	8001794 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	71fb      	strb	r3, [r7, #7]
 8001792:	e013      	b.n	80017bc <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8001794:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <BSP_MAGNETO_Init+0x54>)
 8001796:	4a0c      	ldr	r2, [pc, #48]	@ (80017c8 <BSP_MAGNETO_Init+0x50>)
 8001798:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 800179a:	2358      	movs	r3, #88	@ 0x58
 800179c:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 800179e:	2300      	movs	r3, #0
 80017a0:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 80017a6:	2308      	movs	r3, #8
 80017a8:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 80017aa:	2340      	movs	r3, #64	@ 0x40
 80017ac:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 80017ae:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <BSP_MAGNETO_Init+0x54>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	463a      	mov	r2, r7
 80017b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ba:	4798      	blx	r3
  } 

  return ret;  
 80017bc:	79fb      	ldrb	r3, [r7, #7]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	2000009c 	.word	0x2000009c
 80017cc:	20000624 	.word	0x20000624

080017d0 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 80017d8:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <BSP_MAGNETO_GetXYZ+0x2c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d009      	beq.n	80017f4 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <BSP_MAGNETO_GetXYZ+0x2c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d004      	beq.n	80017f4 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 80017ea:	4b04      	ldr	r3, [pc, #16]	@ (80017fc <BSP_MAGNETO_GetXYZ+0x2c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	4798      	blx	r3
    }
  }
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000624 	.word	0x20000624

08001800 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8001806:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <BSP_PSENSOR_Init+0x38>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	20ba      	movs	r0, #186	@ 0xba
 800180c:	4798      	blx	r3
 800180e:	4603      	mov	r3, r0
 8001810:	2bb1      	cmp	r3, #177	@ 0xb1
 8001812:	d002      	beq.n	800181a <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	e009      	b.n	800182e <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800181a:	4b08      	ldr	r3, [pc, #32]	@ (800183c <BSP_PSENSOR_Init+0x3c>)
 800181c:	4a06      	ldr	r2, [pc, #24]	@ (8001838 <BSP_PSENSOR_Init+0x38>)
 800181e:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001820:	4b06      	ldr	r3, [pc, #24]	@ (800183c <BSP_PSENSOR_Init+0x3c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	20ba      	movs	r0, #186	@ 0xba
 8001828:	4798      	blx	r3
    ret = PSENSOR_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800182e:	687b      	ldr	r3, [r7, #4]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200000d0 	.word	0x200000d0
 800183c:	20000628 	.word	0x20000628

08001840 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001844:	4b04      	ldr	r3, [pc, #16]	@ (8001858 <BSP_PSENSOR_ReadPressure+0x18>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	20ba      	movs	r0, #186	@ 0xba
 800184c:	4798      	blx	r3
 800184e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001852:	eeb0 0a67 	vmov.f32	s0, s15
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000628 	.word	0x20000628

0800185c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001866:	4b09      	ldr	r3, [pc, #36]	@ (800188c <BSP_TSENSOR_Init+0x30>)
 8001868:	4a09      	ldr	r2, [pc, #36]	@ (8001890 <BSP_TSENSOR_Init+0x34>)
 800186a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800186c:	f7ff fe46 	bl	80014fc <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <BSP_TSENSOR_Init+0x30>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2100      	movs	r1, #0
 8001878:	20be      	movs	r0, #190	@ 0xbe
 800187a:	4798      	blx	r3

  ret = TSENSOR_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001880:	79fb      	ldrb	r3, [r7, #7]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	2000062c 	.word	0x2000062c
 8001890:	2000008c 	.word	0x2000008c

08001894 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001898:	4b04      	ldr	r3, [pc, #16]	@ (80018ac <BSP_TSENSOR_ReadTemp+0x18>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	20be      	movs	r0, #190	@ 0xbe
 80018a0:	4798      	blx	r3
 80018a2:	eef0 7a40 	vmov.f32	s15, s0
}
 80018a6:	eeb0 0a67 	vmov.f32	s0, s15
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	2000062c 	.word	0x2000062c

080018b0 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2120      	movs	r1, #32
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fe3f 	bl	8001544 <SENSOR_IO_Read>
 80018c6:	4603      	mov	r3, r0
 80018c8:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	f023 0304 	bic.w	r3, r3, #4
 80018d0:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	f023 0303 	bic.w	r3, r3, #3
 80018e0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018f0:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	7bfa      	ldrb	r2, [r7, #15]
 80018f8:	2120      	movs	r1, #32
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fe08 	bl	8001510 <SENSOR_IO_Write>
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001912:	2300      	movs	r3, #0
 8001914:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8001916:	f7ff fdf1 	bl	80014fc <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	210f      	movs	r1, #15
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fe0f 	bl	8001544 <SENSOR_IO_Read>
 8001926:	4603      	mov	r3, r0
 8001928:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800192a:	7bfb      	ldrb	r3, [r7, #15]
}
 800192c:	4618      	mov	r0, r3
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	b2d8      	uxtb	r0, r3
 8001942:	f107 020c 	add.w	r2, r7, #12
 8001946:	2302      	movs	r3, #2
 8001948:	21b0      	movs	r1, #176	@ 0xb0
 800194a:	f7ff fe19 	bl	8001580 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800194e:	7b3b      	ldrb	r3, [r7, #12]
 8001950:	085b      	lsrs	r3, r3, #1
 8001952:	b2db      	uxtb	r3, r3
 8001954:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8001956:	7b7b      	ldrb	r3, [r7, #13]
 8001958:	085b      	lsrs	r3, r3, #1
 800195a:	b2db      	uxtb	r3, r3
 800195c:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	b2d8      	uxtb	r0, r3
 8001962:	f107 020c 	add.w	r2, r7, #12
 8001966:	2302      	movs	r3, #2
 8001968:	21b6      	movs	r1, #182	@ 0xb6
 800196a:	f7ff fe09 	bl	8001580 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800196e:	7b7b      	ldrb	r3, [r7, #13]
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	b21a      	sxth	r2, r3
 8001974:	7b3b      	ldrb	r3, [r7, #12]
 8001976:	b21b      	sxth	r3, r3
 8001978:	4313      	orrs	r3, r2
 800197a:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800197c:	88fb      	ldrh	r3, [r7, #6]
 800197e:	b2d8      	uxtb	r0, r3
 8001980:	f107 020c 	add.w	r2, r7, #12
 8001984:	2302      	movs	r3, #2
 8001986:	21ba      	movs	r1, #186	@ 0xba
 8001988:	f7ff fdfa 	bl	8001580 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800198c:	7b7b      	ldrb	r3, [r7, #13]
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	b21a      	sxth	r2, r3
 8001992:	7b3b      	ldrb	r3, [r7, #12]
 8001994:	b21b      	sxth	r3, r3
 8001996:	4313      	orrs	r3, r2
 8001998:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	b2d8      	uxtb	r0, r3
 800199e:	f107 020c 	add.w	r2, r7, #12
 80019a2:	2302      	movs	r3, #2
 80019a4:	21a8      	movs	r1, #168	@ 0xa8
 80019a6:	f7ff fdeb 	bl	8001580 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80019aa:	7b7b      	ldrb	r3, [r7, #13]
 80019ac:	021b      	lsls	r3, r3, #8
 80019ae:	b21a      	sxth	r2, r3
 80019b0:	7b3b      	ldrb	r3, [r7, #12]
 80019b2:	b21b      	sxth	r3, r3
 80019b4:	4313      	orrs	r3, r2
 80019b6:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80019b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019bc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	ee07 3a90 	vmov	s15, r3
 80019c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ca:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80019ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019dc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80019e0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80019e4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019f6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80019fa:	ee07 3a90 	vmov	s15, r3
 80019fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a06:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001a0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a0e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a16:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001a1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a1e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001a64 <HTS221_H_ReadHumidity+0x130>
 8001a22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2a:	dd01      	ble.n	8001a30 <HTS221_H_ReadHumidity+0xfc>
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a68 <HTS221_H_ReadHumidity+0x134>)
 8001a2e:	e00a      	b.n	8001a46 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8001a30:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3c:	d502      	bpl.n	8001a44 <HTS221_H_ReadHumidity+0x110>
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e000      	b.n	8001a46 <HTS221_H_ReadHumidity+0x112>
 8001a44:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001a46:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001a48:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a4c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a50:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a54:	eef0 7a66 	vmov.f32	s15, s13
}
 8001a58:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5c:	3720      	adds	r7, #32
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	447a0000 	.word	0x447a0000
 8001a68:	447a0000 	.word	0x447a0000

08001a6c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2120      	movs	r1, #32
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fd60 	bl	8001544 <SENSOR_IO_Read>
 8001a84:	4603      	mov	r3, r0
 8001a86:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	f023 0304 	bic.w	r3, r3, #4
 8001a8e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	f043 0304 	orr.w	r3, r3, #4
 8001a96:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	f023 0303 	bic.w	r3, r3, #3
 8001a9e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001aae:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	7bfa      	ldrb	r2, [r7, #15]
 8001ab6:	2120      	movs	r1, #32
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fd29 	bl	8001510 <SENSOR_IO_Write>
}
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b088      	sub	sp, #32
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	b2d8      	uxtb	r0, r3
 8001ad4:	f107 0208 	add.w	r2, r7, #8
 8001ad8:	2302      	movs	r3, #2
 8001ada:	21b2      	movs	r1, #178	@ 0xb2
 8001adc:	f7ff fd50 	bl	8001580 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2135      	movs	r1, #53	@ 0x35
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fd2c 	bl	8001544 <SENSOR_IO_Read>
 8001aec:	4603      	mov	r3, r0
 8001aee:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001af0:	7ffb      	ldrb	r3, [r7, #31]
 8001af2:	021b      	lsls	r3, r3, #8
 8001af4:	b21b      	sxth	r3, r3
 8001af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001afa:	b21a      	sxth	r2, r3
 8001afc:	7a3b      	ldrb	r3, [r7, #8]
 8001afe:	b21b      	sxth	r3, r3
 8001b00:	4313      	orrs	r3, r2
 8001b02:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001b04:	7ffb      	ldrb	r3, [r7, #31]
 8001b06:	019b      	lsls	r3, r3, #6
 8001b08:	b21b      	sxth	r3, r3
 8001b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b0e:	b21a      	sxth	r2, r3
 8001b10:	7a7b      	ldrb	r3, [r7, #9]
 8001b12:	b21b      	sxth	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001b18:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b1c:	10db      	asrs	r3, r3, #3
 8001b1e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001b20:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001b24:	10db      	asrs	r3, r3, #3
 8001b26:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	b2d8      	uxtb	r0, r3
 8001b2c:	f107 0208 	add.w	r2, r7, #8
 8001b30:	2304      	movs	r3, #4
 8001b32:	21bc      	movs	r1, #188	@ 0xbc
 8001b34:	f7ff fd24 	bl	8001580 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001b38:	7a7b      	ldrb	r3, [r7, #9]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	b21a      	sxth	r2, r3
 8001b3e:	7a3b      	ldrb	r3, [r7, #8]
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	4313      	orrs	r3, r2
 8001b44:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001b46:	7afb      	ldrb	r3, [r7, #11]
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	b21a      	sxth	r2, r3
 8001b4c:	7abb      	ldrb	r3, [r7, #10]
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	4313      	orrs	r3, r2
 8001b52:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	b2d8      	uxtb	r0, r3
 8001b58:	f107 0208 	add.w	r2, r7, #8
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	21aa      	movs	r1, #170	@ 0xaa
 8001b60:	f7ff fd0e 	bl	8001580 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001b64:	7a7b      	ldrb	r3, [r7, #9]
 8001b66:	021b      	lsls	r3, r3, #8
 8001b68:	b21a      	sxth	r2, r3
 8001b6a:	7a3b      	ldrb	r3, [r7, #8]
 8001b6c:	b21b      	sxth	r3, r3
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001b72:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001b76:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	ee07 3a90 	vmov	s15, r3
 8001b80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001b88:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	ee07 3a90 	vmov	s15, r3
 8001b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b96:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b9a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001b9e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	ee07 3a90 	vmov	s15, r3
 8001ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bb0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001bb4:	ee07 3a90 	vmov	s15, r3
 8001bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc0:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	ee07 3a90 	vmov	s15, r3
}
 8001bca:	eeb0 0a67 	vmov.f32	s0, s15
 8001bce:	3720      	adds	r7, #32
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	463b      	mov	r3, r7
 8001bdc:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8001be0:	783b      	ldrb	r3, [r7, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	2120      	movs	r1, #32
 8001be6:	203c      	movs	r0, #60	@ 0x3c
 8001be8:	f7ff fc92 	bl	8001510 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8001bec:	787b      	ldrb	r3, [r7, #1]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	2121      	movs	r1, #33	@ 0x21
 8001bf2:	203c      	movs	r0, #60	@ 0x3c
 8001bf4:	f7ff fc8c 	bl	8001510 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001bf8:	78bb      	ldrb	r3, [r7, #2]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	2122      	movs	r1, #34	@ 0x22
 8001bfe:	203c      	movs	r0, #60	@ 0x3c
 8001c00:	f7ff fc86 	bl	8001510 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	461a      	mov	r2, r3
 8001c08:	2123      	movs	r1, #35	@ 0x23
 8001c0a:	203c      	movs	r0, #60	@ 0x3c
 8001c0c:	f7ff fc80 	bl	8001510 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8001c10:	793b      	ldrb	r3, [r7, #4]
 8001c12:	461a      	mov	r2, r3
 8001c14:	2124      	movs	r1, #36	@ 0x24
 8001c16:	203c      	movs	r0, #60	@ 0x3c
 8001c18:	f7ff fc7a 	bl	8001510 <SENSOR_IO_Write>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001c2e:	2122      	movs	r1, #34	@ 0x22
 8001c30:	203c      	movs	r0, #60	@ 0x3c
 8001c32:	f7ff fc87 	bl	8001544 <SENSOR_IO_Read>
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	f023 0303 	bic.w	r3, r3, #3
 8001c40:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	f043 0303 	orr.w	r3, r3, #3
 8001c48:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	2122      	movs	r1, #34	@ 0x22
 8001c50:	203c      	movs	r0, #60	@ 0x3c
 8001c52:	f7ff fc5d 	bl	8001510 <SENSOR_IO_Write>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001c62:	f7ff fc4b 	bl	80014fc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8001c66:	210f      	movs	r1, #15
 8001c68:	203c      	movs	r0, #60	@ 0x3c
 8001c6a:	f7ff fc6b 	bl	8001544 <SENSOR_IO_Read>
 8001c6e:	4603      	mov	r3, r0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001c82:	2122      	movs	r1, #34	@ 0x22
 8001c84:	203c      	movs	r0, #60	@ 0x3c
 8001c86:	f7ff fc5d 	bl	8001544 <SENSOR_IO_Read>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	f023 0320 	bic.w	r3, r3, #32
 8001c94:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	f043 0320 	orr.w	r3, r3, #32
 8001ca2:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	2122      	movs	r1, #34	@ 0x22
 8001caa:	203c      	movs	r0, #60	@ 0x3c
 8001cac:	f7ff fc30 	bl	8001510 <SENSOR_IO_Write>
}
 8001cb0:	bf00      	nop
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8001cce:	2121      	movs	r1, #33	@ 0x21
 8001cd0:	203c      	movs	r0, #60	@ 0x3c
 8001cd2:	f7ff fc37 	bl	8001544 <SENSOR_IO_Read>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8001cda:	f107 0208 	add.w	r2, r7, #8
 8001cde:	2306      	movs	r3, #6
 8001ce0:	21a8      	movs	r1, #168	@ 0xa8
 8001ce2:	203c      	movs	r0, #60	@ 0x3c
 8001ce4:	f7ff fc4c 	bl	8001580 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	77fb      	strb	r3, [r7, #31]
 8001cec:	e01a      	b.n	8001d24 <LIS3MDL_MagReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001cee:	7ffb      	ldrb	r3, [r7, #31]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	3320      	adds	r3, #32
 8001cf6:	443b      	add	r3, r7
 8001cf8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	7ffa      	ldrb	r2, [r7, #31]
 8001d02:	0052      	lsls	r2, r2, #1
 8001d04:	3220      	adds	r2, #32
 8001d06:	443a      	add	r2, r7
 8001d08:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	7ffb      	ldrb	r3, [r7, #31]
 8001d12:	b212      	sxth	r2, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	3320      	adds	r3, #32
 8001d18:	443b      	add	r3, r7
 8001d1a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001d1e:	7ffb      	ldrb	r3, [r7, #31]
 8001d20:	3301      	adds	r3, #1
 8001d22:	77fb      	strb	r3, [r7, #31]
 8001d24:	7ffb      	ldrb	r3, [r7, #31]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d9e1      	bls.n	8001cee <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8001d2a:	7dfb      	ldrb	r3, [r7, #23]
 8001d2c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8001d30:	2b60      	cmp	r3, #96	@ 0x60
 8001d32:	d013      	beq.n	8001d5c <LIS3MDL_MagReadXYZ+0xa4>
 8001d34:	2b60      	cmp	r3, #96	@ 0x60
 8001d36:	dc14      	bgt.n	8001d62 <LIS3MDL_MagReadXYZ+0xaa>
 8001d38:	2b40      	cmp	r3, #64	@ 0x40
 8001d3a:	d00c      	beq.n	8001d56 <LIS3MDL_MagReadXYZ+0x9e>
 8001d3c:	2b40      	cmp	r3, #64	@ 0x40
 8001d3e:	dc10      	bgt.n	8001d62 <LIS3MDL_MagReadXYZ+0xaa>
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <LIS3MDL_MagReadXYZ+0x92>
 8001d44:	2b20      	cmp	r3, #32
 8001d46:	d003      	beq.n	8001d50 <LIS3MDL_MagReadXYZ+0x98>
 8001d48:	e00b      	b.n	8001d62 <LIS3MDL_MagReadXYZ+0xaa>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8001d4a:	4b19      	ldr	r3, [pc, #100]	@ (8001db0 <LIS3MDL_MagReadXYZ+0xf8>)
 8001d4c:	61bb      	str	r3, [r7, #24]
    break;
 8001d4e:	e008      	b.n	8001d62 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8001d50:	4b18      	ldr	r3, [pc, #96]	@ (8001db4 <LIS3MDL_MagReadXYZ+0xfc>)
 8001d52:	61bb      	str	r3, [r7, #24]
    break;
 8001d54:	e005      	b.n	8001d62 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8001d56:	4b18      	ldr	r3, [pc, #96]	@ (8001db8 <LIS3MDL_MagReadXYZ+0x100>)
 8001d58:	61bb      	str	r3, [r7, #24]
    break;
 8001d5a:	e002      	b.n	8001d62 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8001d5c:	4b17      	ldr	r3, [pc, #92]	@ (8001dbc <LIS3MDL_MagReadXYZ+0x104>)
 8001d5e:	61bb      	str	r3, [r7, #24]
    break;    
 8001d60:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	77fb      	strb	r3, [r7, #31]
 8001d66:	e01a      	b.n	8001d9e <LIS3MDL_MagReadXYZ+0xe6>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001d68:	7ffb      	ldrb	r3, [r7, #31]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	3320      	adds	r3, #32
 8001d6e:	443b      	add	r3, r7
 8001d70:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001d74:	ee07 3a90 	vmov	s15, r3
 8001d78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d84:	7ffb      	ldrb	r3, [r7, #31]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d90:	ee17 2a90 	vmov	r2, s15
 8001d94:	b212      	sxth	r2, r2
 8001d96:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001d98:	7ffb      	ldrb	r3, [r7, #31]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	77fb      	strb	r3, [r7, #31]
 8001d9e:	7ffb      	ldrb	r3, [r7, #31]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d9e1      	bls.n	8001d68 <LIS3MDL_MagReadXYZ+0xb0>
  }
}
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
 8001da8:	3720      	adds	r7, #32
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	3e0f5c29 	.word	0x3e0f5c29
 8001db4:	3e947ae1 	.word	0x3e947ae1
 8001db8:	3edc28f6 	.word	0x3edc28f6
 8001dbc:	3f147ae1 	.word	0x3f147ae1

08001dc0 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 f879 	bl	8001ec4 <LPS22HB_Init>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b084      	sub	sp, #16
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	4603      	mov	r3, r0
 8001de2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001de4:	2300      	movs	r3, #0
 8001de6:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001de8:	f7ff fb88 	bl	80014fc <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	210f      	movs	r1, #15
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fba6 	bl	8001544 <SENSOR_IO_Read>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8001e08:	b590      	push	{r4, r7, lr}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8001e16:	2300      	movs	r3, #0
 8001e18:	74fb      	strb	r3, [r7, #19]
 8001e1a:	e013      	b.n	8001e44 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8001e1c:	88fb      	ldrh	r3, [r7, #6]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	7cfb      	ldrb	r3, [r7, #19]
 8001e22:	3328      	adds	r3, #40	@ 0x28
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	7cfc      	ldrb	r4, [r7, #19]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	f7ff fb8a 	bl	8001544 <SENSOR_IO_Read>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461a      	mov	r2, r3
 8001e34:	f104 0318 	add.w	r3, r4, #24
 8001e38:	443b      	add	r3, r7
 8001e3a:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8001e3e:	7cfb      	ldrb	r3, [r7, #19]
 8001e40:	3301      	adds	r3, #1
 8001e42:	74fb      	strb	r3, [r7, #19]
 8001e44:	7cfb      	ldrb	r3, [r7, #19]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d9e8      	bls.n	8001e1c <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	74fb      	strb	r3, [r7, #19]
 8001e4e:	e00f      	b.n	8001e70 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8001e50:	7cfb      	ldrb	r3, [r7, #19]
 8001e52:	3318      	adds	r3, #24
 8001e54:	443b      	add	r3, r7
 8001e56:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	7cfb      	ldrb	r3, [r7, #19]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8001e6a:	7cfb      	ldrb	r3, [r7, #19]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	74fb      	strb	r3, [r7, #19]
 8001e70:	7cfb      	ldrb	r3, [r7, #19]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d9ec      	bls.n	8001e50 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8001e86:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2264      	movs	r2, #100	@ 0x64
 8001e90:	fb02 f303 	mul.w	r3, r2, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	da01      	bge.n	8001e9c <LPS22HB_P_ReadPressure+0x94>
 8001e98:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001e9c:	131b      	asrs	r3, r3, #12
 8001e9e:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eaa:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001ec0 <LPS22HB_P_ReadPressure+0xb8>
 8001eae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001eb2:	eef0 7a66 	vmov.f32	s15, s13
}
 8001eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eba:	371c      	adds	r7, #28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd90      	pop	{r4, r7, pc}
 8001ec0:	42c80000 	.word	0x42c80000

08001ec4 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	211a      	movs	r1, #26
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fb35 	bl	8001544 <SENSOR_IO_Read>
 8001eda:	4603      	mov	r3, r0
 8001edc:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	f023 0301 	bic.w	r3, r3, #1
 8001ee4:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8001eee:	88fb      	ldrh	r3, [r7, #6]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	211a      	movs	r1, #26
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fb0a 	bl	8001510 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2110      	movs	r1, #16
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fb1e 	bl	8001544 <SENSOR_IO_Read>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f12:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001f1a:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	f023 0302 	bic.w	r3, r3, #2
 8001f22:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	f043 0302 	orr.w	r3, r3, #2
 8001f2a:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	7bfa      	ldrb	r2, [r7, #15]
 8001f32:	2110      	movs	r1, #16
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff faeb 	bl	8001510 <SENSOR_IO_Write>
}  
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b084      	sub	sp, #16
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	4603      	mov	r3, r0
 8001f4a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001f50:	2110      	movs	r1, #16
 8001f52:	20d4      	movs	r0, #212	@ 0xd4
 8001f54:	f7ff faf6 	bl	8001544 <SENSOR_IO_Read>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001f5c:	88fb      	ldrh	r3, [r7, #6]
 8001f5e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001f60:	7bbb      	ldrb	r3, [r7, #14]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001f68:	7bba      	ldrb	r2, [r7, #14]
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001f70:	7bbb      	ldrb	r3, [r7, #14]
 8001f72:	461a      	mov	r2, r3
 8001f74:	2110      	movs	r1, #16
 8001f76:	20d4      	movs	r0, #212	@ 0xd4
 8001f78:	f7ff faca 	bl	8001510 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001f7c:	2112      	movs	r1, #18
 8001f7e:	20d4      	movs	r0, #212	@ 0xd4
 8001f80:	f7ff fae0 	bl	8001544 <SENSOR_IO_Read>
 8001f84:	4603      	mov	r3, r0
 8001f86:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001f88:	88fb      	ldrh	r3, [r7, #6]
 8001f8a:	0a1b      	lsrs	r3, r3, #8
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001f90:	7bbb      	ldrb	r3, [r7, #14]
 8001f92:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8001f96:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001f98:	7bba      	ldrb	r2, [r7, #14]
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001fa0:	7bbb      	ldrb	r3, [r7, #14]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	2112      	movs	r1, #18
 8001fa6:	20d4      	movs	r0, #212	@ 0xd4
 8001fa8:	f7ff fab2 	bl	8001510 <SENSOR_IO_Write>
}
 8001fac:	bf00      	nop
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001fbe:	2110      	movs	r1, #16
 8001fc0:	20d4      	movs	r0, #212	@ 0xd4
 8001fc2:	f7ff fabf 	bl	8001544 <SENSOR_IO_Read>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	2110      	movs	r1, #16
 8001fd8:	20d4      	movs	r0, #212	@ 0xd4
 8001fda:	f7ff fa99 	bl	8001510 <SENSOR_IO_Write>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8001fea:	f7ff fa87 	bl	80014fc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001fee:	210f      	movs	r1, #15
 8001ff0:	20d4      	movs	r0, #212	@ 0xd4
 8001ff2:	f7ff faa7 	bl	8001544 <SENSOR_IO_Read>
 8001ff6:	4603      	mov	r3, r0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002006:	2300      	movs	r3, #0
 8002008:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800200a:	2115      	movs	r1, #21
 800200c:	20d4      	movs	r0, #212	@ 0xd4
 800200e:	f7ff fa99 	bl	8001544 <SENSOR_IO_Read>
 8002012:	4603      	mov	r3, r0
 8002014:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002016:	7bfb      	ldrb	r3, [r7, #15]
 8002018:	f023 0310 	bic.w	r3, r3, #16
 800201c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	f043 0310 	orr.w	r3, r3, #16
 800202a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	461a      	mov	r2, r3
 8002030:	2115      	movs	r1, #21
 8002032:	20d4      	movs	r0, #212	@ 0xd4
 8002034:	f7ff fa6c 	bl	8001510 <SENSOR_IO_Write>
}
 8002038:	bf00      	nop
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002048:	2300      	movs	r3, #0
 800204a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002056:	2110      	movs	r1, #16
 8002058:	20d4      	movs	r0, #212	@ 0xd4
 800205a:	f7ff fa73 	bl	8001544 <SENSOR_IO_Read>
 800205e:	4603      	mov	r3, r0
 8002060:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002062:	f107 0208 	add.w	r2, r7, #8
 8002066:	2306      	movs	r3, #6
 8002068:	2128      	movs	r1, #40	@ 0x28
 800206a:	20d4      	movs	r0, #212	@ 0xd4
 800206c:	f7ff fa88 	bl	8001580 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002070:	2300      	movs	r3, #0
 8002072:	77fb      	strb	r3, [r7, #31]
 8002074:	e01a      	b.n	80020ac <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002076:	7ffb      	ldrb	r3, [r7, #31]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	3301      	adds	r3, #1
 800207c:	3320      	adds	r3, #32
 800207e:	443b      	add	r3, r7
 8002080:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002084:	021b      	lsls	r3, r3, #8
 8002086:	b29b      	uxth	r3, r3
 8002088:	7ffa      	ldrb	r2, [r7, #31]
 800208a:	0052      	lsls	r2, r2, #1
 800208c:	3220      	adds	r2, #32
 800208e:	443a      	add	r2, r7
 8002090:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002094:	4413      	add	r3, r2
 8002096:	b29a      	uxth	r2, r3
 8002098:	7ffb      	ldrb	r3, [r7, #31]
 800209a:	b212      	sxth	r2, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	3320      	adds	r3, #32
 80020a0:	443b      	add	r3, r7
 80020a2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80020a6:	7ffb      	ldrb	r3, [r7, #31]
 80020a8:	3301      	adds	r3, #1
 80020aa:	77fb      	strb	r3, [r7, #31]
 80020ac:	7ffb      	ldrb	r3, [r7, #31]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d9e1      	bls.n	8002076 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80020b2:	7dfb      	ldrb	r3, [r7, #23]
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	2b0c      	cmp	r3, #12
 80020ba:	d829      	bhi.n	8002110 <LSM6DSL_AccReadXYZ+0xd0>
 80020bc:	a201      	add	r2, pc, #4	@ (adr r2, 80020c4 <LSM6DSL_AccReadXYZ+0x84>)
 80020be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c2:	bf00      	nop
 80020c4:	080020f9 	.word	0x080020f9
 80020c8:	08002111 	.word	0x08002111
 80020cc:	08002111 	.word	0x08002111
 80020d0:	08002111 	.word	0x08002111
 80020d4:	0800210b 	.word	0x0800210b
 80020d8:	08002111 	.word	0x08002111
 80020dc:	08002111 	.word	0x08002111
 80020e0:	08002111 	.word	0x08002111
 80020e4:	080020ff 	.word	0x080020ff
 80020e8:	08002111 	.word	0x08002111
 80020ec:	08002111 	.word	0x08002111
 80020f0:	08002111 	.word	0x08002111
 80020f4:	08002105 	.word	0x08002105
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80020f8:	4b18      	ldr	r3, [pc, #96]	@ (800215c <LSM6DSL_AccReadXYZ+0x11c>)
 80020fa:	61bb      	str	r3, [r7, #24]
    break;
 80020fc:	e008      	b.n	8002110 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80020fe:	4b18      	ldr	r3, [pc, #96]	@ (8002160 <LSM6DSL_AccReadXYZ+0x120>)
 8002100:	61bb      	str	r3, [r7, #24]
    break;
 8002102:	e005      	b.n	8002110 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002104:	4b17      	ldr	r3, [pc, #92]	@ (8002164 <LSM6DSL_AccReadXYZ+0x124>)
 8002106:	61bb      	str	r3, [r7, #24]
    break;
 8002108:	e002      	b.n	8002110 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800210a:	4b17      	ldr	r3, [pc, #92]	@ (8002168 <LSM6DSL_AccReadXYZ+0x128>)
 800210c:	61bb      	str	r3, [r7, #24]
    break;    
 800210e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002110:	2300      	movs	r3, #0
 8002112:	77fb      	strb	r3, [r7, #31]
 8002114:	e01a      	b.n	800214c <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002116:	7ffb      	ldrb	r3, [r7, #31]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	3320      	adds	r3, #32
 800211c:	443b      	add	r3, r7
 800211e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002122:	ee07 3a90 	vmov	s15, r3
 8002126:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800212a:	edd7 7a06 	vldr	s15, [r7, #24]
 800212e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002132:	7ffb      	ldrb	r3, [r7, #31]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800213e:	ee17 2a90 	vmov	r2, s15
 8002142:	b212      	sxth	r2, r2
 8002144:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002146:	7ffb      	ldrb	r3, [r7, #31]
 8002148:	3301      	adds	r3, #1
 800214a:	77fb      	strb	r3, [r7, #31]
 800214c:	7ffb      	ldrb	r3, [r7, #31]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d9e1      	bls.n	8002116 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8002152:	bf00      	nop
 8002154:	bf00      	nop
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	3d79db23 	.word	0x3d79db23
 8002160:	3df9db23 	.word	0x3df9db23
 8002164:	3e79db23 	.word	0x3e79db23
 8002168:	3ef9db23 	.word	0x3ef9db23

0800216c <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002176:	2300      	movs	r3, #0
 8002178:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800217a:	2111      	movs	r1, #17
 800217c:	20d4      	movs	r0, #212	@ 0xd4
 800217e:	f7ff f9e1 	bl	8001544 <SENSOR_IO_Read>
 8002182:	4603      	mov	r3, r0
 8002184:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800218a:	7bbb      	ldrb	r3, [r7, #14]
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002192:	7bba      	ldrb	r2, [r7, #14]
 8002194:	7bfb      	ldrb	r3, [r7, #15]
 8002196:	4313      	orrs	r3, r2
 8002198:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800219a:	7bbb      	ldrb	r3, [r7, #14]
 800219c:	461a      	mov	r2, r3
 800219e:	2111      	movs	r1, #17
 80021a0:	20d4      	movs	r0, #212	@ 0xd4
 80021a2:	f7ff f9b5 	bl	8001510 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80021a6:	2112      	movs	r1, #18
 80021a8:	20d4      	movs	r0, #212	@ 0xd4
 80021aa:	f7ff f9cb 	bl	8001544 <SENSOR_IO_Read>
 80021ae:	4603      	mov	r3, r0
 80021b0:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80021b2:	88fb      	ldrh	r3, [r7, #6]
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80021ba:	7bbb      	ldrb	r3, [r7, #14]
 80021bc:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 80021c0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80021c2:	7bba      	ldrb	r2, [r7, #14]
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80021ca:	7bbb      	ldrb	r3, [r7, #14]
 80021cc:	461a      	mov	r2, r3
 80021ce:	2112      	movs	r1, #18
 80021d0:	20d4      	movs	r0, #212	@ 0xd4
 80021d2:	f7ff f99d 	bl	8001510 <SENSOR_IO_Write>
}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80021e4:	2300      	movs	r3, #0
 80021e6:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80021e8:	2111      	movs	r1, #17
 80021ea:	20d4      	movs	r0, #212	@ 0xd4
 80021ec:	f7ff f9aa 	bl	8001544 <SENSOR_IO_Read>
 80021f0:	4603      	mov	r3, r0
 80021f2:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	461a      	mov	r2, r3
 8002200:	2111      	movs	r1, #17
 8002202:	20d4      	movs	r0, #212	@ 0xd4
 8002204:	f7ff f984 	bl	8001510 <SENSOR_IO_Write>
}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002214:	f7ff f972 	bl	80014fc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8002218:	210f      	movs	r1, #15
 800221a:	20d4      	movs	r0, #212	@ 0xd4
 800221c:	f7ff f992 	bl	8001544 <SENSOR_IO_Read>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	bd80      	pop	{r7, pc}

08002226 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8002226:	b580      	push	{r7, lr}
 8002228:	b084      	sub	sp, #16
 800222a:	af00      	add	r7, sp, #0
 800222c:	4603      	mov	r3, r0
 800222e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002230:	2300      	movs	r3, #0
 8002232:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8002234:	2116      	movs	r1, #22
 8002236:	20d4      	movs	r0, #212	@ 0xd4
 8002238:	f7ff f984 	bl	8001544 <SENSOR_IO_Read>
 800223c:	4603      	mov	r3, r0
 800223e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002246:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002254:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	461a      	mov	r2, r3
 800225a:	2116      	movs	r1, #22
 800225c:	20d4      	movs	r0, #212	@ 0xd4
 800225e:	f7ff f957 	bl	8001510 <SENSOR_IO_Write>
}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8002274:	2300      	movs	r3, #0
 8002276:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002282:	2111      	movs	r1, #17
 8002284:	20d4      	movs	r0, #212	@ 0xd4
 8002286:	f7ff f95d 	bl	8001544 <SENSOR_IO_Read>
 800228a:	4603      	mov	r3, r0
 800228c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800228e:	f107 0208 	add.w	r2, r7, #8
 8002292:	2306      	movs	r3, #6
 8002294:	2122      	movs	r1, #34	@ 0x22
 8002296:	20d4      	movs	r0, #212	@ 0xd4
 8002298:	f7ff f972 	bl	8001580 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800229c:	2300      	movs	r3, #0
 800229e:	77fb      	strb	r3, [r7, #31]
 80022a0:	e01a      	b.n	80022d8 <LSM6DSL_GyroReadXYZAngRate+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80022a2:	7ffb      	ldrb	r3, [r7, #31]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	3301      	adds	r3, #1
 80022a8:	3320      	adds	r3, #32
 80022aa:	443b      	add	r3, r7
 80022ac:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80022b0:	021b      	lsls	r3, r3, #8
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	7ffa      	ldrb	r2, [r7, #31]
 80022b6:	0052      	lsls	r2, r2, #1
 80022b8:	3220      	adds	r2, #32
 80022ba:	443a      	add	r2, r7
 80022bc:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80022c0:	4413      	add	r3, r2
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	7ffb      	ldrb	r3, [r7, #31]
 80022c6:	b212      	sxth	r2, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	3320      	adds	r3, #32
 80022cc:	443b      	add	r3, r7
 80022ce:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80022d2:	7ffb      	ldrb	r3, [r7, #31]
 80022d4:	3301      	adds	r3, #1
 80022d6:	77fb      	strb	r3, [r7, #31]
 80022d8:	7ffb      	ldrb	r3, [r7, #31]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d9e1      	bls.n	80022a2 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80022de:	7dfb      	ldrb	r3, [r7, #23]
 80022e0:	f003 030c 	and.w	r3, r3, #12
 80022e4:	2b0c      	cmp	r3, #12
 80022e6:	d829      	bhi.n	800233c <LSM6DSL_GyroReadXYZAngRate+0xd0>
 80022e8:	a201      	add	r2, pc, #4	@ (adr r2, 80022f0 <LSM6DSL_GyroReadXYZAngRate+0x84>)
 80022ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ee:	bf00      	nop
 80022f0:	08002325 	.word	0x08002325
 80022f4:	0800233d 	.word	0x0800233d
 80022f8:	0800233d 	.word	0x0800233d
 80022fc:	0800233d 	.word	0x0800233d
 8002300:	0800232b 	.word	0x0800232b
 8002304:	0800233d 	.word	0x0800233d
 8002308:	0800233d 	.word	0x0800233d
 800230c:	0800233d 	.word	0x0800233d
 8002310:	08002331 	.word	0x08002331
 8002314:	0800233d 	.word	0x0800233d
 8002318:	0800233d 	.word	0x0800233d
 800231c:	0800233d 	.word	0x0800233d
 8002320:	08002337 	.word	0x08002337
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8002324:	4b16      	ldr	r3, [pc, #88]	@ (8002380 <LSM6DSL_GyroReadXYZAngRate+0x114>)
 8002326:	61bb      	str	r3, [r7, #24]
    break;
 8002328:	e008      	b.n	800233c <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 800232a:	4b16      	ldr	r3, [pc, #88]	@ (8002384 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 800232c:	61bb      	str	r3, [r7, #24]
    break;
 800232e:	e005      	b.n	800233c <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8002330:	4b15      	ldr	r3, [pc, #84]	@ (8002388 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8002332:	61bb      	str	r3, [r7, #24]
    break;
 8002334:	e002      	b.n	800233c <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8002336:	4b15      	ldr	r3, [pc, #84]	@ (800238c <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8002338:	61bb      	str	r3, [r7, #24]
    break;    
 800233a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800233c:	2300      	movs	r3, #0
 800233e:	77fb      	strb	r3, [r7, #31]
 8002340:	e016      	b.n	8002370 <LSM6DSL_GyroReadXYZAngRate+0x104>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8002342:	7ffb      	ldrb	r3, [r7, #31]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	3320      	adds	r3, #32
 8002348:	443b      	add	r3, r7
 800234a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800234e:	ee07 3a90 	vmov	s15, r3
 8002352:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002356:	7ffb      	ldrb	r3, [r7, #31]
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002366:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800236a:	7ffb      	ldrb	r3, [r7, #31]
 800236c:	3301      	adds	r3, #1
 800236e:	77fb      	strb	r3, [r7, #31]
 8002370:	7ffb      	ldrb	r3, [r7, #31]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d9e5      	bls.n	8002342 <LSM6DSL_GyroReadXYZAngRate+0xd6>
  }
}
 8002376:	bf00      	nop
 8002378:	bf00      	nop
 800237a:	3720      	adds	r7, #32
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	410c0000 	.word	0x410c0000
 8002384:	418c0000 	.word	0x418c0000
 8002388:	420c0000 	.word	0x420c0000
 800238c:	428c0000 	.word	0x428c0000

08002390 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800239a:	2003      	movs	r0, #3
 800239c:	f000 f8dd 	bl	800255a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023a0:	200f      	movs	r0, #15
 80023a2:	f7fe fe3b 	bl	800101c <HAL_InitTick>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	71fb      	strb	r3, [r7, #7]
 80023b0:	e001      	b.n	80023b6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023b2:	f7fe fd2b 	bl	8000e0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023b6:	79fb      	ldrb	r3, [r7, #7]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023c4:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <HAL_IncTick+0x20>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <HAL_IncTick+0x24>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4413      	add	r3, r2
 80023d0:	4a04      	ldr	r2, [pc, #16]	@ (80023e4 <HAL_IncTick+0x24>)
 80023d2:	6013      	str	r3, [r2, #0]
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	20000148 	.word	0x20000148
 80023e4:	20000630 	.word	0x20000630

080023e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return uwTick;
 80023ec:	4b03      	ldr	r3, [pc, #12]	@ (80023fc <HAL_GetTick+0x14>)
 80023ee:	681b      	ldr	r3, [r3, #0]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	20000630 	.word	0x20000630

08002400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002410:	4b0c      	ldr	r3, [pc, #48]	@ (8002444 <__NVIC_SetPriorityGrouping+0x44>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800241c:	4013      	ands	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002428:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800242c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002432:	4a04      	ldr	r2, [pc, #16]	@ (8002444 <__NVIC_SetPriorityGrouping+0x44>)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	60d3      	str	r3, [r2, #12]
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800244c:	4b04      	ldr	r3, [pc, #16]	@ (8002460 <__NVIC_GetPriorityGrouping+0x18>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	0a1b      	lsrs	r3, r3, #8
 8002452:	f003 0307 	and.w	r3, r3, #7
}
 8002456:	4618      	mov	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	2b00      	cmp	r3, #0
 8002474:	db0b      	blt.n	800248e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	f003 021f 	and.w	r2, r3, #31
 800247c:	4907      	ldr	r1, [pc, #28]	@ (800249c <__NVIC_EnableIRQ+0x38>)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	2001      	movs	r0, #1
 8002486:	fa00 f202 	lsl.w	r2, r0, r2
 800248a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	e000e100 	.word	0xe000e100

080024a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	6039      	str	r1, [r7, #0]
 80024aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	db0a      	blt.n	80024ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	490c      	ldr	r1, [pc, #48]	@ (80024ec <__NVIC_SetPriority+0x4c>)
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	0112      	lsls	r2, r2, #4
 80024c0:	b2d2      	uxtb	r2, r2
 80024c2:	440b      	add	r3, r1
 80024c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c8:	e00a      	b.n	80024e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	4908      	ldr	r1, [pc, #32]	@ (80024f0 <__NVIC_SetPriority+0x50>)
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	3b04      	subs	r3, #4
 80024d8:	0112      	lsls	r2, r2, #4
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	440b      	add	r3, r1
 80024de:	761a      	strb	r2, [r3, #24]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000e100 	.word	0xe000e100
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b089      	sub	sp, #36	@ 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f1c3 0307 	rsb	r3, r3, #7
 800250e:	2b04      	cmp	r3, #4
 8002510:	bf28      	it	cs
 8002512:	2304      	movcs	r3, #4
 8002514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3304      	adds	r3, #4
 800251a:	2b06      	cmp	r3, #6
 800251c:	d902      	bls.n	8002524 <NVIC_EncodePriority+0x30>
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3b03      	subs	r3, #3
 8002522:	e000      	b.n	8002526 <NVIC_EncodePriority+0x32>
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	f04f 32ff 	mov.w	r2, #4294967295
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43da      	mvns	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	401a      	ands	r2, r3
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800253c:	f04f 31ff 	mov.w	r1, #4294967295
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	43d9      	mvns	r1, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800254c:	4313      	orrs	r3, r2
         );
}
 800254e:	4618      	mov	r0, r3
 8002550:	3724      	adds	r7, #36	@ 0x24
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ff4c 	bl	8002400 <__NVIC_SetPriorityGrouping>
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002582:	f7ff ff61 	bl	8002448 <__NVIC_GetPriorityGrouping>
 8002586:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	6978      	ldr	r0, [r7, #20]
 800258e:	f7ff ffb1 	bl	80024f4 <NVIC_EncodePriority>
 8002592:	4602      	mov	r2, r0
 8002594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002598:	4611      	mov	r1, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff ff80 	bl	80024a0 <__NVIC_SetPriority>
}
 80025a0:	bf00      	nop
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ff54 	bl	8002464 <__NVIC_EnableIRQ>
}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d2:	e166      	b.n	80028a2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	2101      	movs	r1, #1
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	fa01 f303 	lsl.w	r3, r1, r3
 80025e0:	4013      	ands	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8158 	beq.w	800289c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d005      	beq.n	8002604 <HAL_GPIO_Init+0x40>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d130      	bne.n	8002666 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4013      	ands	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800263a:	2201      	movs	r2, #1
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	091b      	lsrs	r3, r3, #4
 8002650:	f003 0201 	and.w	r2, r3, #1
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b03      	cmp	r3, #3
 8002670:	d017      	beq.n	80026a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	2203      	movs	r2, #3
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d123      	bne.n	80026f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	08da      	lsrs	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3208      	adds	r2, #8
 80026b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	220f      	movs	r2, #15
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	08da      	lsrs	r2, r3, #3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3208      	adds	r2, #8
 80026f0:	6939      	ldr	r1, [r7, #16]
 80026f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	2203      	movs	r2, #3
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 0203 	and.w	r2, r3, #3
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 80b2 	beq.w	800289c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002738:	4b61      	ldr	r3, [pc, #388]	@ (80028c0 <HAL_GPIO_Init+0x2fc>)
 800273a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800273c:	4a60      	ldr	r2, [pc, #384]	@ (80028c0 <HAL_GPIO_Init+0x2fc>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6613      	str	r3, [r2, #96]	@ 0x60
 8002744:	4b5e      	ldr	r3, [pc, #376]	@ (80028c0 <HAL_GPIO_Init+0x2fc>)
 8002746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	60bb      	str	r3, [r7, #8]
 800274e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002750:	4a5c      	ldr	r2, [pc, #368]	@ (80028c4 <HAL_GPIO_Init+0x300>)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	089b      	lsrs	r3, r3, #2
 8002756:	3302      	adds	r3, #2
 8002758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	220f      	movs	r2, #15
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800277a:	d02b      	beq.n	80027d4 <HAL_GPIO_Init+0x210>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a52      	ldr	r2, [pc, #328]	@ (80028c8 <HAL_GPIO_Init+0x304>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d025      	beq.n	80027d0 <HAL_GPIO_Init+0x20c>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a51      	ldr	r2, [pc, #324]	@ (80028cc <HAL_GPIO_Init+0x308>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d01f      	beq.n	80027cc <HAL_GPIO_Init+0x208>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a50      	ldr	r2, [pc, #320]	@ (80028d0 <HAL_GPIO_Init+0x30c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d019      	beq.n	80027c8 <HAL_GPIO_Init+0x204>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a4f      	ldr	r2, [pc, #316]	@ (80028d4 <HAL_GPIO_Init+0x310>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d013      	beq.n	80027c4 <HAL_GPIO_Init+0x200>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a4e      	ldr	r2, [pc, #312]	@ (80028d8 <HAL_GPIO_Init+0x314>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d00d      	beq.n	80027c0 <HAL_GPIO_Init+0x1fc>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a4d      	ldr	r2, [pc, #308]	@ (80028dc <HAL_GPIO_Init+0x318>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d007      	beq.n	80027bc <HAL_GPIO_Init+0x1f8>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a4c      	ldr	r2, [pc, #304]	@ (80028e0 <HAL_GPIO_Init+0x31c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d101      	bne.n	80027b8 <HAL_GPIO_Init+0x1f4>
 80027b4:	2307      	movs	r3, #7
 80027b6:	e00e      	b.n	80027d6 <HAL_GPIO_Init+0x212>
 80027b8:	2308      	movs	r3, #8
 80027ba:	e00c      	b.n	80027d6 <HAL_GPIO_Init+0x212>
 80027bc:	2306      	movs	r3, #6
 80027be:	e00a      	b.n	80027d6 <HAL_GPIO_Init+0x212>
 80027c0:	2305      	movs	r3, #5
 80027c2:	e008      	b.n	80027d6 <HAL_GPIO_Init+0x212>
 80027c4:	2304      	movs	r3, #4
 80027c6:	e006      	b.n	80027d6 <HAL_GPIO_Init+0x212>
 80027c8:	2303      	movs	r3, #3
 80027ca:	e004      	b.n	80027d6 <HAL_GPIO_Init+0x212>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e002      	b.n	80027d6 <HAL_GPIO_Init+0x212>
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <HAL_GPIO_Init+0x212>
 80027d4:	2300      	movs	r3, #0
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	f002 0203 	and.w	r2, r2, #3
 80027dc:	0092      	lsls	r2, r2, #2
 80027de:	4093      	lsls	r3, r2
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027e6:	4937      	ldr	r1, [pc, #220]	@ (80028c4 <HAL_GPIO_Init+0x300>)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	089b      	lsrs	r3, r3, #2
 80027ec:	3302      	adds	r3, #2
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027f4:	4b3b      	ldr	r3, [pc, #236]	@ (80028e4 <HAL_GPIO_Init+0x320>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4013      	ands	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002818:	4a32      	ldr	r2, [pc, #200]	@ (80028e4 <HAL_GPIO_Init+0x320>)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800281e:	4b31      	ldr	r3, [pc, #196]	@ (80028e4 <HAL_GPIO_Init+0x320>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	43db      	mvns	r3, r3
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4013      	ands	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002842:	4a28      	ldr	r2, [pc, #160]	@ (80028e4 <HAL_GPIO_Init+0x320>)
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002848:	4b26      	ldr	r3, [pc, #152]	@ (80028e4 <HAL_GPIO_Init+0x320>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	43db      	mvns	r3, r3
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4013      	ands	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800286c:	4a1d      	ldr	r2, [pc, #116]	@ (80028e4 <HAL_GPIO_Init+0x320>)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002872:	4b1c      	ldr	r3, [pc, #112]	@ (80028e4 <HAL_GPIO_Init+0x320>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	43db      	mvns	r3, r3
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4013      	ands	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002896:	4a13      	ldr	r2, [pc, #76]	@ (80028e4 <HAL_GPIO_Init+0x320>)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	3301      	adds	r3, #1
 80028a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	fa22 f303 	lsr.w	r3, r2, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f47f ae91 	bne.w	80025d4 <HAL_GPIO_Init+0x10>
  }
}
 80028b2:	bf00      	nop
 80028b4:	bf00      	nop
 80028b6:	371c      	adds	r7, #28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40010000 	.word	0x40010000
 80028c8:	48000400 	.word	0x48000400
 80028cc:	48000800 	.word	0x48000800
 80028d0:	48000c00 	.word	0x48000c00
 80028d4:	48001000 	.word	0x48001000
 80028d8:	48001400 	.word	0x48001400
 80028dc:	48001800 	.word	0x48001800
 80028e0:	48001c00 	.word	0x48001c00
 80028e4:	40010400 	.word	0x40010400

080028e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80028f6:	e0c9      	b.n	8002a8c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80028f8:	2201      	movs	r2, #1
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80bc 	beq.w	8002a86 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800290e:	4a66      	ldr	r2, [pc, #408]	@ (8002aa8 <HAL_GPIO_DeInit+0x1c0>)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	089b      	lsrs	r3, r3, #2
 8002914:	3302      	adds	r3, #2
 8002916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	220f      	movs	r2, #15
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4013      	ands	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002936:	d02b      	beq.n	8002990 <HAL_GPIO_DeInit+0xa8>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a5c      	ldr	r2, [pc, #368]	@ (8002aac <HAL_GPIO_DeInit+0x1c4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d025      	beq.n	800298c <HAL_GPIO_DeInit+0xa4>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a5b      	ldr	r2, [pc, #364]	@ (8002ab0 <HAL_GPIO_DeInit+0x1c8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d01f      	beq.n	8002988 <HAL_GPIO_DeInit+0xa0>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a5a      	ldr	r2, [pc, #360]	@ (8002ab4 <HAL_GPIO_DeInit+0x1cc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d019      	beq.n	8002984 <HAL_GPIO_DeInit+0x9c>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a59      	ldr	r2, [pc, #356]	@ (8002ab8 <HAL_GPIO_DeInit+0x1d0>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d013      	beq.n	8002980 <HAL_GPIO_DeInit+0x98>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a58      	ldr	r2, [pc, #352]	@ (8002abc <HAL_GPIO_DeInit+0x1d4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d00d      	beq.n	800297c <HAL_GPIO_DeInit+0x94>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a57      	ldr	r2, [pc, #348]	@ (8002ac0 <HAL_GPIO_DeInit+0x1d8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d007      	beq.n	8002978 <HAL_GPIO_DeInit+0x90>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a56      	ldr	r2, [pc, #344]	@ (8002ac4 <HAL_GPIO_DeInit+0x1dc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d101      	bne.n	8002974 <HAL_GPIO_DeInit+0x8c>
 8002970:	2307      	movs	r3, #7
 8002972:	e00e      	b.n	8002992 <HAL_GPIO_DeInit+0xaa>
 8002974:	2308      	movs	r3, #8
 8002976:	e00c      	b.n	8002992 <HAL_GPIO_DeInit+0xaa>
 8002978:	2306      	movs	r3, #6
 800297a:	e00a      	b.n	8002992 <HAL_GPIO_DeInit+0xaa>
 800297c:	2305      	movs	r3, #5
 800297e:	e008      	b.n	8002992 <HAL_GPIO_DeInit+0xaa>
 8002980:	2304      	movs	r3, #4
 8002982:	e006      	b.n	8002992 <HAL_GPIO_DeInit+0xaa>
 8002984:	2303      	movs	r3, #3
 8002986:	e004      	b.n	8002992 <HAL_GPIO_DeInit+0xaa>
 8002988:	2302      	movs	r3, #2
 800298a:	e002      	b.n	8002992 <HAL_GPIO_DeInit+0xaa>
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <HAL_GPIO_DeInit+0xaa>
 8002990:	2300      	movs	r3, #0
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	f002 0203 	and.w	r2, r2, #3
 8002998:	0092      	lsls	r2, r2, #2
 800299a:	4093      	lsls	r3, r2
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d132      	bne.n	8002a08 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80029a2:	4b49      	ldr	r3, [pc, #292]	@ (8002ac8 <HAL_GPIO_DeInit+0x1e0>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	4947      	ldr	r1, [pc, #284]	@ (8002ac8 <HAL_GPIO_DeInit+0x1e0>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80029b0:	4b45      	ldr	r3, [pc, #276]	@ (8002ac8 <HAL_GPIO_DeInit+0x1e0>)
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	4943      	ldr	r1, [pc, #268]	@ (8002ac8 <HAL_GPIO_DeInit+0x1e0>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80029be:	4b42      	ldr	r3, [pc, #264]	@ (8002ac8 <HAL_GPIO_DeInit+0x1e0>)
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	4940      	ldr	r1, [pc, #256]	@ (8002ac8 <HAL_GPIO_DeInit+0x1e0>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80029cc:	4b3e      	ldr	r3, [pc, #248]	@ (8002ac8 <HAL_GPIO_DeInit+0x1e0>)
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	493c      	ldr	r1, [pc, #240]	@ (8002ac8 <HAL_GPIO_DeInit+0x1e0>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	220f      	movs	r2, #15
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80029ea:	4a2f      	ldr	r2, [pc, #188]	@ (8002aa8 <HAL_GPIO_DeInit+0x1c0>)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	089b      	lsrs	r3, r3, #2
 80029f0:	3302      	adds	r3, #2
 80029f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	43da      	mvns	r2, r3
 80029fa:	482b      	ldr	r0, [pc, #172]	@ (8002aa8 <HAL_GPIO_DeInit+0x1c0>)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	400a      	ands	r2, r1
 8002a02:	3302      	adds	r3, #2
 8002a04:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	2103      	movs	r1, #3
 8002a12:	fa01 f303 	lsl.w	r3, r1, r3
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	08da      	lsrs	r2, r3, #3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3208      	adds	r2, #8
 8002a24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	220f      	movs	r2, #15
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	08d2      	lsrs	r2, r2, #3
 8002a3c:	4019      	ands	r1, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3208      	adds	r2, #8
 8002a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2103      	movs	r1, #3
 8002a50:	fa01 f303 	lsl.w	r3, r1, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	401a      	ands	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	2101      	movs	r1, #1
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	fa01 f303 	lsl.w	r3, r1, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	2103      	movs	r1, #3
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	401a      	ands	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f47f af2f 	bne.w	80028f8 <HAL_GPIO_DeInit+0x10>
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	bf00      	nop
 8002a9e:	371c      	adds	r7, #28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	40010000 	.word	0x40010000
 8002aac:	48000400 	.word	0x48000400
 8002ab0:	48000800 	.word	0x48000800
 8002ab4:	48000c00 	.word	0x48000c00
 8002ab8:	48001000 	.word	0x48001000
 8002abc:	48001400 	.word	0x48001400
 8002ac0:	48001800 	.word	0x48001800
 8002ac4:	48001c00 	.word	0x48001c00
 8002ac8:	40010400 	.word	0x40010400

08002acc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	887b      	ldrh	r3, [r7, #2]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
 8002ae8:	e001      	b.n	8002aee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002aea:	2300      	movs	r3, #0
 8002aec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	460b      	mov	r3, r1
 8002b06:	807b      	strh	r3, [r7, #2]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b0c:	787b      	ldrb	r3, [r7, #1]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b12:	887a      	ldrh	r2, [r7, #2]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b18:	e002      	b.n	8002b20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b3e:	887a      	ldrh	r2, [r7, #2]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4013      	ands	r3, r2
 8002b44:	041a      	lsls	r2, r3, #16
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	43d9      	mvns	r1, r3
 8002b4a:	887b      	ldrh	r3, [r7, #2]
 8002b4c:	400b      	ands	r3, r1
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	619a      	str	r2, [r3, #24]
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e08d      	b.n	8002c8e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fe f968 	bl	8000e5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2224      	movs	r2, #36	@ 0x24
 8002b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0201 	bic.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002bb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d107      	bne.n	8002bda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	e006      	b.n	8002be8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002be6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d108      	bne.n	8002c02 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bfe:	605a      	str	r2, [r3, #4]
 8002c00:	e007      	b.n	8002c12 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c10:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c24:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c34:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691a      	ldr	r2, [r3, #16]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69d9      	ldr	r1, [r3, #28]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1a      	ldr	r2, [r3, #32]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e021      	b.n	8002cec <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2224      	movs	r2, #36	@ 0x24
 8002cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0201 	bic.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7fe f929 	bl	8000f18 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af02      	add	r7, sp, #8
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	4608      	mov	r0, r1
 8002cfe:	4611      	mov	r1, r2
 8002d00:	461a      	mov	r2, r3
 8002d02:	4603      	mov	r3, r0
 8002d04:	817b      	strh	r3, [r7, #10]
 8002d06:	460b      	mov	r3, r1
 8002d08:	813b      	strh	r3, [r7, #8]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b20      	cmp	r3, #32
 8002d18:	f040 80f9 	bne.w	8002f0e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <HAL_I2C_Mem_Write+0x34>
 8002d22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d105      	bne.n	8002d34 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d2e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0ed      	b.n	8002f10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_I2C_Mem_Write+0x4e>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e0e6      	b.n	8002f10 <HAL_I2C_Mem_Write+0x21c>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d4a:	f7ff fb4d 	bl	80023e8 <HAL_GetTick>
 8002d4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	2319      	movs	r3, #25
 8002d56:	2201      	movs	r2, #1
 8002d58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fac3 	bl	80032e8 <I2C_WaitOnFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0d1      	b.n	8002f10 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2221      	movs	r2, #33	@ 0x21
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2240      	movs	r2, #64	@ 0x40
 8002d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a3a      	ldr	r2, [r7, #32]
 8002d86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d94:	88f8      	ldrh	r0, [r7, #6]
 8002d96:	893a      	ldrh	r2, [r7, #8]
 8002d98:	8979      	ldrh	r1, [r7, #10]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	9301      	str	r3, [sp, #4]
 8002d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	4603      	mov	r3, r0
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 f9d3 	bl	8003150 <I2C_RequestMemoryWrite>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0a9      	b.n	8002f10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2bff      	cmp	r3, #255	@ 0xff
 8002dc4:	d90e      	bls.n	8002de4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	22ff      	movs	r2, #255	@ 0xff
 8002dca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	8979      	ldrh	r1, [r7, #10]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 fc3d 	bl	800365c <I2C_TransferConfig>
 8002de2:	e00f      	b.n	8002e04 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	8979      	ldrh	r1, [r7, #10]
 8002df6:	2300      	movs	r3, #0
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fc2c 	bl	800365c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 fabc 	bl	8003386 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e07b      	b.n	8002f10 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1c:	781a      	ldrb	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d034      	beq.n	8002ebc <HAL_I2C_Mem_Write+0x1c8>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d130      	bne.n	8002ebc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e60:	2200      	movs	r2, #0
 8002e62:	2180      	movs	r1, #128	@ 0x80
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 fa3f 	bl	80032e8 <I2C_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e04d      	b.n	8002f10 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2bff      	cmp	r3, #255	@ 0xff
 8002e7c:	d90e      	bls.n	8002e9c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	22ff      	movs	r2, #255	@ 0xff
 8002e82:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	8979      	ldrh	r1, [r7, #10]
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 fbe1 	bl	800365c <I2C_TransferConfig>
 8002e9a:	e00f      	b.n	8002ebc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	8979      	ldrh	r1, [r7, #10]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 fbd0 	bl	800365c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d19e      	bne.n	8002e04 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 faa2 	bl	8003414 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e01a      	b.n	8002f10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b0a      	ldr	r3, [pc, #40]	@ (8002f18 <HAL_I2C_Mem_Write+0x224>)
 8002eee:	400b      	ands	r3, r1
 8002ef0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e000      	b.n	8002f10 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002f0e:	2302      	movs	r3, #2
  }
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	fe00e800 	.word	0xfe00e800

08002f1c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	4608      	mov	r0, r1
 8002f26:	4611      	mov	r1, r2
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	817b      	strh	r3, [r7, #10]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	813b      	strh	r3, [r7, #8]
 8002f32:	4613      	mov	r3, r2
 8002f34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	f040 80fd 	bne.w	800313e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <HAL_I2C_Mem_Read+0x34>
 8002f4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f56:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0f1      	b.n	8003140 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_I2C_Mem_Read+0x4e>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e0ea      	b.n	8003140 <HAL_I2C_Mem_Read+0x224>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f72:	f7ff fa39 	bl	80023e8 <HAL_GetTick>
 8002f76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	2319      	movs	r3, #25
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 f9af 	bl	80032e8 <I2C_WaitOnFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0d5      	b.n	8003140 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2222      	movs	r2, #34	@ 0x22
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2240      	movs	r2, #64	@ 0x40
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a3a      	ldr	r2, [r7, #32]
 8002fae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fbc:	88f8      	ldrh	r0, [r7, #6]
 8002fbe:	893a      	ldrh	r2, [r7, #8]
 8002fc0:	8979      	ldrh	r1, [r7, #10]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	9301      	str	r3, [sp, #4]
 8002fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	4603      	mov	r3, r0
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f913 	bl	80031f8 <I2C_RequestMemoryRead>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0ad      	b.n	8003140 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2bff      	cmp	r3, #255	@ 0xff
 8002fec:	d90e      	bls.n	800300c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	22ff      	movs	r2, #255	@ 0xff
 8002ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	8979      	ldrh	r1, [r7, #10]
 8002ffc:	4b52      	ldr	r3, [pc, #328]	@ (8003148 <HAL_I2C_Mem_Read+0x22c>)
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 fb29 	bl	800365c <I2C_TransferConfig>
 800300a:	e00f      	b.n	800302c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301a:	b2da      	uxtb	r2, r3
 800301c:	8979      	ldrh	r1, [r7, #10]
 800301e:	4b4a      	ldr	r3, [pc, #296]	@ (8003148 <HAL_I2C_Mem_Read+0x22c>)
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 fb18 	bl	800365c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003032:	2200      	movs	r2, #0
 8003034:	2104      	movs	r1, #4
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f956 	bl	80032e8 <I2C_WaitOnFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e07c      	b.n	8003140 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003062:	3b01      	subs	r3, #1
 8003064:	b29a      	uxth	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d034      	beq.n	80030ec <HAL_I2C_Mem_Read+0x1d0>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003086:	2b00      	cmp	r3, #0
 8003088:	d130      	bne.n	80030ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003090:	2200      	movs	r2, #0
 8003092:	2180      	movs	r1, #128	@ 0x80
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 f927 	bl	80032e8 <I2C_WaitOnFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e04d      	b.n	8003140 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2bff      	cmp	r3, #255	@ 0xff
 80030ac:	d90e      	bls.n	80030cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	22ff      	movs	r2, #255	@ 0xff
 80030b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	8979      	ldrh	r1, [r7, #10]
 80030bc:	2300      	movs	r3, #0
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 fac9 	bl	800365c <I2C_TransferConfig>
 80030ca:	e00f      	b.n	80030ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	8979      	ldrh	r1, [r7, #10]
 80030de:	2300      	movs	r3, #0
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 fab8 	bl	800365c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d19a      	bne.n	800302c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f98a 	bl	8003414 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e01a      	b.n	8003140 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2220      	movs	r2, #32
 8003110:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6859      	ldr	r1, [r3, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	4b0b      	ldr	r3, [pc, #44]	@ (800314c <HAL_I2C_Mem_Read+0x230>)
 800311e:	400b      	ands	r3, r1
 8003120:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800313a:	2300      	movs	r3, #0
 800313c:	e000      	b.n	8003140 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800313e:	2302      	movs	r3, #2
  }
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	80002400 	.word	0x80002400
 800314c:	fe00e800 	.word	0xfe00e800

08003150 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af02      	add	r7, sp, #8
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	4608      	mov	r0, r1
 800315a:	4611      	mov	r1, r2
 800315c:	461a      	mov	r2, r3
 800315e:	4603      	mov	r3, r0
 8003160:	817b      	strh	r3, [r7, #10]
 8003162:	460b      	mov	r3, r1
 8003164:	813b      	strh	r3, [r7, #8]
 8003166:	4613      	mov	r3, r2
 8003168:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	8979      	ldrh	r1, [r7, #10]
 8003170:	4b20      	ldr	r3, [pc, #128]	@ (80031f4 <I2C_RequestMemoryWrite+0xa4>)
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fa6f 	bl	800365c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	69b9      	ldr	r1, [r7, #24]
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f8ff 	bl	8003386 <I2C_WaitOnTXISFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e02c      	b.n	80031ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d105      	bne.n	80031a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003198:	893b      	ldrh	r3, [r7, #8]
 800319a:	b2da      	uxtb	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80031a2:	e015      	b.n	80031d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031a4:	893b      	ldrh	r3, [r7, #8]
 80031a6:	0a1b      	lsrs	r3, r3, #8
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	69b9      	ldr	r1, [r7, #24]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f8e5 	bl	8003386 <I2C_WaitOnTXISFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e012      	b.n	80031ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031c6:	893b      	ldrh	r3, [r7, #8]
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	2200      	movs	r2, #0
 80031d8:	2180      	movs	r1, #128	@ 0x80
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f884 	bl	80032e8 <I2C_WaitOnFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	80002000 	.word	0x80002000

080031f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	4608      	mov	r0, r1
 8003202:	4611      	mov	r1, r2
 8003204:	461a      	mov	r2, r3
 8003206:	4603      	mov	r3, r0
 8003208:	817b      	strh	r3, [r7, #10]
 800320a:	460b      	mov	r3, r1
 800320c:	813b      	strh	r3, [r7, #8]
 800320e:	4613      	mov	r3, r2
 8003210:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003212:	88fb      	ldrh	r3, [r7, #6]
 8003214:	b2da      	uxtb	r2, r3
 8003216:	8979      	ldrh	r1, [r7, #10]
 8003218:	4b20      	ldr	r3, [pc, #128]	@ (800329c <I2C_RequestMemoryRead+0xa4>)
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	2300      	movs	r3, #0
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fa1c 	bl	800365c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	69b9      	ldr	r1, [r7, #24]
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f8ac 	bl	8003386 <I2C_WaitOnTXISFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e02c      	b.n	8003292 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d105      	bne.n	800324a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800323e:	893b      	ldrh	r3, [r7, #8]
 8003240:	b2da      	uxtb	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	629a      	str	r2, [r3, #40]	@ 0x28
 8003248:	e015      	b.n	8003276 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800324a:	893b      	ldrh	r3, [r7, #8]
 800324c:	0a1b      	lsrs	r3, r3, #8
 800324e:	b29b      	uxth	r3, r3
 8003250:	b2da      	uxtb	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003258:	69fa      	ldr	r2, [r7, #28]
 800325a:	69b9      	ldr	r1, [r7, #24]
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f892 	bl	8003386 <I2C_WaitOnTXISFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e012      	b.n	8003292 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800326c:	893b      	ldrh	r3, [r7, #8]
 800326e:	b2da      	uxtb	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	2200      	movs	r2, #0
 800327e:	2140      	movs	r1, #64	@ 0x40
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f831 	bl	80032e8 <I2C_WaitOnFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	80002000 	.word	0x80002000

080032a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d103      	bne.n	80032be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2200      	movs	r2, #0
 80032bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d007      	beq.n	80032dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	619a      	str	r2, [r3, #24]
  }
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	603b      	str	r3, [r7, #0]
 80032f4:	4613      	mov	r3, r2
 80032f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032f8:	e031      	b.n	800335e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003300:	d02d      	beq.n	800335e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003302:	f7ff f871 	bl	80023e8 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d302      	bcc.n	8003318 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d122      	bne.n	800335e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4013      	ands	r3, r2
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	429a      	cmp	r2, r3
 8003326:	bf0c      	ite	eq
 8003328:	2301      	moveq	r3, #1
 800332a:	2300      	movne	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	461a      	mov	r2, r3
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	429a      	cmp	r2, r3
 8003334:	d113      	bne.n	800335e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333a:	f043 0220 	orr.w	r2, r3, #32
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2220      	movs	r2, #32
 8003346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e00f      	b.n	800337e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699a      	ldr	r2, [r3, #24]
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4013      	ands	r3, r2
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	429a      	cmp	r2, r3
 800336c:	bf0c      	ite	eq
 800336e:	2301      	moveq	r3, #1
 8003370:	2300      	movne	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	461a      	mov	r2, r3
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	429a      	cmp	r2, r3
 800337a:	d0be      	beq.n	80032fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b084      	sub	sp, #16
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003392:	e033      	b.n	80033fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f87f 	bl	800349c <I2C_IsErrorOccurred>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e031      	b.n	800340c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ae:	d025      	beq.n	80033fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b0:	f7ff f81a 	bl	80023e8 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d302      	bcc.n	80033c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d11a      	bne.n	80033fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d013      	beq.n	80033fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d8:	f043 0220 	orr.w	r2, r3, #32
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e007      	b.n	800340c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b02      	cmp	r3, #2
 8003408:	d1c4      	bne.n	8003394 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003420:	e02f      	b.n	8003482 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	68b9      	ldr	r1, [r7, #8]
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 f838 	bl	800349c <I2C_IsErrorOccurred>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e02d      	b.n	8003492 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003436:	f7fe ffd7 	bl	80023e8 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	429a      	cmp	r2, r3
 8003444:	d302      	bcc.n	800344c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d11a      	bne.n	8003482 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b20      	cmp	r3, #32
 8003458:	d013      	beq.n	8003482 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345e:	f043 0220 	orr.w	r2, r3, #32
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e007      	b.n	8003492 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b20      	cmp	r3, #32
 800348e:	d1c8      	bne.n	8003422 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	@ 0x28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	f003 0310 	and.w	r3, r3, #16
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d068      	beq.n	800359a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2210      	movs	r2, #16
 80034ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034d0:	e049      	b.n	8003566 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d8:	d045      	beq.n	8003566 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034da:	f7fe ff85 	bl	80023e8 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d302      	bcc.n	80034f0 <I2C_IsErrorOccurred+0x54>
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d13a      	bne.n	8003566 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003502:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800350e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003512:	d121      	bne.n	8003558 <I2C_IsErrorOccurred+0xbc>
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800351a:	d01d      	beq.n	8003558 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800351c:	7cfb      	ldrb	r3, [r7, #19]
 800351e:	2b20      	cmp	r3, #32
 8003520:	d01a      	beq.n	8003558 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003530:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003532:	f7fe ff59 	bl	80023e8 <HAL_GetTick>
 8003536:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003538:	e00e      	b.n	8003558 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800353a:	f7fe ff55 	bl	80023e8 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b19      	cmp	r3, #25
 8003546:	d907      	bls.n	8003558 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	f043 0320 	orr.w	r3, r3, #32
 800354e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003556:	e006      	b.n	8003566 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b20      	cmp	r3, #32
 8003564:	d1e9      	bne.n	800353a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b20      	cmp	r3, #32
 8003572:	d003      	beq.n	800357c <I2C_IsErrorOccurred+0xe0>
 8003574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0aa      	beq.n	80034d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800357c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003580:	2b00      	cmp	r3, #0
 8003582:	d103      	bne.n	800358c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2220      	movs	r2, #32
 800358a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	f043 0304 	orr.w	r3, r3, #4
 8003592:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00b      	beq.n	80035c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00b      	beq.n	80035e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	f043 0308 	orr.w	r3, r3, #8
 80035d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00b      	beq.n	8003608 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	f043 0302 	orr.w	r3, r3, #2
 80035f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003600:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01c      	beq.n	800364a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f7ff fe45 	bl	80032a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6859      	ldr	r1, [r3, #4]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4b0d      	ldr	r3, [pc, #52]	@ (8003658 <I2C_IsErrorOccurred+0x1bc>)
 8003622:	400b      	ands	r3, r1
 8003624:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	431a      	orrs	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800364a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800364e:	4618      	mov	r0, r3
 8003650:	3728      	adds	r7, #40	@ 0x28
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	fe00e800 	.word	0xfe00e800

0800365c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	607b      	str	r3, [r7, #4]
 8003666:	460b      	mov	r3, r1
 8003668:	817b      	strh	r3, [r7, #10]
 800366a:	4613      	mov	r3, r2
 800366c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800366e:	897b      	ldrh	r3, [r7, #10]
 8003670:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003674:	7a7b      	ldrb	r3, [r7, #9]
 8003676:	041b      	lsls	r3, r3, #16
 8003678:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800367c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	4313      	orrs	r3, r2
 8003686:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800368a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	0d5b      	lsrs	r3, r3, #21
 8003696:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800369a:	4b08      	ldr	r3, [pc, #32]	@ (80036bc <I2C_TransferConfig+0x60>)
 800369c:	430b      	orrs	r3, r1
 800369e:	43db      	mvns	r3, r3
 80036a0:	ea02 0103 	and.w	r1, r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036ae:	bf00      	nop
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	03ff63ff 	.word	0x03ff63ff

080036c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	d138      	bne.n	8003748 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e032      	b.n	800374a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2224      	movs	r2, #36	@ 0x24
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003712:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6819      	ldr	r1, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
  }
}
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003756:	b480      	push	{r7}
 8003758:	b085      	sub	sp, #20
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b20      	cmp	r3, #32
 800376a:	d139      	bne.n	80037e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003776:	2302      	movs	r3, #2
 8003778:	e033      	b.n	80037e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2224      	movs	r2, #36	@ 0x24
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0201 	bic.w	r2, r2, #1
 8003798:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80037a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	021b      	lsls	r3, r3, #8
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	e000      	b.n	80037e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037e0:	2302      	movs	r3, #2
  }
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
	...

080037f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037f4:	4b0d      	ldr	r3, [pc, #52]	@ (800382c <HAL_PWREx_GetVoltageRange+0x3c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003800:	d102      	bne.n	8003808 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003802:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003806:	e00b      	b.n	8003820 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003808:	4b08      	ldr	r3, [pc, #32]	@ (800382c <HAL_PWREx_GetVoltageRange+0x3c>)
 800380a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800380e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003812:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003816:	d102      	bne.n	800381e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003818:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800381c:	e000      	b.n	8003820 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800381e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003820:	4618      	mov	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40007000 	.word	0x40007000

08003830 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d141      	bne.n	80038c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800383e:	4b4b      	ldr	r3, [pc, #300]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800384a:	d131      	bne.n	80038b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800384c:	4b47      	ldr	r3, [pc, #284]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800384e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003852:	4a46      	ldr	r2, [pc, #280]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003858:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800385c:	4b43      	ldr	r3, [pc, #268]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003864:	4a41      	ldr	r2, [pc, #260]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003866:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800386a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800386c:	4b40      	ldr	r3, [pc, #256]	@ (8003970 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2232      	movs	r2, #50	@ 0x32
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	4a3f      	ldr	r2, [pc, #252]	@ (8003974 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003878:	fba2 2303 	umull	r2, r3, r2, r3
 800387c:	0c9b      	lsrs	r3, r3, #18
 800387e:	3301      	adds	r3, #1
 8003880:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003882:	e002      	b.n	800388a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	3b01      	subs	r3, #1
 8003888:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800388a:	4b38      	ldr	r3, [pc, #224]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003896:	d102      	bne.n	800389e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f2      	bne.n	8003884 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800389e:	4b33      	ldr	r3, [pc, #204]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038aa:	d158      	bne.n	800395e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e057      	b.n	8003960 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038b0:	4b2e      	ldr	r3, [pc, #184]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038b6:	4a2d      	ldr	r2, [pc, #180]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80038c0:	e04d      	b.n	800395e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038c8:	d141      	bne.n	800394e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038ca:	4b28      	ldr	r3, [pc, #160]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038d6:	d131      	bne.n	800393c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038d8:	4b24      	ldr	r3, [pc, #144]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038de:	4a23      	ldr	r2, [pc, #140]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038e8:	4b20      	ldr	r3, [pc, #128]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038f0:	4a1e      	ldr	r2, [pc, #120]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80038f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003970 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2232      	movs	r2, #50	@ 0x32
 80038fe:	fb02 f303 	mul.w	r3, r2, r3
 8003902:	4a1c      	ldr	r2, [pc, #112]	@ (8003974 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003904:	fba2 2303 	umull	r2, r3, r2, r3
 8003908:	0c9b      	lsrs	r3, r3, #18
 800390a:	3301      	adds	r3, #1
 800390c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800390e:	e002      	b.n	8003916 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	3b01      	subs	r3, #1
 8003914:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003916:	4b15      	ldr	r3, [pc, #84]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800391e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003922:	d102      	bne.n	800392a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f2      	bne.n	8003910 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800392a:	4b10      	ldr	r3, [pc, #64]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003936:	d112      	bne.n	800395e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e011      	b.n	8003960 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800393c:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800393e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003942:	4a0a      	ldr	r2, [pc, #40]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003948:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800394c:	e007      	b.n	800395e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800394e:	4b07      	ldr	r3, [pc, #28]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003956:	4a05      	ldr	r2, [pc, #20]	@ (800396c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003958:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800395c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	40007000 	.word	0x40007000
 8003970:	2000007c 	.word	0x2000007c
 8003974:	431bde83 	.word	0x431bde83

08003978 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d102      	bne.n	800398c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	f000 bc08 	b.w	800419c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800398c:	4b96      	ldr	r3, [pc, #600]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 030c 	and.w	r3, r3, #12
 8003994:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003996:	4b94      	ldr	r3, [pc, #592]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80e4 	beq.w	8003b76 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d007      	beq.n	80039c4 <HAL_RCC_OscConfig+0x4c>
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	2b0c      	cmp	r3, #12
 80039b8:	f040 808b 	bne.w	8003ad2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	f040 8087 	bne.w	8003ad2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039c4:	4b88      	ldr	r3, [pc, #544]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_RCC_OscConfig+0x64>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e3df      	b.n	800419c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1a      	ldr	r2, [r3, #32]
 80039e0:	4b81      	ldr	r3, [pc, #516]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d004      	beq.n	80039f6 <HAL_RCC_OscConfig+0x7e>
 80039ec:	4b7e      	ldr	r3, [pc, #504]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039f4:	e005      	b.n	8003a02 <HAL_RCC_OscConfig+0x8a>
 80039f6:	4b7c      	ldr	r3, [pc, #496]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 80039f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039fc:	091b      	lsrs	r3, r3, #4
 80039fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d223      	bcs.n	8003a4e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fdfe 	bl	800460c <RCC_SetFlashLatencyFromMSIRange>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e3c0      	b.n	800419c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a1a:	4b73      	ldr	r3, [pc, #460]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a72      	ldr	r2, [pc, #456]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a20:	f043 0308 	orr.w	r3, r3, #8
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	4b70      	ldr	r3, [pc, #448]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	496d      	ldr	r1, [pc, #436]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a38:	4b6b      	ldr	r3, [pc, #428]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	4968      	ldr	r1, [pc, #416]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	604b      	str	r3, [r1, #4]
 8003a4c:	e025      	b.n	8003a9a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a4e:	4b66      	ldr	r3, [pc, #408]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a65      	ldr	r2, [pc, #404]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a54:	f043 0308 	orr.w	r3, r3, #8
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	4b63      	ldr	r3, [pc, #396]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	4960      	ldr	r1, [pc, #384]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a6c:	4b5e      	ldr	r3, [pc, #376]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	021b      	lsls	r3, r3, #8
 8003a7a:	495b      	ldr	r1, [pc, #364]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d109      	bne.n	8003a9a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fdbe 	bl	800460c <RCC_SetFlashLatencyFromMSIRange>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e380      	b.n	800419c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a9a:	f000 fcc1 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	4b51      	ldr	r3, [pc, #324]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	4950      	ldr	r1, [pc, #320]	@ (8003bec <HAL_RCC_OscConfig+0x274>)
 8003aac:	5ccb      	ldrb	r3, [r1, r3]
 8003aae:	f003 031f 	and.w	r3, r3, #31
 8003ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab6:	4a4e      	ldr	r2, [pc, #312]	@ (8003bf0 <HAL_RCC_OscConfig+0x278>)
 8003ab8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003aba:	4b4e      	ldr	r3, [pc, #312]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fd faac 	bl	800101c <HAL_InitTick>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d052      	beq.n	8003b74 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	e364      	b.n	800419c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d032      	beq.n	8003b40 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ada:	4b43      	ldr	r3, [pc, #268]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a42      	ldr	r2, [pc, #264]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ae6:	f7fe fc7f 	bl	80023e8 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003aee:	f7fe fc7b 	bl	80023e8 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e34d      	b.n	800419c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b00:	4b39      	ldr	r3, [pc, #228]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b0c:	4b36      	ldr	r3, [pc, #216]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a35      	ldr	r2, [pc, #212]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b12:	f043 0308 	orr.w	r3, r3, #8
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4b33      	ldr	r3, [pc, #204]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	4930      	ldr	r1, [pc, #192]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	021b      	lsls	r3, r3, #8
 8003b38:	492b      	ldr	r1, [pc, #172]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	604b      	str	r3, [r1, #4]
 8003b3e:	e01a      	b.n	8003b76 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b40:	4b29      	ldr	r3, [pc, #164]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a28      	ldr	r2, [pc, #160]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b46:	f023 0301 	bic.w	r3, r3, #1
 8003b4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b4c:	f7fe fc4c 	bl	80023e8 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b52:	e008      	b.n	8003b66 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b54:	f7fe fc48 	bl	80023e8 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e31a      	b.n	800419c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b66:	4b20      	ldr	r3, [pc, #128]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x1dc>
 8003b72:	e000      	b.n	8003b76 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d073      	beq.n	8003c6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_OscConfig+0x21c>
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	2b0c      	cmp	r3, #12
 8003b8c:	d10e      	bne.n	8003bac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d10b      	bne.n	8003bac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b94:	4b14      	ldr	r3, [pc, #80]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d063      	beq.n	8003c68 <HAL_RCC_OscConfig+0x2f0>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d15f      	bne.n	8003c68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e2f7      	b.n	800419c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bb4:	d106      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x24c>
 8003bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a0b      	ldr	r2, [pc, #44]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	e025      	b.n	8003c10 <HAL_RCC_OscConfig+0x298>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bcc:	d114      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x280>
 8003bce:	4b06      	ldr	r3, [pc, #24]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a05      	ldr	r2, [pc, #20]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003bd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	4b03      	ldr	r3, [pc, #12]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a02      	ldr	r2, [pc, #8]	@ (8003be8 <HAL_RCC_OscConfig+0x270>)
 8003be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e013      	b.n	8003c10 <HAL_RCC_OscConfig+0x298>
 8003be8:	40021000 	.word	0x40021000
 8003bec:	08008dc8 	.word	0x08008dc8
 8003bf0:	2000007c 	.word	0x2000007c
 8003bf4:	20000144 	.word	0x20000144
 8003bf8:	4ba0      	ldr	r3, [pc, #640]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a9f      	ldr	r2, [pc, #636]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003bfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	4b9d      	ldr	r3, [pc, #628]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a9c      	ldr	r2, [pc, #624]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003c0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d013      	beq.n	8003c40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7fe fbe6 	bl	80023e8 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c20:	f7fe fbe2 	bl	80023e8 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b64      	cmp	r3, #100	@ 0x64
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e2b4      	b.n	800419c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c32:	4b92      	ldr	r3, [pc, #584]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCC_OscConfig+0x2a8>
 8003c3e:	e014      	b.n	8003c6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fe fbd2 	bl	80023e8 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c48:	f7fe fbce 	bl	80023e8 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	@ 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e2a0      	b.n	800419c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c5a:	4b88      	ldr	r3, [pc, #544]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x2d0>
 8003c66:	e000      	b.n	8003c6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d060      	beq.n	8003d38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d005      	beq.n	8003c88 <HAL_RCC_OscConfig+0x310>
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2b0c      	cmp	r3, #12
 8003c80:	d119      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d116      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c88:	4b7c      	ldr	r3, [pc, #496]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x328>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e27d      	b.n	800419c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca0:	4b76      	ldr	r3, [pc, #472]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	061b      	lsls	r3, r3, #24
 8003cae:	4973      	ldr	r1, [pc, #460]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb4:	e040      	b.n	8003d38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d023      	beq.n	8003d06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cbe:	4b6f      	ldr	r3, [pc, #444]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a6e      	ldr	r2, [pc, #440]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7fe fb8d 	bl	80023e8 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cd2:	f7fe fb89 	bl	80023e8 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e25b      	b.n	800419c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ce4:	4b65      	ldr	r3, [pc, #404]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf0:	4b62      	ldr	r3, [pc, #392]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	061b      	lsls	r3, r3, #24
 8003cfe:	495f      	ldr	r1, [pc, #380]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	604b      	str	r3, [r1, #4]
 8003d04:	e018      	b.n	8003d38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d06:	4b5d      	ldr	r3, [pc, #372]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a5c      	ldr	r2, [pc, #368]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d12:	f7fe fb69 	bl	80023e8 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d1a:	f7fe fb65 	bl	80023e8 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e237      	b.n	800419c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d2c:	4b53      	ldr	r3, [pc, #332]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f0      	bne.n	8003d1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d03c      	beq.n	8003dbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d01c      	beq.n	8003d86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d4c:	4b4b      	ldr	r3, [pc, #300]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d52:	4a4a      	ldr	r2, [pc, #296]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d54:	f043 0301 	orr.w	r3, r3, #1
 8003d58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5c:	f7fe fb44 	bl	80023e8 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d64:	f7fe fb40 	bl	80023e8 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e212      	b.n	800419c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d76:	4b41      	ldr	r3, [pc, #260]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0ef      	beq.n	8003d64 <HAL_RCC_OscConfig+0x3ec>
 8003d84:	e01b      	b.n	8003dbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d86:	4b3d      	ldr	r3, [pc, #244]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d8c:	4a3b      	ldr	r2, [pc, #236]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003d8e:	f023 0301 	bic.w	r3, r3, #1
 8003d92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d96:	f7fe fb27 	bl	80023e8 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d9e:	f7fe fb23 	bl	80023e8 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e1f5      	b.n	800419c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003db0:	4b32      	ldr	r3, [pc, #200]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1ef      	bne.n	8003d9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 80a6 	beq.w	8003f18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10d      	bne.n	8003df8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ddc:	4b27      	ldr	r3, [pc, #156]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003de0:	4a26      	ldr	r2, [pc, #152]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003de8:	4b24      	ldr	r3, [pc, #144]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003df4:	2301      	movs	r3, #1
 8003df6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003df8:	4b21      	ldr	r3, [pc, #132]	@ (8003e80 <HAL_RCC_OscConfig+0x508>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d118      	bne.n	8003e36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e04:	4b1e      	ldr	r3, [pc, #120]	@ (8003e80 <HAL_RCC_OscConfig+0x508>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a1d      	ldr	r2, [pc, #116]	@ (8003e80 <HAL_RCC_OscConfig+0x508>)
 8003e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e10:	f7fe faea 	bl	80023e8 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e18:	f7fe fae6 	bl	80023e8 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e1b8      	b.n	800419c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e2a:	4b15      	ldr	r3, [pc, #84]	@ (8003e80 <HAL_RCC_OscConfig+0x508>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0f0      	beq.n	8003e18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d108      	bne.n	8003e50 <HAL_RCC_OscConfig+0x4d8>
 8003e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e44:	4a0d      	ldr	r2, [pc, #52]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e4e:	e029      	b.n	8003ea4 <HAL_RCC_OscConfig+0x52c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b05      	cmp	r3, #5
 8003e56:	d115      	bne.n	8003e84 <HAL_RCC_OscConfig+0x50c>
 8003e58:	4b08      	ldr	r3, [pc, #32]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5e:	4a07      	ldr	r2, [pc, #28]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003e60:	f043 0304 	orr.w	r3, r3, #4
 8003e64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e68:	4b04      	ldr	r3, [pc, #16]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6e:	4a03      	ldr	r2, [pc, #12]	@ (8003e7c <HAL_RCC_OscConfig+0x504>)
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e78:	e014      	b.n	8003ea4 <HAL_RCC_OscConfig+0x52c>
 8003e7a:	bf00      	nop
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40007000 	.word	0x40007000
 8003e84:	4b9d      	ldr	r3, [pc, #628]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8a:	4a9c      	ldr	r2, [pc, #624]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 8003e8c:	f023 0301 	bic.w	r3, r3, #1
 8003e90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e94:	4b99      	ldr	r3, [pc, #612]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9a:	4a98      	ldr	r2, [pc, #608]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 8003e9c:	f023 0304 	bic.w	r3, r3, #4
 8003ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d016      	beq.n	8003eda <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eac:	f7fe fa9c 	bl	80023e8 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb2:	e00a      	b.n	8003eca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb4:	f7fe fa98 	bl	80023e8 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e168      	b.n	800419c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eca:	4b8c      	ldr	r3, [pc, #560]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 8003ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0ed      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x53c>
 8003ed8:	e015      	b.n	8003f06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eda:	f7fe fa85 	bl	80023e8 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ee0:	e00a      	b.n	8003ef8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee2:	f7fe fa81 	bl	80023e8 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e151      	b.n	800419c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ef8:	4b80      	ldr	r3, [pc, #512]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1ed      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f06:	7ffb      	ldrb	r3, [r7, #31]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d105      	bne.n	8003f18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f0c:	4b7b      	ldr	r3, [pc, #492]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 8003f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f10:	4a7a      	ldr	r2, [pc, #488]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 8003f12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f16:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0320 	and.w	r3, r3, #32
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d03c      	beq.n	8003f9e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01c      	beq.n	8003f66 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f2c:	4b73      	ldr	r3, [pc, #460]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 8003f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f32:	4a72      	ldr	r2, [pc, #456]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3c:	f7fe fa54 	bl	80023e8 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f44:	f7fe fa50 	bl	80023e8 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e122      	b.n	800419c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f56:	4b69      	ldr	r3, [pc, #420]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 8003f58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0ef      	beq.n	8003f44 <HAL_RCC_OscConfig+0x5cc>
 8003f64:	e01b      	b.n	8003f9e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f66:	4b65      	ldr	r3, [pc, #404]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 8003f68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f6c:	4a63      	ldr	r2, [pc, #396]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f76:	f7fe fa37 	bl	80023e8 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f7e:	f7fe fa33 	bl	80023e8 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e105      	b.n	800419c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f90:	4b5a      	ldr	r3, [pc, #360]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 8003f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1ef      	bne.n	8003f7e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 80f9 	beq.w	800419a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	f040 80cf 	bne.w	8004150 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fb2:	4b52      	ldr	r3, [pc, #328]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f003 0203 	and.w	r2, r3, #3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d12c      	bne.n	8004020 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d123      	bne.n	8004020 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fe2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d11b      	bne.n	8004020 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d113      	bne.n	8004020 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004002:	085b      	lsrs	r3, r3, #1
 8004004:	3b01      	subs	r3, #1
 8004006:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d109      	bne.n	8004020 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	3b01      	subs	r3, #1
 800401a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800401c:	429a      	cmp	r2, r3
 800401e:	d071      	beq.n	8004104 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	2b0c      	cmp	r3, #12
 8004024:	d068      	beq.n	80040f8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004026:	4b35      	ldr	r3, [pc, #212]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d105      	bne.n	800403e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004032:	4b32      	ldr	r3, [pc, #200]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e0ac      	b.n	800419c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004042:	4b2e      	ldr	r3, [pc, #184]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a2d      	ldr	r2, [pc, #180]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 8004048:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800404c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800404e:	f7fe f9cb 	bl	80023e8 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004056:	f7fe f9c7 	bl	80023e8 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e099      	b.n	800419c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004068:	4b24      	ldr	r3, [pc, #144]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1f0      	bne.n	8004056 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004074:	4b21      	ldr	r3, [pc, #132]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	4b21      	ldr	r3, [pc, #132]	@ (8004100 <HAL_RCC_OscConfig+0x788>)
 800407a:	4013      	ands	r3, r2
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004084:	3a01      	subs	r2, #1
 8004086:	0112      	lsls	r2, r2, #4
 8004088:	4311      	orrs	r1, r2
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800408e:	0212      	lsls	r2, r2, #8
 8004090:	4311      	orrs	r1, r2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004096:	0852      	lsrs	r2, r2, #1
 8004098:	3a01      	subs	r2, #1
 800409a:	0552      	lsls	r2, r2, #21
 800409c:	4311      	orrs	r1, r2
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80040a2:	0852      	lsrs	r2, r2, #1
 80040a4:	3a01      	subs	r2, #1
 80040a6:	0652      	lsls	r2, r2, #25
 80040a8:	4311      	orrs	r1, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040ae:	06d2      	lsls	r2, r2, #27
 80040b0:	430a      	orrs	r2, r1
 80040b2:	4912      	ldr	r1, [pc, #72]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040b8:	4b10      	ldr	r3, [pc, #64]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a0f      	ldr	r2, [pc, #60]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 80040be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040c4:	4b0d      	ldr	r3, [pc, #52]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	4a0c      	ldr	r2, [pc, #48]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 80040ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040d0:	f7fe f98a 	bl	80023e8 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fe f986 	bl	80023e8 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e058      	b.n	800419c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ea:	4b04      	ldr	r3, [pc, #16]	@ (80040fc <HAL_RCC_OscConfig+0x784>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0f0      	beq.n	80040d8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040f6:	e050      	b.n	800419a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e04f      	b.n	800419c <HAL_RCC_OscConfig+0x824>
 80040fc:	40021000 	.word	0x40021000
 8004100:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004104:	4b27      	ldr	r3, [pc, #156]	@ (80041a4 <HAL_RCC_OscConfig+0x82c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d144      	bne.n	800419a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004110:	4b24      	ldr	r3, [pc, #144]	@ (80041a4 <HAL_RCC_OscConfig+0x82c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a23      	ldr	r2, [pc, #140]	@ (80041a4 <HAL_RCC_OscConfig+0x82c>)
 8004116:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800411a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800411c:	4b21      	ldr	r3, [pc, #132]	@ (80041a4 <HAL_RCC_OscConfig+0x82c>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	4a20      	ldr	r2, [pc, #128]	@ (80041a4 <HAL_RCC_OscConfig+0x82c>)
 8004122:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004126:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004128:	f7fe f95e 	bl	80023e8 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004130:	f7fe f95a 	bl	80023e8 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e02c      	b.n	800419c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004142:	4b18      	ldr	r3, [pc, #96]	@ (80041a4 <HAL_RCC_OscConfig+0x82c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0x7b8>
 800414e:	e024      	b.n	800419a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2b0c      	cmp	r3, #12
 8004154:	d01f      	beq.n	8004196 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004156:	4b13      	ldr	r3, [pc, #76]	@ (80041a4 <HAL_RCC_OscConfig+0x82c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a12      	ldr	r2, [pc, #72]	@ (80041a4 <HAL_RCC_OscConfig+0x82c>)
 800415c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004162:	f7fe f941 	bl	80023e8 <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800416a:	f7fe f93d 	bl	80023e8 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e00f      	b.n	800419c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800417c:	4b09      	ldr	r3, [pc, #36]	@ (80041a4 <HAL_RCC_OscConfig+0x82c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1f0      	bne.n	800416a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004188:	4b06      	ldr	r3, [pc, #24]	@ (80041a4 <HAL_RCC_OscConfig+0x82c>)
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	4905      	ldr	r1, [pc, #20]	@ (80041a4 <HAL_RCC_OscConfig+0x82c>)
 800418e:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <HAL_RCC_OscConfig+0x830>)
 8004190:	4013      	ands	r3, r2
 8004192:	60cb      	str	r3, [r1, #12]
 8004194:	e001      	b.n	800419a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3720      	adds	r7, #32
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40021000 	.word	0x40021000
 80041a8:	feeefffc 	.word	0xfeeefffc

080041ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e11d      	b.n	8004400 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041c4:	4b90      	ldr	r3, [pc, #576]	@ (8004408 <HAL_RCC_ClockConfig+0x25c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d910      	bls.n	80041f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d2:	4b8d      	ldr	r3, [pc, #564]	@ (8004408 <HAL_RCC_ClockConfig+0x25c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f023 020f 	bic.w	r2, r3, #15
 80041da:	498b      	ldr	r1, [pc, #556]	@ (8004408 <HAL_RCC_ClockConfig+0x25c>)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e2:	4b89      	ldr	r3, [pc, #548]	@ (8004408 <HAL_RCC_ClockConfig+0x25c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e105      	b.n	8004400 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d010      	beq.n	8004222 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	4b81      	ldr	r3, [pc, #516]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800420c:	429a      	cmp	r2, r3
 800420e:	d908      	bls.n	8004222 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004210:	4b7e      	ldr	r3, [pc, #504]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	497b      	ldr	r1, [pc, #492]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 800421e:	4313      	orrs	r3, r2
 8004220:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d079      	beq.n	8004322 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2b03      	cmp	r3, #3
 8004234:	d11e      	bne.n	8004274 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004236:	4b75      	ldr	r3, [pc, #468]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e0dc      	b.n	8004400 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004246:	f000 fa3b 	bl	80046c0 <RCC_GetSysClockFreqFromPLLSource>
 800424a:	4603      	mov	r3, r0
 800424c:	4a70      	ldr	r2, [pc, #448]	@ (8004410 <HAL_RCC_ClockConfig+0x264>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d946      	bls.n	80042e0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004252:	4b6e      	ldr	r3, [pc, #440]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d140      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800425e:	4b6b      	ldr	r3, [pc, #428]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004266:	4a69      	ldr	r2, [pc, #420]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 8004268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800426c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800426e:	2380      	movs	r3, #128	@ 0x80
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	e035      	b.n	80042e0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b02      	cmp	r3, #2
 800427a:	d107      	bne.n	800428c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800427c:	4b63      	ldr	r3, [pc, #396]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d115      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0b9      	b.n	8004400 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d107      	bne.n	80042a4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004294:	4b5d      	ldr	r3, [pc, #372]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d109      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0ad      	b.n	8004400 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042a4:	4b59      	ldr	r3, [pc, #356]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0a5      	b.n	8004400 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80042b4:	f000 f8b4 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 80042b8:	4603      	mov	r3, r0
 80042ba:	4a55      	ldr	r2, [pc, #340]	@ (8004410 <HAL_RCC_ClockConfig+0x264>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d90f      	bls.n	80042e0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80042c0:	4b52      	ldr	r3, [pc, #328]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d109      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042cc:	4b4f      	ldr	r3, [pc, #316]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042d4:	4a4d      	ldr	r2, [pc, #308]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 80042d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042da:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042dc:	2380      	movs	r3, #128	@ 0x80
 80042de:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042e0:	4b4a      	ldr	r3, [pc, #296]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f023 0203 	bic.w	r2, r3, #3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	4947      	ldr	r1, [pc, #284]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f2:	f7fe f879 	bl	80023e8 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f8:	e00a      	b.n	8004310 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042fa:	f7fe f875 	bl	80023e8 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004308:	4293      	cmp	r3, r2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e077      	b.n	8004400 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004310:	4b3e      	ldr	r3, [pc, #248]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 020c 	and.w	r2, r3, #12
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	429a      	cmp	r2, r3
 8004320:	d1eb      	bne.n	80042fa <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2b80      	cmp	r3, #128	@ 0x80
 8004326:	d105      	bne.n	8004334 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004328:	4b38      	ldr	r3, [pc, #224]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	4a37      	ldr	r2, [pc, #220]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 800432e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004332:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d010      	beq.n	8004362 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	4b31      	ldr	r3, [pc, #196]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800434c:	429a      	cmp	r2, r3
 800434e:	d208      	bcs.n	8004362 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004350:	4b2e      	ldr	r3, [pc, #184]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	492b      	ldr	r1, [pc, #172]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 800435e:	4313      	orrs	r3, r2
 8004360:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004362:	4b29      	ldr	r3, [pc, #164]	@ (8004408 <HAL_RCC_ClockConfig+0x25c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d210      	bcs.n	8004392 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004370:	4b25      	ldr	r3, [pc, #148]	@ (8004408 <HAL_RCC_ClockConfig+0x25c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f023 020f 	bic.w	r2, r3, #15
 8004378:	4923      	ldr	r1, [pc, #140]	@ (8004408 <HAL_RCC_ClockConfig+0x25c>)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	4313      	orrs	r3, r2
 800437e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004380:	4b21      	ldr	r3, [pc, #132]	@ (8004408 <HAL_RCC_ClockConfig+0x25c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 030f 	and.w	r3, r3, #15
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d001      	beq.n	8004392 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e036      	b.n	8004400 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0304 	and.w	r3, r3, #4
 800439a:	2b00      	cmp	r3, #0
 800439c:	d008      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800439e:	4b1b      	ldr	r3, [pc, #108]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	4918      	ldr	r1, [pc, #96]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0308 	and.w	r3, r3, #8
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d009      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043bc:	4b13      	ldr	r3, [pc, #76]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	4910      	ldr	r1, [pc, #64]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043d0:	f000 f826 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 80043d4:	4602      	mov	r2, r0
 80043d6:	4b0d      	ldr	r3, [pc, #52]	@ (800440c <HAL_RCC_ClockConfig+0x260>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	091b      	lsrs	r3, r3, #4
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	490c      	ldr	r1, [pc, #48]	@ (8004414 <HAL_RCC_ClockConfig+0x268>)
 80043e2:	5ccb      	ldrb	r3, [r1, r3]
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	fa22 f303 	lsr.w	r3, r2, r3
 80043ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004418 <HAL_RCC_ClockConfig+0x26c>)
 80043ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043f0:	4b0a      	ldr	r3, [pc, #40]	@ (800441c <HAL_RCC_ClockConfig+0x270>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fc fe11 	bl	800101c <HAL_InitTick>
 80043fa:	4603      	mov	r3, r0
 80043fc:	73fb      	strb	r3, [r7, #15]

  return status;
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40022000 	.word	0x40022000
 800440c:	40021000 	.word	0x40021000
 8004410:	04c4b400 	.word	0x04c4b400
 8004414:	08008dc8 	.word	0x08008dc8
 8004418:	2000007c 	.word	0x2000007c
 800441c:	20000144 	.word	0x20000144

08004420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004420:	b480      	push	{r7}
 8004422:	b089      	sub	sp, #36	@ 0x24
 8004424:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	61fb      	str	r3, [r7, #28]
 800442a:	2300      	movs	r3, #0
 800442c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800442e:	4b3e      	ldr	r3, [pc, #248]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 030c 	and.w	r3, r3, #12
 8004436:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004438:	4b3b      	ldr	r3, [pc, #236]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_RCC_GetSysClockFreq+0x34>
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	2b0c      	cmp	r3, #12
 800444c:	d121      	bne.n	8004492 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d11e      	bne.n	8004492 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004454:	4b34      	ldr	r3, [pc, #208]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0308 	and.w	r3, r3, #8
 800445c:	2b00      	cmp	r3, #0
 800445e:	d107      	bne.n	8004470 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004460:	4b31      	ldr	r3, [pc, #196]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 8004462:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004466:	0a1b      	lsrs	r3, r3, #8
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	e005      	b.n	800447c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004470:	4b2d      	ldr	r3, [pc, #180]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	091b      	lsrs	r3, r3, #4
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800447c:	4a2b      	ldr	r2, [pc, #172]	@ (800452c <HAL_RCC_GetSysClockFreq+0x10c>)
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004484:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10d      	bne.n	80044a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004490:	e00a      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	2b04      	cmp	r3, #4
 8004496:	d102      	bne.n	800449e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004498:	4b25      	ldr	r3, [pc, #148]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x110>)
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	e004      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d101      	bne.n	80044a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044a4:	4b23      	ldr	r3, [pc, #140]	@ (8004534 <HAL_RCC_GetSysClockFreq+0x114>)
 80044a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	2b0c      	cmp	r3, #12
 80044ac:	d134      	bne.n	8004518 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d003      	beq.n	80044c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d003      	beq.n	80044cc <HAL_RCC_GetSysClockFreq+0xac>
 80044c4:	e005      	b.n	80044d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004530 <HAL_RCC_GetSysClockFreq+0x110>)
 80044c8:	617b      	str	r3, [r7, #20]
      break;
 80044ca:	e005      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044cc:	4b19      	ldr	r3, [pc, #100]	@ (8004534 <HAL_RCC_GetSysClockFreq+0x114>)
 80044ce:	617b      	str	r3, [r7, #20]
      break;
 80044d0:	e002      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	617b      	str	r3, [r7, #20]
      break;
 80044d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044d8:	4b13      	ldr	r3, [pc, #76]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	091b      	lsrs	r3, r3, #4
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	3301      	adds	r3, #1
 80044e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044e6:	4b10      	ldr	r3, [pc, #64]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	0a1b      	lsrs	r3, r3, #8
 80044ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	fb03 f202 	mul.w	r2, r3, r2
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004528 <HAL_RCC_GetSysClockFreq+0x108>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	0e5b      	lsrs	r3, r3, #25
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	3301      	adds	r3, #1
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	fbb2 f3f3 	udiv	r3, r2, r3
 8004516:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004518:	69bb      	ldr	r3, [r7, #24]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3724      	adds	r7, #36	@ 0x24
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000
 800452c:	08008de0 	.word	0x08008de0
 8004530:	00f42400 	.word	0x00f42400
 8004534:	007a1200 	.word	0x007a1200

08004538 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800453c:	4b03      	ldr	r3, [pc, #12]	@ (800454c <HAL_RCC_GetHCLKFreq+0x14>)
 800453e:	681b      	ldr	r3, [r3, #0]
}
 8004540:	4618      	mov	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	2000007c 	.word	0x2000007c

08004550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004554:	f7ff fff0 	bl	8004538 <HAL_RCC_GetHCLKFreq>
 8004558:	4602      	mov	r2, r0
 800455a:	4b06      	ldr	r3, [pc, #24]	@ (8004574 <HAL_RCC_GetPCLK1Freq+0x24>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	0a1b      	lsrs	r3, r3, #8
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	4904      	ldr	r1, [pc, #16]	@ (8004578 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004566:	5ccb      	ldrb	r3, [r1, r3]
 8004568:	f003 031f 	and.w	r3, r3, #31
 800456c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004570:	4618      	mov	r0, r3
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40021000 	.word	0x40021000
 8004578:	08008dd8 	.word	0x08008dd8

0800457c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004580:	f7ff ffda 	bl	8004538 <HAL_RCC_GetHCLKFreq>
 8004584:	4602      	mov	r2, r0
 8004586:	4b06      	ldr	r3, [pc, #24]	@ (80045a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	0adb      	lsrs	r3, r3, #11
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	4904      	ldr	r1, [pc, #16]	@ (80045a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004592:	5ccb      	ldrb	r3, [r1, r3]
 8004594:	f003 031f 	and.w	r3, r3, #31
 8004598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800459c:	4618      	mov	r0, r3
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40021000 	.word	0x40021000
 80045a4:	08008dd8 	.word	0x08008dd8

080045a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	220f      	movs	r2, #15
 80045b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80045b8:	4b12      	ldr	r3, [pc, #72]	@ (8004604 <HAL_RCC_GetClockConfig+0x5c>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 0203 	and.w	r2, r3, #3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80045c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004604 <HAL_RCC_GetClockConfig+0x5c>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80045d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004604 <HAL_RCC_GetClockConfig+0x5c>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80045dc:	4b09      	ldr	r3, [pc, #36]	@ (8004604 <HAL_RCC_GetClockConfig+0x5c>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	08db      	lsrs	r3, r3, #3
 80045e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80045ea:	4b07      	ldr	r3, [pc, #28]	@ (8004608 <HAL_RCC_GetClockConfig+0x60>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 020f 	and.w	r2, r3, #15
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	601a      	str	r2, [r3, #0]
}
 80045f6:	bf00      	nop
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40021000 	.word	0x40021000
 8004608:	40022000 	.word	0x40022000

0800460c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004614:	2300      	movs	r3, #0
 8004616:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004618:	4b27      	ldr	r3, [pc, #156]	@ (80046b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800461a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800461c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004624:	f7ff f8e4 	bl	80037f0 <HAL_PWREx_GetVoltageRange>
 8004628:	6178      	str	r0, [r7, #20]
 800462a:	e014      	b.n	8004656 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800462c:	4b22      	ldr	r3, [pc, #136]	@ (80046b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800462e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004630:	4a21      	ldr	r2, [pc, #132]	@ (80046b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004636:	6593      	str	r3, [r2, #88]	@ 0x58
 8004638:	4b1f      	ldr	r3, [pc, #124]	@ (80046b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800463a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004644:	f7ff f8d4 	bl	80037f0 <HAL_PWREx_GetVoltageRange>
 8004648:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800464a:	4b1b      	ldr	r3, [pc, #108]	@ (80046b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800464c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800464e:	4a1a      	ldr	r2, [pc, #104]	@ (80046b8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004650:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004654:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800465c:	d10b      	bne.n	8004676 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b80      	cmp	r3, #128	@ 0x80
 8004662:	d913      	bls.n	800468c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2ba0      	cmp	r3, #160	@ 0xa0
 8004668:	d902      	bls.n	8004670 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800466a:	2302      	movs	r3, #2
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	e00d      	b.n	800468c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004670:	2301      	movs	r3, #1
 8004672:	613b      	str	r3, [r7, #16]
 8004674:	e00a      	b.n	800468c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b7f      	cmp	r3, #127	@ 0x7f
 800467a:	d902      	bls.n	8004682 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800467c:	2302      	movs	r3, #2
 800467e:	613b      	str	r3, [r7, #16]
 8004680:	e004      	b.n	800468c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b70      	cmp	r3, #112	@ 0x70
 8004686:	d101      	bne.n	800468c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004688:	2301      	movs	r3, #1
 800468a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800468c:	4b0b      	ldr	r3, [pc, #44]	@ (80046bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f023 020f 	bic.w	r2, r3, #15
 8004694:	4909      	ldr	r1, [pc, #36]	@ (80046bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800469c:	4b07      	ldr	r3, [pc, #28]	@ (80046bc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d001      	beq.n	80046ae <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40021000 	.word	0x40021000
 80046bc:	40022000 	.word	0x40022000

080046c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046c6:	4b2d      	ldr	r3, [pc, #180]	@ (800477c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d00b      	beq.n	80046ee <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d825      	bhi.n	8004728 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d008      	beq.n	80046f4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d11f      	bne.n	8004728 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80046e8:	4b25      	ldr	r3, [pc, #148]	@ (8004780 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80046ea:	613b      	str	r3, [r7, #16]
    break;
 80046ec:	e01f      	b.n	800472e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80046ee:	4b25      	ldr	r3, [pc, #148]	@ (8004784 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80046f0:	613b      	str	r3, [r7, #16]
    break;
 80046f2:	e01c      	b.n	800472e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046f4:	4b21      	ldr	r3, [pc, #132]	@ (800477c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d107      	bne.n	8004710 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004700:	4b1e      	ldr	r3, [pc, #120]	@ (800477c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004706:	0a1b      	lsrs	r3, r3, #8
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	e005      	b.n	800471c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004710:	4b1a      	ldr	r3, [pc, #104]	@ (800477c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	091b      	lsrs	r3, r3, #4
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800471c:	4a1a      	ldr	r2, [pc, #104]	@ (8004788 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004724:	613b      	str	r3, [r7, #16]
    break;
 8004726:	e002      	b.n	800472e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004728:	2300      	movs	r3, #0
 800472a:	613b      	str	r3, [r7, #16]
    break;
 800472c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800472e:	4b13      	ldr	r3, [pc, #76]	@ (800477c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	091b      	lsrs	r3, r3, #4
 8004734:	f003 030f 	and.w	r3, r3, #15
 8004738:	3301      	adds	r3, #1
 800473a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800473c:	4b0f      	ldr	r3, [pc, #60]	@ (800477c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	0a1b      	lsrs	r3, r3, #8
 8004742:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	fb03 f202 	mul.w	r2, r3, r2
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004752:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004754:	4b09      	ldr	r3, [pc, #36]	@ (800477c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	0e5b      	lsrs	r3, r3, #25
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	3301      	adds	r3, #1
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	fbb2 f3f3 	udiv	r3, r2, r3
 800476c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800476e:	683b      	ldr	r3, [r7, #0]
}
 8004770:	4618      	mov	r0, r3
 8004772:	371c      	adds	r7, #28
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	40021000 	.word	0x40021000
 8004780:	00f42400 	.word	0x00f42400
 8004784:	007a1200 	.word	0x007a1200
 8004788:	08008de0 	.word	0x08008de0

0800478c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004794:	2300      	movs	r3, #0
 8004796:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004798:	2300      	movs	r3, #0
 800479a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d040      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047ac:	2b80      	cmp	r3, #128	@ 0x80
 80047ae:	d02a      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80047b0:	2b80      	cmp	r3, #128	@ 0x80
 80047b2:	d825      	bhi.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80047b4:	2b60      	cmp	r3, #96	@ 0x60
 80047b6:	d026      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80047b8:	2b60      	cmp	r3, #96	@ 0x60
 80047ba:	d821      	bhi.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80047bc:	2b40      	cmp	r3, #64	@ 0x40
 80047be:	d006      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x42>
 80047c0:	2b40      	cmp	r3, #64	@ 0x40
 80047c2:	d81d      	bhi.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d009      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d010      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x62>
 80047cc:	e018      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047ce:	4b89      	ldr	r3, [pc, #548]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	4a88      	ldr	r2, [pc, #544]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047d8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047da:	e015      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3304      	adds	r3, #4
 80047e0:	2100      	movs	r1, #0
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fb02 	bl	8004dec <RCCEx_PLLSAI1_Config>
 80047e8:	4603      	mov	r3, r0
 80047ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047ec:	e00c      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3320      	adds	r3, #32
 80047f2:	2100      	movs	r1, #0
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fbed 	bl	8004fd4 <RCCEx_PLLSAI2_Config>
 80047fa:	4603      	mov	r3, r0
 80047fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047fe:	e003      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	74fb      	strb	r3, [r7, #19]
      break;
 8004804:	e000      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004806:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004808:	7cfb      	ldrb	r3, [r7, #19]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10b      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800480e:	4b79      	ldr	r3, [pc, #484]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004810:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004814:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800481c:	4975      	ldr	r1, [pc, #468]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004824:	e001      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004826:	7cfb      	ldrb	r3, [r7, #19]
 8004828:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d047      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800483e:	d030      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004840:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004844:	d82a      	bhi.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004846:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800484a:	d02a      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800484c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004850:	d824      	bhi.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004852:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004856:	d008      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800485c:	d81e      	bhi.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004862:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004866:	d010      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004868:	e018      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800486a:	4b62      	ldr	r3, [pc, #392]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	4a61      	ldr	r2, [pc, #388]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004874:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004876:	e015      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3304      	adds	r3, #4
 800487c:	2100      	movs	r1, #0
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fab4 	bl	8004dec <RCCEx_PLLSAI1_Config>
 8004884:	4603      	mov	r3, r0
 8004886:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004888:	e00c      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3320      	adds	r3, #32
 800488e:	2100      	movs	r1, #0
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fb9f 	bl	8004fd4 <RCCEx_PLLSAI2_Config>
 8004896:	4603      	mov	r3, r0
 8004898:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800489a:	e003      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	74fb      	strb	r3, [r7, #19]
      break;
 80048a0:	e000      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80048a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048a4:	7cfb      	ldrb	r3, [r7, #19]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10b      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048aa:	4b52      	ldr	r3, [pc, #328]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b8:	494e      	ldr	r1, [pc, #312]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80048c0:	e001      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c2:	7cfb      	ldrb	r3, [r7, #19]
 80048c4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 809f 	beq.w	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048d4:	2300      	movs	r3, #0
 80048d6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80048d8:	4b46      	ldr	r3, [pc, #280]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80048e8:	2300      	movs	r3, #0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00d      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ee:	4b41      	ldr	r3, [pc, #260]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f2:	4a40      	ldr	r2, [pc, #256]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80048fa:	4b3e      	ldr	r3, [pc, #248]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004902:	60bb      	str	r3, [r7, #8]
 8004904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004906:	2301      	movs	r3, #1
 8004908:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800490a:	4b3b      	ldr	r3, [pc, #236]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a3a      	ldr	r2, [pc, #232]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004914:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004916:	f7fd fd67 	bl	80023e8 <HAL_GetTick>
 800491a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800491c:	e009      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800491e:	f7fd fd63 	bl	80023e8 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d902      	bls.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	74fb      	strb	r3, [r7, #19]
        break;
 8004930:	e005      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004932:	4b31      	ldr	r3, [pc, #196]	@ (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0ef      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800493e:	7cfb      	ldrb	r3, [r7, #19]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d15b      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004944:	4b2b      	ldr	r3, [pc, #172]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800494e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d01f      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	429a      	cmp	r2, r3
 8004960:	d019      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004962:	4b24      	ldr	r3, [pc, #144]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004968:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800496c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800496e:	4b21      	ldr	r3, [pc, #132]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004974:	4a1f      	ldr	r2, [pc, #124]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004976:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800497a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800497e:	4b1d      	ldr	r3, [pc, #116]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004984:	4a1b      	ldr	r2, [pc, #108]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004986:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800498a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800498e:	4a19      	ldr	r2, [pc, #100]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d016      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7fd fd22 	bl	80023e8 <HAL_GetTick>
 80049a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049a6:	e00b      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049a8:	f7fd fd1e 	bl	80023e8 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d902      	bls.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	74fb      	strb	r3, [r7, #19]
            break;
 80049be:	e006      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049c0:	4b0c      	ldr	r3, [pc, #48]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0ec      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80049ce:	7cfb      	ldrb	r3, [r7, #19]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10c      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049d4:	4b07      	ldr	r3, [pc, #28]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e4:	4903      	ldr	r1, [pc, #12]	@ (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80049ec:	e008      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049ee:	7cfb      	ldrb	r3, [r7, #19]
 80049f0:	74bb      	strb	r3, [r7, #18]
 80049f2:	e005      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80049f4:	40021000 	.word	0x40021000
 80049f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fc:	7cfb      	ldrb	r3, [r7, #19]
 80049fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a00:	7c7b      	ldrb	r3, [r7, #17]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d105      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a06:	4ba0      	ldr	r3, [pc, #640]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a0a:	4a9f      	ldr	r2, [pc, #636]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a10:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a1e:	4b9a      	ldr	r3, [pc, #616]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a24:	f023 0203 	bic.w	r2, r3, #3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2c:	4996      	ldr	r1, [pc, #600]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a40:	4b91      	ldr	r3, [pc, #580]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a46:	f023 020c 	bic.w	r2, r3, #12
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4e:	498e      	ldr	r1, [pc, #568]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0304 	and.w	r3, r3, #4
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00a      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a62:	4b89      	ldr	r3, [pc, #548]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a68:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a70:	4985      	ldr	r1, [pc, #532]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00a      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a84:	4b80      	ldr	r3, [pc, #512]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a92:	497d      	ldr	r1, [pc, #500]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0310 	and.w	r3, r3, #16
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00a      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004aa6:	4b78      	ldr	r3, [pc, #480]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ab4:	4974      	ldr	r1, [pc, #464]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00a      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ac8:	4b6f      	ldr	r3, [pc, #444]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ace:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad6:	496c      	ldr	r1, [pc, #432]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004aea:	4b67      	ldr	r3, [pc, #412]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004af8:	4963      	ldr	r1, [pc, #396]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00a      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b0c:	4b5e      	ldr	r3, [pc, #376]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b1a:	495b      	ldr	r1, [pc, #364]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b2e:	4b56      	ldr	r3, [pc, #344]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b34:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3c:	4952      	ldr	r1, [pc, #328]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00a      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b50:	4b4d      	ldr	r3, [pc, #308]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b56:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b5e:	494a      	ldr	r1, [pc, #296]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b72:	4b45      	ldr	r3, [pc, #276]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b80:	4941      	ldr	r1, [pc, #260]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00a      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b94:	4b3c      	ldr	r3, [pc, #240]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b9a:	f023 0203 	bic.w	r2, r3, #3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ba2:	4939      	ldr	r1, [pc, #228]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d028      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bb6:	4b34      	ldr	r3, [pc, #208]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bbc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bc4:	4930      	ldr	r1, [pc, #192]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bd4:	d106      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bd6:	4b2c      	ldr	r3, [pc, #176]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	4a2b      	ldr	r2, [pc, #172]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bdc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004be0:	60d3      	str	r3, [r2, #12]
 8004be2:	e011      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004be8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004bec:	d10c      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 f8f9 	bl	8004dec <RCCEx_PLLSAI1_Config>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004bfe:	7cfb      	ldrb	r3, [r7, #19]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004c04:	7cfb      	ldrb	r3, [r7, #19]
 8004c06:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d04d      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c1c:	d108      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c24:	4a18      	ldr	r2, [pc, #96]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c2a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004c2e:	e012      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004c30:	4b15      	ldr	r3, [pc, #84]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c36:	4a14      	ldr	r2, [pc, #80]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c3c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004c40:	4b11      	ldr	r3, [pc, #68]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c4e:	490e      	ldr	r1, [pc, #56]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c5e:	d106      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c60:	4b09      	ldr	r3, [pc, #36]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	4a08      	ldr	r2, [pc, #32]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c6a:	60d3      	str	r3, [r2, #12]
 8004c6c:	e020      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c76:	d109      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c78:	4b03      	ldr	r3, [pc, #12]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	4a02      	ldr	r2, [pc, #8]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c82:	60d3      	str	r3, [r2, #12]
 8004c84:	e014      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004c86:	bf00      	nop
 8004c88:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c94:	d10c      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	3304      	adds	r3, #4
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 f8a5 	bl	8004dec <RCCEx_PLLSAI1_Config>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ca6:	7cfb      	ldrb	r3, [r7, #19]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004cac:	7cfb      	ldrb	r3, [r7, #19]
 8004cae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d028      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cbc:	4b4a      	ldr	r3, [pc, #296]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cca:	4947      	ldr	r1, [pc, #284]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cda:	d106      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cdc:	4b42      	ldr	r3, [pc, #264]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	4a41      	ldr	r2, [pc, #260]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ce2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ce6:	60d3      	str	r3, [r2, #12]
 8004ce8:	e011      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cf2:	d10c      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 f876 	bl	8004dec <RCCEx_PLLSAI1_Config>
 8004d00:	4603      	mov	r3, r0
 8004d02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d04:	7cfb      	ldrb	r3, [r7, #19]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004d0a:	7cfb      	ldrb	r3, [r7, #19]
 8004d0c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d01e      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d1a:	4b33      	ldr	r3, [pc, #204]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d20:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d2a:	492f      	ldr	r1, [pc, #188]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d3c:	d10c      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3304      	adds	r3, #4
 8004d42:	2102      	movs	r1, #2
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 f851 	bl	8004dec <RCCEx_PLLSAI1_Config>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d4e:	7cfb      	ldrb	r3, [r7, #19]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004d54:	7cfb      	ldrb	r3, [r7, #19]
 8004d56:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00b      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d64:	4b20      	ldr	r3, [pc, #128]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d6a:	f023 0204 	bic.w	r2, r3, #4
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d74:	491c      	ldr	r1, [pc, #112]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00b      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d88:	4b17      	ldr	r3, [pc, #92]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d8e:	f023 0218 	bic.w	r2, r3, #24
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d98:	4913      	ldr	r1, [pc, #76]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d017      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004dac:	4b0e      	ldr	r3, [pc, #56]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004db2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dbc:	490a      	ldr	r1, [pc, #40]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dce:	d105      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dd0:	4b05      	ldr	r3, [pc, #20]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	4a04      	ldr	r2, [pc, #16]	@ (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dda:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ddc:	7cbb      	ldrb	r3, [r7, #18]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40021000 	.word	0x40021000

08004dec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dfa:	4b72      	ldr	r3, [pc, #456]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f003 0303 	and.w	r3, r3, #3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00e      	beq.n	8004e24 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e06:	4b6f      	ldr	r3, [pc, #444]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f003 0203 	and.w	r2, r3, #3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d103      	bne.n	8004e1e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
       ||
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d142      	bne.n	8004ea4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	73fb      	strb	r3, [r7, #15]
 8004e22:	e03f      	b.n	8004ea4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	d018      	beq.n	8004e5e <RCCEx_PLLSAI1_Config+0x72>
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d825      	bhi.n	8004e7c <RCCEx_PLLSAI1_Config+0x90>
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d002      	beq.n	8004e3a <RCCEx_PLLSAI1_Config+0x4e>
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d009      	beq.n	8004e4c <RCCEx_PLLSAI1_Config+0x60>
 8004e38:	e020      	b.n	8004e7c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e3a:	4b62      	ldr	r3, [pc, #392]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d11d      	bne.n	8004e82 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e4a:	e01a      	b.n	8004e82 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e4c:	4b5d      	ldr	r3, [pc, #372]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d116      	bne.n	8004e86 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e5c:	e013      	b.n	8004e86 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e5e:	4b59      	ldr	r3, [pc, #356]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10f      	bne.n	8004e8a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e6a:	4b56      	ldr	r3, [pc, #344]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d109      	bne.n	8004e8a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e7a:	e006      	b.n	8004e8a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e80:	e004      	b.n	8004e8c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004e82:	bf00      	nop
 8004e84:	e002      	b.n	8004e8c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004e86:	bf00      	nop
 8004e88:	e000      	b.n	8004e8c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004e8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d108      	bne.n	8004ea4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004e92:	4b4c      	ldr	r3, [pc, #304]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f023 0203 	bic.w	r2, r3, #3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4949      	ldr	r1, [pc, #292]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f040 8086 	bne.w	8004fb8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004eac:	4b45      	ldr	r3, [pc, #276]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a44      	ldr	r2, [pc, #272]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004eb2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004eb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eb8:	f7fd fa96 	bl	80023e8 <HAL_GetTick>
 8004ebc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ebe:	e009      	b.n	8004ed4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ec0:	f7fd fa92 	bl	80023e8 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d902      	bls.n	8004ed4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ed2:	e005      	b.n	8004ee0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1ef      	bne.n	8004ec0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d168      	bne.n	8004fb8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d113      	bne.n	8004f14 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004eec:	4b35      	ldr	r3, [pc, #212]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	4b35      	ldr	r3, [pc, #212]	@ (8004fc8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6892      	ldr	r2, [r2, #8]
 8004ef8:	0211      	lsls	r1, r2, #8
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	68d2      	ldr	r2, [r2, #12]
 8004efe:	06d2      	lsls	r2, r2, #27
 8004f00:	4311      	orrs	r1, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6852      	ldr	r2, [r2, #4]
 8004f06:	3a01      	subs	r2, #1
 8004f08:	0112      	lsls	r2, r2, #4
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	492d      	ldr	r1, [pc, #180]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	610b      	str	r3, [r1, #16]
 8004f12:	e02d      	b.n	8004f70 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d115      	bne.n	8004f46 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	4b2b      	ldr	r3, [pc, #172]	@ (8004fcc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f20:	4013      	ands	r3, r2
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6892      	ldr	r2, [r2, #8]
 8004f26:	0211      	lsls	r1, r2, #8
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	6912      	ldr	r2, [r2, #16]
 8004f2c:	0852      	lsrs	r2, r2, #1
 8004f2e:	3a01      	subs	r2, #1
 8004f30:	0552      	lsls	r2, r2, #21
 8004f32:	4311      	orrs	r1, r2
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6852      	ldr	r2, [r2, #4]
 8004f38:	3a01      	subs	r2, #1
 8004f3a:	0112      	lsls	r2, r2, #4
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	4921      	ldr	r1, [pc, #132]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	610b      	str	r3, [r1, #16]
 8004f44:	e014      	b.n	8004f70 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f46:	4b1f      	ldr	r3, [pc, #124]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	4b21      	ldr	r3, [pc, #132]	@ (8004fd0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6892      	ldr	r2, [r2, #8]
 8004f52:	0211      	lsls	r1, r2, #8
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6952      	ldr	r2, [r2, #20]
 8004f58:	0852      	lsrs	r2, r2, #1
 8004f5a:	3a01      	subs	r2, #1
 8004f5c:	0652      	lsls	r2, r2, #25
 8004f5e:	4311      	orrs	r1, r2
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6852      	ldr	r2, [r2, #4]
 8004f64:	3a01      	subs	r2, #1
 8004f66:	0112      	lsls	r2, r2, #4
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	4916      	ldr	r1, [pc, #88]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f70:	4b14      	ldr	r3, [pc, #80]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a13      	ldr	r2, [pc, #76]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f7c:	f7fd fa34 	bl	80023e8 <HAL_GetTick>
 8004f80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f82:	e009      	b.n	8004f98 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f84:	f7fd fa30 	bl	80023e8 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d902      	bls.n	8004f98 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	73fb      	strb	r3, [r7, #15]
          break;
 8004f96:	e005      	b.n	8004fa4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f98:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0ef      	beq.n	8004f84 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d106      	bne.n	8004fb8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004faa:	4b06      	ldr	r3, [pc, #24]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	4904      	ldr	r1, [pc, #16]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	07ff800f 	.word	0x07ff800f
 8004fcc:	ff9f800f 	.word	0xff9f800f
 8004fd0:	f9ff800f 	.word	0xf9ff800f

08004fd4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fe2:	4b72      	ldr	r3, [pc, #456]	@ (80051ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00e      	beq.n	800500c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fee:	4b6f      	ldr	r3, [pc, #444]	@ (80051ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f003 0203 	and.w	r2, r3, #3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d103      	bne.n	8005006 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
       ||
 8005002:	2b00      	cmp	r3, #0
 8005004:	d142      	bne.n	800508c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	73fb      	strb	r3, [r7, #15]
 800500a:	e03f      	b.n	800508c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b03      	cmp	r3, #3
 8005012:	d018      	beq.n	8005046 <RCCEx_PLLSAI2_Config+0x72>
 8005014:	2b03      	cmp	r3, #3
 8005016:	d825      	bhi.n	8005064 <RCCEx_PLLSAI2_Config+0x90>
 8005018:	2b01      	cmp	r3, #1
 800501a:	d002      	beq.n	8005022 <RCCEx_PLLSAI2_Config+0x4e>
 800501c:	2b02      	cmp	r3, #2
 800501e:	d009      	beq.n	8005034 <RCCEx_PLLSAI2_Config+0x60>
 8005020:	e020      	b.n	8005064 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005022:	4b62      	ldr	r3, [pc, #392]	@ (80051ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d11d      	bne.n	800506a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005032:	e01a      	b.n	800506a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005034:	4b5d      	ldr	r3, [pc, #372]	@ (80051ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800503c:	2b00      	cmp	r3, #0
 800503e:	d116      	bne.n	800506e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005044:	e013      	b.n	800506e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005046:	4b59      	ldr	r3, [pc, #356]	@ (80051ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10f      	bne.n	8005072 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005052:	4b56      	ldr	r3, [pc, #344]	@ (80051ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d109      	bne.n	8005072 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005062:	e006      	b.n	8005072 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	73fb      	strb	r3, [r7, #15]
      break;
 8005068:	e004      	b.n	8005074 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800506a:	bf00      	nop
 800506c:	e002      	b.n	8005074 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800506e:	bf00      	nop
 8005070:	e000      	b.n	8005074 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005072:	bf00      	nop
    }

    if(status == HAL_OK)
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d108      	bne.n	800508c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800507a:	4b4c      	ldr	r3, [pc, #304]	@ (80051ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f023 0203 	bic.w	r2, r3, #3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4949      	ldr	r1, [pc, #292]	@ (80051ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005088:	4313      	orrs	r3, r2
 800508a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800508c:	7bfb      	ldrb	r3, [r7, #15]
 800508e:	2b00      	cmp	r3, #0
 8005090:	f040 8086 	bne.w	80051a0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005094:	4b45      	ldr	r3, [pc, #276]	@ (80051ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a44      	ldr	r2, [pc, #272]	@ (80051ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800509a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800509e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a0:	f7fd f9a2 	bl	80023e8 <HAL_GetTick>
 80050a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050a6:	e009      	b.n	80050bc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050a8:	f7fd f99e 	bl	80023e8 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d902      	bls.n	80050bc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	73fb      	strb	r3, [r7, #15]
        break;
 80050ba:	e005      	b.n	80050c8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050bc:	4b3b      	ldr	r3, [pc, #236]	@ (80051ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1ef      	bne.n	80050a8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d168      	bne.n	80051a0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d113      	bne.n	80050fc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050d4:	4b35      	ldr	r3, [pc, #212]	@ (80051ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80050d6:	695a      	ldr	r2, [r3, #20]
 80050d8:	4b35      	ldr	r3, [pc, #212]	@ (80051b0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80050da:	4013      	ands	r3, r2
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6892      	ldr	r2, [r2, #8]
 80050e0:	0211      	lsls	r1, r2, #8
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	68d2      	ldr	r2, [r2, #12]
 80050e6:	06d2      	lsls	r2, r2, #27
 80050e8:	4311      	orrs	r1, r2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6852      	ldr	r2, [r2, #4]
 80050ee:	3a01      	subs	r2, #1
 80050f0:	0112      	lsls	r2, r2, #4
 80050f2:	430a      	orrs	r2, r1
 80050f4:	492d      	ldr	r1, [pc, #180]	@ (80051ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	614b      	str	r3, [r1, #20]
 80050fa:	e02d      	b.n	8005158 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d115      	bne.n	800512e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005102:	4b2a      	ldr	r3, [pc, #168]	@ (80051ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005104:	695a      	ldr	r2, [r3, #20]
 8005106:	4b2b      	ldr	r3, [pc, #172]	@ (80051b4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005108:	4013      	ands	r3, r2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6892      	ldr	r2, [r2, #8]
 800510e:	0211      	lsls	r1, r2, #8
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6912      	ldr	r2, [r2, #16]
 8005114:	0852      	lsrs	r2, r2, #1
 8005116:	3a01      	subs	r2, #1
 8005118:	0552      	lsls	r2, r2, #21
 800511a:	4311      	orrs	r1, r2
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6852      	ldr	r2, [r2, #4]
 8005120:	3a01      	subs	r2, #1
 8005122:	0112      	lsls	r2, r2, #4
 8005124:	430a      	orrs	r2, r1
 8005126:	4921      	ldr	r1, [pc, #132]	@ (80051ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005128:	4313      	orrs	r3, r2
 800512a:	614b      	str	r3, [r1, #20]
 800512c:	e014      	b.n	8005158 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800512e:	4b1f      	ldr	r3, [pc, #124]	@ (80051ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005130:	695a      	ldr	r2, [r3, #20]
 8005132:	4b21      	ldr	r3, [pc, #132]	@ (80051b8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005134:	4013      	ands	r3, r2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6892      	ldr	r2, [r2, #8]
 800513a:	0211      	lsls	r1, r2, #8
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6952      	ldr	r2, [r2, #20]
 8005140:	0852      	lsrs	r2, r2, #1
 8005142:	3a01      	subs	r2, #1
 8005144:	0652      	lsls	r2, r2, #25
 8005146:	4311      	orrs	r1, r2
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6852      	ldr	r2, [r2, #4]
 800514c:	3a01      	subs	r2, #1
 800514e:	0112      	lsls	r2, r2, #4
 8005150:	430a      	orrs	r2, r1
 8005152:	4916      	ldr	r1, [pc, #88]	@ (80051ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005154:	4313      	orrs	r3, r2
 8005156:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005158:	4b14      	ldr	r3, [pc, #80]	@ (80051ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a13      	ldr	r2, [pc, #76]	@ (80051ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800515e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005162:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005164:	f7fd f940 	bl	80023e8 <HAL_GetTick>
 8005168:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800516a:	e009      	b.n	8005180 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800516c:	f7fd f93c 	bl	80023e8 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d902      	bls.n	8005180 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	73fb      	strb	r3, [r7, #15]
          break;
 800517e:	e005      	b.n	800518c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005180:	4b0a      	ldr	r3, [pc, #40]	@ (80051ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d0ef      	beq.n	800516c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005192:	4b06      	ldr	r3, [pc, #24]	@ (80051ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8005194:	695a      	ldr	r2, [r3, #20]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	4904      	ldr	r1, [pc, #16]	@ (80051ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800519c:	4313      	orrs	r3, r2
 800519e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40021000 	.word	0x40021000
 80051b0:	07ff800f 	.word	0x07ff800f
 80051b4:	ff9f800f 	.word	0xff9f800f
 80051b8:	f9ff800f 	.word	0xf9ff800f

080051bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d101      	bne.n	80051ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e049      	b.n	8005262 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d106      	bne.n	80051e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f841 	bl	800526a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3304      	adds	r3, #4
 80051f8:	4619      	mov	r1, r3
 80051fa:	4610      	mov	r0, r2
 80051fc:	f000 f9da 	bl	80055b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
	...

08005280 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b01      	cmp	r3, #1
 8005292:	d001      	beq.n	8005298 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e04f      	b.n	8005338 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a23      	ldr	r2, [pc, #140]	@ (8005344 <HAL_TIM_Base_Start_IT+0xc4>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d01d      	beq.n	80052f6 <HAL_TIM_Base_Start_IT+0x76>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c2:	d018      	beq.n	80052f6 <HAL_TIM_Base_Start_IT+0x76>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a1f      	ldr	r2, [pc, #124]	@ (8005348 <HAL_TIM_Base_Start_IT+0xc8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d013      	beq.n	80052f6 <HAL_TIM_Base_Start_IT+0x76>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a1e      	ldr	r2, [pc, #120]	@ (800534c <HAL_TIM_Base_Start_IT+0xcc>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00e      	beq.n	80052f6 <HAL_TIM_Base_Start_IT+0x76>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a1c      	ldr	r2, [pc, #112]	@ (8005350 <HAL_TIM_Base_Start_IT+0xd0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d009      	beq.n	80052f6 <HAL_TIM_Base_Start_IT+0x76>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005354 <HAL_TIM_Base_Start_IT+0xd4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d004      	beq.n	80052f6 <HAL_TIM_Base_Start_IT+0x76>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a19      	ldr	r2, [pc, #100]	@ (8005358 <HAL_TIM_Base_Start_IT+0xd8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d115      	bne.n	8005322 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	4b17      	ldr	r3, [pc, #92]	@ (800535c <HAL_TIM_Base_Start_IT+0xdc>)
 80052fe:	4013      	ands	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b06      	cmp	r3, #6
 8005306:	d015      	beq.n	8005334 <HAL_TIM_Base_Start_IT+0xb4>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800530e:	d011      	beq.n	8005334 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0201 	orr.w	r2, r2, #1
 800531e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005320:	e008      	b.n	8005334 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f042 0201 	orr.w	r2, r2, #1
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	e000      	b.n	8005336 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005334:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	40012c00 	.word	0x40012c00
 8005348:	40000400 	.word	0x40000400
 800534c:	40000800 	.word	0x40000800
 8005350:	40000c00 	.word	0x40000c00
 8005354:	40013400 	.word	0x40013400
 8005358:	40014000 	.word	0x40014000
 800535c:	00010007 	.word	0x00010007

08005360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d020      	beq.n	80053c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01b      	beq.n	80053c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0202 	mvn.w	r2, #2
 8005394:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f8e4 	bl	8005578 <HAL_TIM_IC_CaptureCallback>
 80053b0:	e005      	b.n	80053be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f8d6 	bl	8005564 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f8e7 	bl	800558c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d020      	beq.n	8005410 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d01b      	beq.n	8005410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0204 	mvn.w	r2, #4
 80053e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2202      	movs	r2, #2
 80053e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f8be 	bl	8005578 <HAL_TIM_IC_CaptureCallback>
 80053fc:	e005      	b.n	800540a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f8b0 	bl	8005564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f8c1 	bl	800558c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b00      	cmp	r3, #0
 8005418:	d020      	beq.n	800545c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f003 0308 	and.w	r3, r3, #8
 8005420:	2b00      	cmp	r3, #0
 8005422:	d01b      	beq.n	800545c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f06f 0208 	mvn.w	r2, #8
 800542c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2204      	movs	r2, #4
 8005432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f898 	bl	8005578 <HAL_TIM_IC_CaptureCallback>
 8005448:	e005      	b.n	8005456 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f88a 	bl	8005564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f89b 	bl	800558c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f003 0310 	and.w	r3, r3, #16
 8005462:	2b00      	cmp	r3, #0
 8005464:	d020      	beq.n	80054a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01b      	beq.n	80054a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f06f 0210 	mvn.w	r2, #16
 8005478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2208      	movs	r2, #8
 800547e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f872 	bl	8005578 <HAL_TIM_IC_CaptureCallback>
 8005494:	e005      	b.n	80054a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f864 	bl	8005564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f875 	bl	800558c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f003 0301 	and.w	r3, r3, #1
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00c      	beq.n	80054cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d007      	beq.n	80054cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0201 	mvn.w	r2, #1
 80054c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fb fc88 	bl	8000ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00c      	beq.n	80054f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d007      	beq.n	80054f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80054e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f906 	bl	80056fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00c      	beq.n	8005514 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005500:	2b00      	cmp	r3, #0
 8005502:	d007      	beq.n	8005514 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800550c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f8fe 	bl	8005710 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00c      	beq.n	8005538 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d007      	beq.n	8005538 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f834 	bl	80055a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f003 0320 	and.w	r3, r3, #32
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00c      	beq.n	800555c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f003 0320 	and.w	r3, r3, #32
 8005548:	2b00      	cmp	r3, #0
 800554a:	d007      	beq.n	800555c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0220 	mvn.w	r2, #32
 8005554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f8c6 	bl	80056e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800555c:	bf00      	nop
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a40      	ldr	r2, [pc, #256]	@ (80056c8 <TIM_Base_SetConfig+0x114>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d013      	beq.n	80055f4 <TIM_Base_SetConfig+0x40>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055d2:	d00f      	beq.n	80055f4 <TIM_Base_SetConfig+0x40>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a3d      	ldr	r2, [pc, #244]	@ (80056cc <TIM_Base_SetConfig+0x118>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00b      	beq.n	80055f4 <TIM_Base_SetConfig+0x40>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a3c      	ldr	r2, [pc, #240]	@ (80056d0 <TIM_Base_SetConfig+0x11c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d007      	beq.n	80055f4 <TIM_Base_SetConfig+0x40>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a3b      	ldr	r2, [pc, #236]	@ (80056d4 <TIM_Base_SetConfig+0x120>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d003      	beq.n	80055f4 <TIM_Base_SetConfig+0x40>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a3a      	ldr	r2, [pc, #232]	@ (80056d8 <TIM_Base_SetConfig+0x124>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d108      	bne.n	8005606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4313      	orrs	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a2f      	ldr	r2, [pc, #188]	@ (80056c8 <TIM_Base_SetConfig+0x114>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d01f      	beq.n	800564e <TIM_Base_SetConfig+0x9a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005614:	d01b      	beq.n	800564e <TIM_Base_SetConfig+0x9a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a2c      	ldr	r2, [pc, #176]	@ (80056cc <TIM_Base_SetConfig+0x118>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d017      	beq.n	800564e <TIM_Base_SetConfig+0x9a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a2b      	ldr	r2, [pc, #172]	@ (80056d0 <TIM_Base_SetConfig+0x11c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d013      	beq.n	800564e <TIM_Base_SetConfig+0x9a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a2a      	ldr	r2, [pc, #168]	@ (80056d4 <TIM_Base_SetConfig+0x120>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00f      	beq.n	800564e <TIM_Base_SetConfig+0x9a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a29      	ldr	r2, [pc, #164]	@ (80056d8 <TIM_Base_SetConfig+0x124>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00b      	beq.n	800564e <TIM_Base_SetConfig+0x9a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a28      	ldr	r2, [pc, #160]	@ (80056dc <TIM_Base_SetConfig+0x128>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d007      	beq.n	800564e <TIM_Base_SetConfig+0x9a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a27      	ldr	r2, [pc, #156]	@ (80056e0 <TIM_Base_SetConfig+0x12c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d003      	beq.n	800564e <TIM_Base_SetConfig+0x9a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a26      	ldr	r2, [pc, #152]	@ (80056e4 <TIM_Base_SetConfig+0x130>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d108      	bne.n	8005660 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a10      	ldr	r2, [pc, #64]	@ (80056c8 <TIM_Base_SetConfig+0x114>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00f      	beq.n	80056ac <TIM_Base_SetConfig+0xf8>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a12      	ldr	r2, [pc, #72]	@ (80056d8 <TIM_Base_SetConfig+0x124>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00b      	beq.n	80056ac <TIM_Base_SetConfig+0xf8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a11      	ldr	r2, [pc, #68]	@ (80056dc <TIM_Base_SetConfig+0x128>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d007      	beq.n	80056ac <TIM_Base_SetConfig+0xf8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a10      	ldr	r2, [pc, #64]	@ (80056e0 <TIM_Base_SetConfig+0x12c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d003      	beq.n	80056ac <TIM_Base_SetConfig+0xf8>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a0f      	ldr	r2, [pc, #60]	@ (80056e4 <TIM_Base_SetConfig+0x130>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d103      	bne.n	80056b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	691a      	ldr	r2, [r3, #16]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	615a      	str	r2, [r3, #20]
}
 80056ba:	bf00      	nop
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40012c00 	.word	0x40012c00
 80056cc:	40000400 	.word	0x40000400
 80056d0:	40000800 	.word	0x40000800
 80056d4:	40000c00 	.word	0x40000c00
 80056d8:	40013400 	.word	0x40013400
 80056dc:	40014000 	.word	0x40014000
 80056e0:	40014400 	.word	0x40014400
 80056e4:	40014800 	.word	0x40014800

080056e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e042      	b.n	80057bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800573c:	2b00      	cmp	r3, #0
 800573e:	d106      	bne.n	800574e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7fb fc09 	bl	8000f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2224      	movs	r2, #36	@ 0x24
 8005752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0201 	bic.w	r2, r2, #1
 8005764:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fbb2 	bl	8005ed8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f8b3 	bl	80058e0 <UART_SetConfig>
 800577a:	4603      	mov	r3, r0
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e01b      	b.n	80057bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0201 	orr.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fc31 	bl	800601c <UART_CheckIdleState>
 80057ba:	4603      	mov	r3, r0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08a      	sub	sp, #40	@ 0x28
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	4613      	mov	r3, r2
 80057d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057da:	2b20      	cmp	r3, #32
 80057dc:	d17b      	bne.n	80058d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <HAL_UART_Transmit+0x26>
 80057e4:	88fb      	ldrh	r3, [r7, #6]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e074      	b.n	80058d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2221      	movs	r2, #33	@ 0x21
 80057fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057fe:	f7fc fdf3 	bl	80023e8 <HAL_GetTick>
 8005802:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	88fa      	ldrh	r2, [r7, #6]
 8005808:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	88fa      	ldrh	r2, [r7, #6]
 8005810:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800581c:	d108      	bne.n	8005830 <HAL_UART_Transmit+0x6c>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d104      	bne.n	8005830 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005826:	2300      	movs	r3, #0
 8005828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	61bb      	str	r3, [r7, #24]
 800582e:	e003      	b.n	8005838 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005834:	2300      	movs	r3, #0
 8005836:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005838:	e030      	b.n	800589c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2200      	movs	r2, #0
 8005842:	2180      	movs	r1, #128	@ 0x80
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 fc93 	bl	8006170 <UART_WaitOnFlagUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d005      	beq.n	800585c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2220      	movs	r2, #32
 8005854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e03d      	b.n	80058d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10b      	bne.n	800587a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	881a      	ldrh	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800586e:	b292      	uxth	r2, r2
 8005870:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	3302      	adds	r3, #2
 8005876:	61bb      	str	r3, [r7, #24]
 8005878:	e007      	b.n	800588a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	781a      	ldrb	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	3301      	adds	r3, #1
 8005888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005890:	b29b      	uxth	r3, r3
 8005892:	3b01      	subs	r3, #1
 8005894:	b29a      	uxth	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1c8      	bne.n	800583a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2200      	movs	r2, #0
 80058b0:	2140      	movs	r1, #64	@ 0x40
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 fc5c 	bl	8006170 <UART_WaitOnFlagUntilTimeout>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d005      	beq.n	80058ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e006      	b.n	80058d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	e000      	b.n	80058d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80058d6:	2302      	movs	r3, #2
  }
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3720      	adds	r7, #32
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058e4:	b08c      	sub	sp, #48	@ 0x30
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	431a      	orrs	r2, r3
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	431a      	orrs	r2, r3
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	69db      	ldr	r3, [r3, #28]
 8005904:	4313      	orrs	r3, r2
 8005906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	4baa      	ldr	r3, [pc, #680]	@ (8005bb8 <UART_SetConfig+0x2d8>)
 8005910:	4013      	ands	r3, r2
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	6812      	ldr	r2, [r2, #0]
 8005916:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005918:	430b      	orrs	r3, r1
 800591a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	68da      	ldr	r2, [r3, #12]
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	430a      	orrs	r2, r1
 8005930:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a9f      	ldr	r2, [pc, #636]	@ (8005bbc <UART_SetConfig+0x2dc>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d004      	beq.n	800594c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005948:	4313      	orrs	r3, r2
 800594a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005956:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	6812      	ldr	r2, [r2, #0]
 800595e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005960:	430b      	orrs	r3, r1
 8005962:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596a:	f023 010f 	bic.w	r1, r3, #15
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a90      	ldr	r2, [pc, #576]	@ (8005bc0 <UART_SetConfig+0x2e0>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d125      	bne.n	80059d0 <UART_SetConfig+0xf0>
 8005984:	4b8f      	ldr	r3, [pc, #572]	@ (8005bc4 <UART_SetConfig+0x2e4>)
 8005986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	2b03      	cmp	r3, #3
 8005990:	d81a      	bhi.n	80059c8 <UART_SetConfig+0xe8>
 8005992:	a201      	add	r2, pc, #4	@ (adr r2, 8005998 <UART_SetConfig+0xb8>)
 8005994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005998:	080059a9 	.word	0x080059a9
 800599c:	080059b9 	.word	0x080059b9
 80059a0:	080059b1 	.word	0x080059b1
 80059a4:	080059c1 	.word	0x080059c1
 80059a8:	2301      	movs	r3, #1
 80059aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ae:	e116      	b.n	8005bde <UART_SetConfig+0x2fe>
 80059b0:	2302      	movs	r3, #2
 80059b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059b6:	e112      	b.n	8005bde <UART_SetConfig+0x2fe>
 80059b8:	2304      	movs	r3, #4
 80059ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059be:	e10e      	b.n	8005bde <UART_SetConfig+0x2fe>
 80059c0:	2308      	movs	r3, #8
 80059c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059c6:	e10a      	b.n	8005bde <UART_SetConfig+0x2fe>
 80059c8:	2310      	movs	r3, #16
 80059ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ce:	e106      	b.n	8005bde <UART_SetConfig+0x2fe>
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a7c      	ldr	r2, [pc, #496]	@ (8005bc8 <UART_SetConfig+0x2e8>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d138      	bne.n	8005a4c <UART_SetConfig+0x16c>
 80059da:	4b7a      	ldr	r3, [pc, #488]	@ (8005bc4 <UART_SetConfig+0x2e4>)
 80059dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e0:	f003 030c 	and.w	r3, r3, #12
 80059e4:	2b0c      	cmp	r3, #12
 80059e6:	d82d      	bhi.n	8005a44 <UART_SetConfig+0x164>
 80059e8:	a201      	add	r2, pc, #4	@ (adr r2, 80059f0 <UART_SetConfig+0x110>)
 80059ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ee:	bf00      	nop
 80059f0:	08005a25 	.word	0x08005a25
 80059f4:	08005a45 	.word	0x08005a45
 80059f8:	08005a45 	.word	0x08005a45
 80059fc:	08005a45 	.word	0x08005a45
 8005a00:	08005a35 	.word	0x08005a35
 8005a04:	08005a45 	.word	0x08005a45
 8005a08:	08005a45 	.word	0x08005a45
 8005a0c:	08005a45 	.word	0x08005a45
 8005a10:	08005a2d 	.word	0x08005a2d
 8005a14:	08005a45 	.word	0x08005a45
 8005a18:	08005a45 	.word	0x08005a45
 8005a1c:	08005a45 	.word	0x08005a45
 8005a20:	08005a3d 	.word	0x08005a3d
 8005a24:	2300      	movs	r3, #0
 8005a26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a2a:	e0d8      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a32:	e0d4      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005a34:	2304      	movs	r3, #4
 8005a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a3a:	e0d0      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005a3c:	2308      	movs	r3, #8
 8005a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a42:	e0cc      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005a44:	2310      	movs	r3, #16
 8005a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a4a:	e0c8      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a5e      	ldr	r2, [pc, #376]	@ (8005bcc <UART_SetConfig+0x2ec>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d125      	bne.n	8005aa2 <UART_SetConfig+0x1c2>
 8005a56:	4b5b      	ldr	r3, [pc, #364]	@ (8005bc4 <UART_SetConfig+0x2e4>)
 8005a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a5c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a60:	2b30      	cmp	r3, #48	@ 0x30
 8005a62:	d016      	beq.n	8005a92 <UART_SetConfig+0x1b2>
 8005a64:	2b30      	cmp	r3, #48	@ 0x30
 8005a66:	d818      	bhi.n	8005a9a <UART_SetConfig+0x1ba>
 8005a68:	2b20      	cmp	r3, #32
 8005a6a:	d00a      	beq.n	8005a82 <UART_SetConfig+0x1a2>
 8005a6c:	2b20      	cmp	r3, #32
 8005a6e:	d814      	bhi.n	8005a9a <UART_SetConfig+0x1ba>
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <UART_SetConfig+0x19a>
 8005a74:	2b10      	cmp	r3, #16
 8005a76:	d008      	beq.n	8005a8a <UART_SetConfig+0x1aa>
 8005a78:	e00f      	b.n	8005a9a <UART_SetConfig+0x1ba>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a80:	e0ad      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005a82:	2302      	movs	r3, #2
 8005a84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a88:	e0a9      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005a8a:	2304      	movs	r3, #4
 8005a8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a90:	e0a5      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005a92:	2308      	movs	r3, #8
 8005a94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a98:	e0a1      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005a9a:	2310      	movs	r3, #16
 8005a9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aa0:	e09d      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a4a      	ldr	r2, [pc, #296]	@ (8005bd0 <UART_SetConfig+0x2f0>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d125      	bne.n	8005af8 <UART_SetConfig+0x218>
 8005aac:	4b45      	ldr	r3, [pc, #276]	@ (8005bc4 <UART_SetConfig+0x2e4>)
 8005aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005ab6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ab8:	d016      	beq.n	8005ae8 <UART_SetConfig+0x208>
 8005aba:	2bc0      	cmp	r3, #192	@ 0xc0
 8005abc:	d818      	bhi.n	8005af0 <UART_SetConfig+0x210>
 8005abe:	2b80      	cmp	r3, #128	@ 0x80
 8005ac0:	d00a      	beq.n	8005ad8 <UART_SetConfig+0x1f8>
 8005ac2:	2b80      	cmp	r3, #128	@ 0x80
 8005ac4:	d814      	bhi.n	8005af0 <UART_SetConfig+0x210>
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <UART_SetConfig+0x1f0>
 8005aca:	2b40      	cmp	r3, #64	@ 0x40
 8005acc:	d008      	beq.n	8005ae0 <UART_SetConfig+0x200>
 8005ace:	e00f      	b.n	8005af0 <UART_SetConfig+0x210>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ad6:	e082      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ade:	e07e      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005ae0:	2304      	movs	r3, #4
 8005ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ae6:	e07a      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005ae8:	2308      	movs	r3, #8
 8005aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aee:	e076      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005af0:	2310      	movs	r3, #16
 8005af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005af6:	e072      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a35      	ldr	r2, [pc, #212]	@ (8005bd4 <UART_SetConfig+0x2f4>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d12a      	bne.n	8005b58 <UART_SetConfig+0x278>
 8005b02:	4b30      	ldr	r3, [pc, #192]	@ (8005bc4 <UART_SetConfig+0x2e4>)
 8005b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b10:	d01a      	beq.n	8005b48 <UART_SetConfig+0x268>
 8005b12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b16:	d81b      	bhi.n	8005b50 <UART_SetConfig+0x270>
 8005b18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b1c:	d00c      	beq.n	8005b38 <UART_SetConfig+0x258>
 8005b1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b22:	d815      	bhi.n	8005b50 <UART_SetConfig+0x270>
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <UART_SetConfig+0x250>
 8005b28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b2c:	d008      	beq.n	8005b40 <UART_SetConfig+0x260>
 8005b2e:	e00f      	b.n	8005b50 <UART_SetConfig+0x270>
 8005b30:	2300      	movs	r3, #0
 8005b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b36:	e052      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b3e:	e04e      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005b40:	2304      	movs	r3, #4
 8005b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b46:	e04a      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005b48:	2308      	movs	r3, #8
 8005b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b4e:	e046      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005b50:	2310      	movs	r3, #16
 8005b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b56:	e042      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a17      	ldr	r2, [pc, #92]	@ (8005bbc <UART_SetConfig+0x2dc>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d13a      	bne.n	8005bd8 <UART_SetConfig+0x2f8>
 8005b62:	4b18      	ldr	r3, [pc, #96]	@ (8005bc4 <UART_SetConfig+0x2e4>)
 8005b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b70:	d01a      	beq.n	8005ba8 <UART_SetConfig+0x2c8>
 8005b72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b76:	d81b      	bhi.n	8005bb0 <UART_SetConfig+0x2d0>
 8005b78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b7c:	d00c      	beq.n	8005b98 <UART_SetConfig+0x2b8>
 8005b7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b82:	d815      	bhi.n	8005bb0 <UART_SetConfig+0x2d0>
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <UART_SetConfig+0x2b0>
 8005b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b8c:	d008      	beq.n	8005ba0 <UART_SetConfig+0x2c0>
 8005b8e:	e00f      	b.n	8005bb0 <UART_SetConfig+0x2d0>
 8005b90:	2300      	movs	r3, #0
 8005b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b96:	e022      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005b98:	2302      	movs	r3, #2
 8005b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b9e:	e01e      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005ba0:	2304      	movs	r3, #4
 8005ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ba6:	e01a      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005ba8:	2308      	movs	r3, #8
 8005baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bae:	e016      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005bb0:	2310      	movs	r3, #16
 8005bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bb6:	e012      	b.n	8005bde <UART_SetConfig+0x2fe>
 8005bb8:	cfff69f3 	.word	0xcfff69f3
 8005bbc:	40008000 	.word	0x40008000
 8005bc0:	40013800 	.word	0x40013800
 8005bc4:	40021000 	.word	0x40021000
 8005bc8:	40004400 	.word	0x40004400
 8005bcc:	40004800 	.word	0x40004800
 8005bd0:	40004c00 	.word	0x40004c00
 8005bd4:	40005000 	.word	0x40005000
 8005bd8:	2310      	movs	r3, #16
 8005bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4aae      	ldr	r2, [pc, #696]	@ (8005e9c <UART_SetConfig+0x5bc>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	f040 8097 	bne.w	8005d18 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005bee:	2b08      	cmp	r3, #8
 8005bf0:	d823      	bhi.n	8005c3a <UART_SetConfig+0x35a>
 8005bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf8 <UART_SetConfig+0x318>)
 8005bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf8:	08005c1d 	.word	0x08005c1d
 8005bfc:	08005c3b 	.word	0x08005c3b
 8005c00:	08005c25 	.word	0x08005c25
 8005c04:	08005c3b 	.word	0x08005c3b
 8005c08:	08005c2b 	.word	0x08005c2b
 8005c0c:	08005c3b 	.word	0x08005c3b
 8005c10:	08005c3b 	.word	0x08005c3b
 8005c14:	08005c3b 	.word	0x08005c3b
 8005c18:	08005c33 	.word	0x08005c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c1c:	f7fe fc98 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 8005c20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c22:	e010      	b.n	8005c46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c24:	4b9e      	ldr	r3, [pc, #632]	@ (8005ea0 <UART_SetConfig+0x5c0>)
 8005c26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c28:	e00d      	b.n	8005c46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c2a:	f7fe fbf9 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 8005c2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005c30:	e009      	b.n	8005c46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005c38:	e005      	b.n	8005c46 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005c44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 8130 	beq.w	8005eae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c52:	4a94      	ldr	r2, [pc, #592]	@ (8005ea4 <UART_SetConfig+0x5c4>)
 8005c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c60:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	4613      	mov	r3, r2
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	4413      	add	r3, r2
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d305      	bcc.n	8005c7e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d903      	bls.n	8005c86 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c84:	e113      	b.n	8005eae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c88:	2200      	movs	r2, #0
 8005c8a:	60bb      	str	r3, [r7, #8]
 8005c8c:	60fa      	str	r2, [r7, #12]
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c92:	4a84      	ldr	r2, [pc, #528]	@ (8005ea4 <UART_SetConfig+0x5c4>)
 8005c94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	603b      	str	r3, [r7, #0]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ca4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ca8:	f7fa fafa 	bl	80002a0 <__aeabi_uldivmod>
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	f04f 0300 	mov.w	r3, #0
 8005cbc:	020b      	lsls	r3, r1, #8
 8005cbe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005cc2:	0202      	lsls	r2, r0, #8
 8005cc4:	6979      	ldr	r1, [r7, #20]
 8005cc6:	6849      	ldr	r1, [r1, #4]
 8005cc8:	0849      	lsrs	r1, r1, #1
 8005cca:	2000      	movs	r0, #0
 8005ccc:	460c      	mov	r4, r1
 8005cce:	4605      	mov	r5, r0
 8005cd0:	eb12 0804 	adds.w	r8, r2, r4
 8005cd4:	eb43 0905 	adc.w	r9, r3, r5
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	469a      	mov	sl, r3
 8005ce0:	4693      	mov	fp, r2
 8005ce2:	4652      	mov	r2, sl
 8005ce4:	465b      	mov	r3, fp
 8005ce6:	4640      	mov	r0, r8
 8005ce8:	4649      	mov	r1, r9
 8005cea:	f7fa fad9 	bl	80002a0 <__aeabi_uldivmod>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cfc:	d308      	bcc.n	8005d10 <UART_SetConfig+0x430>
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d04:	d204      	bcs.n	8005d10 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6a3a      	ldr	r2, [r7, #32]
 8005d0c:	60da      	str	r2, [r3, #12]
 8005d0e:	e0ce      	b.n	8005eae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005d16:	e0ca      	b.n	8005eae <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d20:	d166      	bne.n	8005df0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005d22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d26:	2b08      	cmp	r3, #8
 8005d28:	d827      	bhi.n	8005d7a <UART_SetConfig+0x49a>
 8005d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d30 <UART_SetConfig+0x450>)
 8005d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d30:	08005d55 	.word	0x08005d55
 8005d34:	08005d5d 	.word	0x08005d5d
 8005d38:	08005d65 	.word	0x08005d65
 8005d3c:	08005d7b 	.word	0x08005d7b
 8005d40:	08005d6b 	.word	0x08005d6b
 8005d44:	08005d7b 	.word	0x08005d7b
 8005d48:	08005d7b 	.word	0x08005d7b
 8005d4c:	08005d7b 	.word	0x08005d7b
 8005d50:	08005d73 	.word	0x08005d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d54:	f7fe fbfc 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 8005d58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d5a:	e014      	b.n	8005d86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d5c:	f7fe fc0e 	bl	800457c <HAL_RCC_GetPCLK2Freq>
 8005d60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d62:	e010      	b.n	8005d86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d64:	4b4e      	ldr	r3, [pc, #312]	@ (8005ea0 <UART_SetConfig+0x5c0>)
 8005d66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d68:	e00d      	b.n	8005d86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d6a:	f7fe fb59 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 8005d6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d70:	e009      	b.n	8005d86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d78:	e005      	b.n	8005d86 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005d84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 8090 	beq.w	8005eae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d92:	4a44      	ldr	r2, [pc, #272]	@ (8005ea4 <UART_SetConfig+0x5c4>)
 8005d94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005da0:	005a      	lsls	r2, r3, #1
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	085b      	lsrs	r3, r3, #1
 8005da8:	441a      	add	r2, r3
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	2b0f      	cmp	r3, #15
 8005db8:	d916      	bls.n	8005de8 <UART_SetConfig+0x508>
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dc0:	d212      	bcs.n	8005de8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	f023 030f 	bic.w	r3, r3, #15
 8005dca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	085b      	lsrs	r3, r3, #1
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	f003 0307 	and.w	r3, r3, #7
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	8bfb      	ldrh	r3, [r7, #30]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	8bfa      	ldrh	r2, [r7, #30]
 8005de4:	60da      	str	r2, [r3, #12]
 8005de6:	e062      	b.n	8005eae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005dee:	e05e      	b.n	8005eae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005df0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005df4:	2b08      	cmp	r3, #8
 8005df6:	d828      	bhi.n	8005e4a <UART_SetConfig+0x56a>
 8005df8:	a201      	add	r2, pc, #4	@ (adr r2, 8005e00 <UART_SetConfig+0x520>)
 8005dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfe:	bf00      	nop
 8005e00:	08005e25 	.word	0x08005e25
 8005e04:	08005e2d 	.word	0x08005e2d
 8005e08:	08005e35 	.word	0x08005e35
 8005e0c:	08005e4b 	.word	0x08005e4b
 8005e10:	08005e3b 	.word	0x08005e3b
 8005e14:	08005e4b 	.word	0x08005e4b
 8005e18:	08005e4b 	.word	0x08005e4b
 8005e1c:	08005e4b 	.word	0x08005e4b
 8005e20:	08005e43 	.word	0x08005e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e24:	f7fe fb94 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 8005e28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e2a:	e014      	b.n	8005e56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e2c:	f7fe fba6 	bl	800457c <HAL_RCC_GetPCLK2Freq>
 8005e30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e32:	e010      	b.n	8005e56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e34:	4b1a      	ldr	r3, [pc, #104]	@ (8005ea0 <UART_SetConfig+0x5c0>)
 8005e36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e38:	e00d      	b.n	8005e56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e3a:	f7fe faf1 	bl	8004420 <HAL_RCC_GetSysClockFreq>
 8005e3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e40:	e009      	b.n	8005e56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e48:	e005      	b.n	8005e56 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005e54:	bf00      	nop
    }

    if (pclk != 0U)
 8005e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d028      	beq.n	8005eae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e60:	4a10      	ldr	r2, [pc, #64]	@ (8005ea4 <UART_SetConfig+0x5c4>)
 8005e62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e66:	461a      	mov	r2, r3
 8005e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	085b      	lsrs	r3, r3, #1
 8005e74:	441a      	add	r2, r3
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	2b0f      	cmp	r3, #15
 8005e84:	d910      	bls.n	8005ea8 <UART_SetConfig+0x5c8>
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e8c:	d20c      	bcs.n	8005ea8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60da      	str	r2, [r3, #12]
 8005e98:	e009      	b.n	8005eae <UART_SetConfig+0x5ce>
 8005e9a:	bf00      	nop
 8005e9c:	40008000 	.word	0x40008000
 8005ea0:	00f42400 	.word	0x00f42400
 8005ea4:	08008e10 	.word	0x08008e10
      }
      else
      {
        ret = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005eca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3730      	adds	r7, #48	@ 0x30
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005ed8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee4:	f003 0308 	and.w	r3, r3, #8
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00a      	beq.n	8005f02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00a      	beq.n	8005f24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00a      	beq.n	8005f46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00a      	beq.n	8005f8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00a      	beq.n	8005fac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d01a      	beq.n	8005fee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fd6:	d10a      	bne.n	8005fee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	605a      	str	r2, [r3, #4]
  }
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b098      	sub	sp, #96	@ 0x60
 8006020:	af02      	add	r7, sp, #8
 8006022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800602c:	f7fc f9dc 	bl	80023e8 <HAL_GetTick>
 8006030:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0308 	and.w	r3, r3, #8
 800603c:	2b08      	cmp	r3, #8
 800603e:	d12f      	bne.n	80060a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006040:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006048:	2200      	movs	r2, #0
 800604a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f88e 	bl	8006170 <UART_WaitOnFlagUntilTimeout>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d022      	beq.n	80060a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006062:	e853 3f00 	ldrex	r3, [r3]
 8006066:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800606a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800606e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	461a      	mov	r2, r3
 8006076:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006078:	647b      	str	r3, [r7, #68]	@ 0x44
 800607a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800607e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006080:	e841 2300 	strex	r3, r2, [r1]
 8006084:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1e6      	bne.n	800605a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2220      	movs	r2, #32
 8006090:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e063      	b.n	8006168 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0304 	and.w	r3, r3, #4
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	d149      	bne.n	8006142 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060b6:	2200      	movs	r2, #0
 80060b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f857 	bl	8006170 <UART_WaitOnFlagUntilTimeout>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d03c      	beq.n	8006142 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d0:	e853 3f00 	ldrex	r3, [r3]
 80060d4:	623b      	str	r3, [r7, #32]
   return(result);
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80060e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060ee:	e841 2300 	strex	r3, r2, [r1]
 80060f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1e6      	bne.n	80060c8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3308      	adds	r3, #8
 8006100:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	e853 3f00 	ldrex	r3, [r3]
 8006108:	60fb      	str	r3, [r7, #12]
   return(result);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f023 0301 	bic.w	r3, r3, #1
 8006110:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3308      	adds	r3, #8
 8006118:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800611a:	61fa      	str	r2, [r7, #28]
 800611c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611e:	69b9      	ldr	r1, [r7, #24]
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	e841 2300 	strex	r3, r2, [r1]
 8006126:	617b      	str	r3, [r7, #20]
   return(result);
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1e5      	bne.n	80060fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2220      	movs	r2, #32
 8006132:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e012      	b.n	8006168 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2220      	movs	r2, #32
 8006146:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3758      	adds	r7, #88	@ 0x58
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	4613      	mov	r3, r2
 800617e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006180:	e049      	b.n	8006216 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006188:	d045      	beq.n	8006216 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800618a:	f7fc f92d 	bl	80023e8 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	69ba      	ldr	r2, [r7, #24]
 8006196:	429a      	cmp	r2, r3
 8006198:	d302      	bcc.n	80061a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e048      	b.n	8006236 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0304 	and.w	r3, r3, #4
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d031      	beq.n	8006216 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	f003 0308 	and.w	r3, r3, #8
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d110      	bne.n	80061e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2208      	movs	r2, #8
 80061c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 f838 	bl	800623e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2208      	movs	r2, #8
 80061d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e029      	b.n	8006236 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061f0:	d111      	bne.n	8006216 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f000 f81e 	bl	800623e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2220      	movs	r2, #32
 8006206:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e00f      	b.n	8006236 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	69da      	ldr	r2, [r3, #28]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	4013      	ands	r3, r2
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	429a      	cmp	r2, r3
 8006224:	bf0c      	ite	eq
 8006226:	2301      	moveq	r3, #1
 8006228:	2300      	movne	r3, #0
 800622a:	b2db      	uxtb	r3, r3
 800622c:	461a      	mov	r2, r3
 800622e:	79fb      	ldrb	r3, [r7, #7]
 8006230:	429a      	cmp	r2, r3
 8006232:	d0a6      	beq.n	8006182 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800623e:	b480      	push	{r7}
 8006240:	b095      	sub	sp, #84	@ 0x54
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800624e:	e853 3f00 	ldrex	r3, [r3]
 8006252:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006256:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800625a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	461a      	mov	r2, r3
 8006262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006264:	643b      	str	r3, [r7, #64]	@ 0x40
 8006266:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006268:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800626a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800626c:	e841 2300 	strex	r3, r2, [r1]
 8006270:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1e6      	bne.n	8006246 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3308      	adds	r3, #8
 800627e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	e853 3f00 	ldrex	r3, [r3]
 8006286:	61fb      	str	r3, [r7, #28]
   return(result);
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800628e:	f023 0301 	bic.w	r3, r3, #1
 8006292:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3308      	adds	r3, #8
 800629a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800629c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800629e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062a4:	e841 2300 	strex	r3, r2, [r1]
 80062a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1e3      	bne.n	8006278 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d118      	bne.n	80062ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	e853 3f00 	ldrex	r3, [r3]
 80062c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	f023 0310 	bic.w	r3, r3, #16
 80062cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	461a      	mov	r2, r3
 80062d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062d6:	61bb      	str	r3, [r7, #24]
 80062d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062da:	6979      	ldr	r1, [r7, #20]
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	e841 2300 	strex	r3, r2, [r1]
 80062e2:	613b      	str	r3, [r7, #16]
   return(result);
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1e6      	bne.n	80062b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2220      	movs	r2, #32
 80062ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80062fe:	bf00      	nop
 8006300:	3754      	adds	r7, #84	@ 0x54
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800630a:	b480      	push	{r7}
 800630c:	b085      	sub	sp, #20
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <HAL_UARTEx_DisableFifoMode+0x16>
 800631c:	2302      	movs	r3, #2
 800631e:	e027      	b.n	8006370 <HAL_UARTEx_DisableFifoMode+0x66>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2224      	movs	r2, #36	@ 0x24
 800632c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0201 	bic.w	r2, r2, #1
 8006346:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800634e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2220      	movs	r2, #32
 8006362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800638c:	2b01      	cmp	r3, #1
 800638e:	d101      	bne.n	8006394 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006390:	2302      	movs	r3, #2
 8006392:	e02d      	b.n	80063f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2224      	movs	r2, #36	@ 0x24
 80063a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0201 	bic.w	r2, r2, #1
 80063ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	430a      	orrs	r2, r1
 80063ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f84f 	bl	8006474 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2220      	movs	r2, #32
 80063e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800640c:	2302      	movs	r3, #2
 800640e:	e02d      	b.n	800646c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2224      	movs	r2, #36	@ 0x24
 800641c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0201 	bic.w	r2, r2, #1
 8006436:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f811 	bl	8006474 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2220      	movs	r2, #32
 800645e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006480:	2b00      	cmp	r3, #0
 8006482:	d108      	bne.n	8006496 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006494:	e031      	b.n	80064fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006496:	2308      	movs	r3, #8
 8006498:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800649a:	2308      	movs	r3, #8
 800649c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	0e5b      	lsrs	r3, r3, #25
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	0f5b      	lsrs	r3, r3, #29
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064be:	7bbb      	ldrb	r3, [r7, #14]
 80064c0:	7b3a      	ldrb	r2, [r7, #12]
 80064c2:	4911      	ldr	r1, [pc, #68]	@ (8006508 <UARTEx_SetNbDataToProcess+0x94>)
 80064c4:	5c8a      	ldrb	r2, [r1, r2]
 80064c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80064ca:	7b3a      	ldrb	r2, [r7, #12]
 80064cc:	490f      	ldr	r1, [pc, #60]	@ (800650c <UARTEx_SetNbDataToProcess+0x98>)
 80064ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80064d4:	b29a      	uxth	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	7b7a      	ldrb	r2, [r7, #13]
 80064e0:	4909      	ldr	r1, [pc, #36]	@ (8006508 <UARTEx_SetNbDataToProcess+0x94>)
 80064e2:	5c8a      	ldrb	r2, [r1, r2]
 80064e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80064e8:	7b7a      	ldrb	r2, [r7, #13]
 80064ea:	4908      	ldr	r1, [pc, #32]	@ (800650c <UARTEx_SetNbDataToProcess+0x98>)
 80064ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80064fa:	bf00      	nop
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	08008e28 	.word	0x08008e28
 800650c:	08008e30 	.word	0x08008e30

08006510 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	4603      	mov	r3, r0
 8006518:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800651a:	2300      	movs	r3, #0
 800651c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800651e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006522:	2b84      	cmp	r3, #132	@ 0x84
 8006524:	d005      	beq.n	8006532 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006526:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4413      	add	r3, r2
 800652e:	3303      	adds	r3, #3
 8006530:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006532:	68fb      	ldr	r3, [r7, #12]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006544:	f000 fae4 	bl	8006b10 <vTaskStartScheduler>
  
  return osOK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	bd80      	pop	{r7, pc}

0800654e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800654e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006550:	b089      	sub	sp, #36	@ 0x24
 8006552:	af04      	add	r7, sp, #16
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d020      	beq.n	80065a2 <osThreadCreate+0x54>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	699b      	ldr	r3, [r3, #24]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d01c      	beq.n	80065a2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685c      	ldr	r4, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	691e      	ldr	r6, [r3, #16]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff ffc8 	bl	8006510 <makeFreeRtosPriority>
 8006580:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800658a:	9202      	str	r2, [sp, #8]
 800658c:	9301      	str	r3, [sp, #4]
 800658e:	9100      	str	r1, [sp, #0]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	4632      	mov	r2, r6
 8006594:	4629      	mov	r1, r5
 8006596:	4620      	mov	r0, r4
 8006598:	f000 f8ed 	bl	8006776 <xTaskCreateStatic>
 800659c:	4603      	mov	r3, r0
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	e01c      	b.n	80065dc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685c      	ldr	r4, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065ae:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7ff ffaa 	bl	8006510 <makeFreeRtosPriority>
 80065bc:	4602      	mov	r2, r0
 80065be:	f107 030c 	add.w	r3, r7, #12
 80065c2:	9301      	str	r3, [sp, #4]
 80065c4:	9200      	str	r2, [sp, #0]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	4632      	mov	r2, r6
 80065ca:	4629      	mov	r1, r5
 80065cc:	4620      	mov	r0, r4
 80065ce:	f000 f932 	bl	8006836 <xTaskCreate>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d001      	beq.n	80065dc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80065d8:	2300      	movs	r3, #0
 80065da:	e000      	b.n	80065de <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80065dc:	68fb      	ldr	r3, [r7, #12]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080065e6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b084      	sub	sp, #16
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <osDelay+0x16>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	e000      	b.n	80065fe <osDelay+0x18>
 80065fc:	2301      	movs	r3, #1
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fa50 	bl	8006aa4 <vTaskDelay>
  
  return osOK;
 8006604:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800660e:	b480      	push	{r7}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f103 0208 	add.w	r2, r3, #8
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f04f 32ff 	mov.w	r2, #4294967295
 8006626:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f103 0208 	add.w	r2, r3, #8
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f103 0208 	add.w	r2, r3, #8
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	689a      	ldr	r2, [r3, #8]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	1c5a      	adds	r2, r3, #1
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	601a      	str	r2, [r3, #0]
}
 80066a4:	bf00      	nop
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c6:	d103      	bne.n	80066d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	60fb      	str	r3, [r7, #12]
 80066ce:	e00c      	b.n	80066ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3308      	adds	r3, #8
 80066d4:	60fb      	str	r3, [r7, #12]
 80066d6:	e002      	b.n	80066de <vListInsert+0x2e>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	60fb      	str	r3, [r7, #12]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d2f6      	bcs.n	80066d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	683a      	ldr	r2, [r7, #0]
 80066f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	601a      	str	r2, [r3, #0]
}
 8006716:	bf00      	nop
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006722:	b480      	push	{r7}
 8006724:	b085      	sub	sp, #20
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6892      	ldr	r2, [r2, #8]
 8006738:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	6852      	ldr	r2, [r2, #4]
 8006742:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	429a      	cmp	r2, r3
 800674c:	d103      	bne.n	8006756 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	689a      	ldr	r2, [r3, #8]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	1e5a      	subs	r2, r3, #1
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006776:	b580      	push	{r7, lr}
 8006778:	b08e      	sub	sp, #56	@ 0x38
 800677a:	af04      	add	r7, sp, #16
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	607a      	str	r2, [r7, #4]
 8006782:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10b      	bne.n	80067a2 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800679c:	bf00      	nop
 800679e:	bf00      	nop
 80067a0:	e7fd      	b.n	800679e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80067a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10b      	bne.n	80067c0 <xTaskCreateStatic+0x4a>
	__asm volatile
 80067a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	61fb      	str	r3, [r7, #28]
}
 80067ba:	bf00      	nop
 80067bc:	bf00      	nop
 80067be:	e7fd      	b.n	80067bc <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80067c0:	2354      	movs	r3, #84	@ 0x54
 80067c2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	2b54      	cmp	r3, #84	@ 0x54
 80067c8:	d00b      	beq.n	80067e2 <xTaskCreateStatic+0x6c>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	61bb      	str	r3, [r7, #24]
}
 80067dc:	bf00      	nop
 80067de:	bf00      	nop
 80067e0:	e7fd      	b.n	80067de <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80067e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80067e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d01e      	beq.n	8006828 <xTaskCreateStatic+0xb2>
 80067ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d01b      	beq.n	8006828 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80067f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067f8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80067fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fc:	2202      	movs	r2, #2
 80067fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006802:	2300      	movs	r3, #0
 8006804:	9303      	str	r3, [sp, #12]
 8006806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006808:	9302      	str	r3, [sp, #8]
 800680a:	f107 0314 	add.w	r3, r7, #20
 800680e:	9301      	str	r3, [sp, #4]
 8006810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	68b9      	ldr	r1, [r7, #8]
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f000 f850 	bl	80068c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006820:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006822:	f000 f8d5 	bl	80069d0 <prvAddNewTaskToReadyList>
 8006826:	e001      	b.n	800682c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006828:	2300      	movs	r3, #0
 800682a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800682c:	697b      	ldr	r3, [r7, #20]
	}
 800682e:	4618      	mov	r0, r3
 8006830:	3728      	adds	r7, #40	@ 0x28
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006836:	b580      	push	{r7, lr}
 8006838:	b08c      	sub	sp, #48	@ 0x30
 800683a:	af04      	add	r7, sp, #16
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	60b9      	str	r1, [r7, #8]
 8006840:	603b      	str	r3, [r7, #0]
 8006842:	4613      	mov	r3, r2
 8006844:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006846:	88fb      	ldrh	r3, [r7, #6]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4618      	mov	r0, r3
 800684c:	f000 fed4 	bl	80075f8 <pvPortMalloc>
 8006850:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00e      	beq.n	8006876 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006858:	2054      	movs	r0, #84	@ 0x54
 800685a:	f000 fecd 	bl	80075f8 <pvPortMalloc>
 800685e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	631a      	str	r2, [r3, #48]	@ 0x30
 800686c:	e005      	b.n	800687a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800686e:	6978      	ldr	r0, [r7, #20]
 8006870:	f000 ff90 	bl	8007794 <vPortFree>
 8006874:	e001      	b.n	800687a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006876:	2300      	movs	r3, #0
 8006878:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d017      	beq.n	80068b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006888:	88fa      	ldrh	r2, [r7, #6]
 800688a:	2300      	movs	r3, #0
 800688c:	9303      	str	r3, [sp, #12]
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	9302      	str	r3, [sp, #8]
 8006892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006894:	9301      	str	r3, [sp, #4]
 8006896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	68b9      	ldr	r1, [r7, #8]
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f000 f80e 	bl	80068c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068a4:	69f8      	ldr	r0, [r7, #28]
 80068a6:	f000 f893 	bl	80069d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068aa:	2301      	movs	r3, #1
 80068ac:	61bb      	str	r3, [r7, #24]
 80068ae:	e002      	b.n	80068b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068b0:	f04f 33ff 	mov.w	r3, #4294967295
 80068b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80068b6:	69bb      	ldr	r3, [r7, #24]
	}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3720      	adds	r7, #32
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b088      	sub	sp, #32
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
 80068cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80068ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80068d8:	3b01      	subs	r3, #1
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	4413      	add	r3, r2
 80068de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	f023 0307 	bic.w	r3, r3, #7
 80068e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	f003 0307 	and.w	r3, r3, #7
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00b      	beq.n	800690a <prvInitialiseNewTask+0x4a>
	__asm volatile
 80068f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	617b      	str	r3, [r7, #20]
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop
 8006908:	e7fd      	b.n	8006906 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01f      	beq.n	8006950 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006910:	2300      	movs	r3, #0
 8006912:	61fb      	str	r3, [r7, #28]
 8006914:	e012      	b.n	800693c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	4413      	add	r3, r2
 800691c:	7819      	ldrb	r1, [r3, #0]
 800691e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	4413      	add	r3, r2
 8006924:	3334      	adds	r3, #52	@ 0x34
 8006926:	460a      	mov	r2, r1
 8006928:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	4413      	add	r3, r2
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d006      	beq.n	8006944 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	3301      	adds	r3, #1
 800693a:	61fb      	str	r3, [r7, #28]
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	2b0f      	cmp	r3, #15
 8006940:	d9e9      	bls.n	8006916 <prvInitialiseNewTask+0x56>
 8006942:	e000      	b.n	8006946 <prvInitialiseNewTask+0x86>
			{
				break;
 8006944:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800694e:	e003      	b.n	8006958 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800695a:	2b06      	cmp	r3, #6
 800695c:	d901      	bls.n	8006962 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800695e:	2306      	movs	r3, #6
 8006960:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006964:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006966:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800696c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800696e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006970:	2200      	movs	r2, #0
 8006972:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006976:	3304      	adds	r3, #4
 8006978:	4618      	mov	r0, r3
 800697a:	f7ff fe68 	bl	800664e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800697e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006980:	3318      	adds	r3, #24
 8006982:	4618      	mov	r0, r3
 8006984:	f7ff fe63 	bl	800664e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800698c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800698e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006990:	f1c3 0207 	rsb	r2, r3, #7
 8006994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006996:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800699c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800699e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a0:	2200      	movs	r2, #0
 80069a2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069ac:	683a      	ldr	r2, [r7, #0]
 80069ae:	68f9      	ldr	r1, [r7, #12]
 80069b0:	69b8      	ldr	r0, [r7, #24]
 80069b2:	f000 fc0d 	bl	80071d0 <pxPortInitialiseStack>
 80069b6:	4602      	mov	r2, r0
 80069b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80069bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d002      	beq.n	80069c8 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80069c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069c8:	bf00      	nop
 80069ca:	3720      	adds	r7, #32
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80069d8:	f000 fd2e 	bl	8007438 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80069dc:	4b2a      	ldr	r3, [pc, #168]	@ (8006a88 <prvAddNewTaskToReadyList+0xb8>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3301      	adds	r3, #1
 80069e2:	4a29      	ldr	r2, [pc, #164]	@ (8006a88 <prvAddNewTaskToReadyList+0xb8>)
 80069e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80069e6:	4b29      	ldr	r3, [pc, #164]	@ (8006a8c <prvAddNewTaskToReadyList+0xbc>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d109      	bne.n	8006a02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80069ee:	4a27      	ldr	r2, [pc, #156]	@ (8006a8c <prvAddNewTaskToReadyList+0xbc>)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80069f4:	4b24      	ldr	r3, [pc, #144]	@ (8006a88 <prvAddNewTaskToReadyList+0xb8>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d110      	bne.n	8006a1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80069fc:	f000 fac4 	bl	8006f88 <prvInitialiseTaskLists>
 8006a00:	e00d      	b.n	8006a1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a02:	4b23      	ldr	r3, [pc, #140]	@ (8006a90 <prvAddNewTaskToReadyList+0xc0>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d109      	bne.n	8006a1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a0a:	4b20      	ldr	r3, [pc, #128]	@ (8006a8c <prvAddNewTaskToReadyList+0xbc>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d802      	bhi.n	8006a1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a18:	4a1c      	ldr	r2, [pc, #112]	@ (8006a8c <prvAddNewTaskToReadyList+0xbc>)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8006a94 <prvAddNewTaskToReadyList+0xc4>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3301      	adds	r3, #1
 8006a24:	4a1b      	ldr	r2, [pc, #108]	@ (8006a94 <prvAddNewTaskToReadyList+0xc4>)
 8006a26:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	409a      	lsls	r2, r3
 8006a30:	4b19      	ldr	r3, [pc, #100]	@ (8006a98 <prvAddNewTaskToReadyList+0xc8>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	4a18      	ldr	r2, [pc, #96]	@ (8006a98 <prvAddNewTaskToReadyList+0xc8>)
 8006a38:	6013      	str	r3, [r2, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a3e:	4613      	mov	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4a15      	ldr	r2, [pc, #84]	@ (8006a9c <prvAddNewTaskToReadyList+0xcc>)
 8006a48:	441a      	add	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	3304      	adds	r3, #4
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4610      	mov	r0, r2
 8006a52:	f7ff fe09 	bl	8006668 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a56:	f000 fd21 	bl	800749c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a90 <prvAddNewTaskToReadyList+0xc0>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00e      	beq.n	8006a80 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a62:	4b0a      	ldr	r3, [pc, #40]	@ (8006a8c <prvAddNewTaskToReadyList+0xbc>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d207      	bcs.n	8006a80 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a70:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa0 <prvAddNewTaskToReadyList+0xd0>)
 8006a72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	20000734 	.word	0x20000734
 8006a8c:	20000634 	.word	0x20000634
 8006a90:	20000740 	.word	0x20000740
 8006a94:	20000750 	.word	0x20000750
 8006a98:	2000073c 	.word	0x2000073c
 8006a9c:	20000638 	.word	0x20000638
 8006aa0:	e000ed04 	.word	0xe000ed04

08006aa4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006aac:	2300      	movs	r3, #0
 8006aae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d018      	beq.n	8006ae8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006ab6:	4b14      	ldr	r3, [pc, #80]	@ (8006b08 <vTaskDelay+0x64>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00b      	beq.n	8006ad6 <vTaskDelay+0x32>
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	60bb      	str	r3, [r7, #8]
}
 8006ad0:	bf00      	nop
 8006ad2:	bf00      	nop
 8006ad4:	e7fd      	b.n	8006ad2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ad6:	f000 f87d 	bl	8006bd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ada:	2100      	movs	r1, #0
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fb11 	bl	8007104 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ae2:	f000 f885 	bl	8006bf0 <xTaskResumeAll>
 8006ae6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d107      	bne.n	8006afe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006aee:	4b07      	ldr	r3, [pc, #28]	@ (8006b0c <vTaskDelay+0x68>)
 8006af0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	f3bf 8f4f 	dsb	sy
 8006afa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006afe:	bf00      	nop
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	2000075c 	.word	0x2000075c
 8006b0c:	e000ed04 	.word	0xe000ed04

08006b10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08a      	sub	sp, #40	@ 0x28
 8006b14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b1e:	463a      	mov	r2, r7
 8006b20:	1d39      	adds	r1, r7, #4
 8006b22:	f107 0308 	add.w	r3, r7, #8
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7f9 fd32 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	9202      	str	r2, [sp, #8]
 8006b34:	9301      	str	r3, [sp, #4]
 8006b36:	2300      	movs	r3, #0
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	460a      	mov	r2, r1
 8006b3e:	491f      	ldr	r1, [pc, #124]	@ (8006bbc <vTaskStartScheduler+0xac>)
 8006b40:	481f      	ldr	r0, [pc, #124]	@ (8006bc0 <vTaskStartScheduler+0xb0>)
 8006b42:	f7ff fe18 	bl	8006776 <xTaskCreateStatic>
 8006b46:	4603      	mov	r3, r0
 8006b48:	4a1e      	ldr	r2, [pc, #120]	@ (8006bc4 <vTaskStartScheduler+0xb4>)
 8006b4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8006bc4 <vTaskStartScheduler+0xb4>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d002      	beq.n	8006b5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006b54:	2301      	movs	r3, #1
 8006b56:	617b      	str	r3, [r7, #20]
 8006b58:	e001      	b.n	8006b5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d116      	bne.n	8006b92 <vTaskStartScheduler+0x82>
	__asm volatile
 8006b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	613b      	str	r3, [r7, #16]
}
 8006b76:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b78:	4b13      	ldr	r3, [pc, #76]	@ (8006bc8 <vTaskStartScheduler+0xb8>)
 8006b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b7e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b80:	4b12      	ldr	r3, [pc, #72]	@ (8006bcc <vTaskStartScheduler+0xbc>)
 8006b82:	2201      	movs	r2, #1
 8006b84:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b86:	4b12      	ldr	r3, [pc, #72]	@ (8006bd0 <vTaskStartScheduler+0xc0>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b8c:	f000 fbb0 	bl	80072f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b90:	e00f      	b.n	8006bb2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b98:	d10b      	bne.n	8006bb2 <vTaskStartScheduler+0xa2>
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	60fb      	str	r3, [r7, #12]
}
 8006bac:	bf00      	nop
 8006bae:	bf00      	nop
 8006bb0:	e7fd      	b.n	8006bae <vTaskStartScheduler+0x9e>
}
 8006bb2:	bf00      	nop
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	08008d50 	.word	0x08008d50
 8006bc0:	08006f59 	.word	0x08006f59
 8006bc4:	20000758 	.word	0x20000758
 8006bc8:	20000754 	.word	0x20000754
 8006bcc:	20000740 	.word	0x20000740
 8006bd0:	20000738 	.word	0x20000738

08006bd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006bd8:	4b04      	ldr	r3, [pc, #16]	@ (8006bec <vTaskSuspendAll+0x18>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	4a03      	ldr	r2, [pc, #12]	@ (8006bec <vTaskSuspendAll+0x18>)
 8006be0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006be2:	bf00      	nop
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	2000075c 	.word	0x2000075c

08006bf0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006bfe:	4b42      	ldr	r3, [pc, #264]	@ (8006d08 <xTaskResumeAll+0x118>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10b      	bne.n	8006c1e <xTaskResumeAll+0x2e>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	603b      	str	r3, [r7, #0]
}
 8006c18:	bf00      	nop
 8006c1a:	bf00      	nop
 8006c1c:	e7fd      	b.n	8006c1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c1e:	f000 fc0b 	bl	8007438 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c22:	4b39      	ldr	r3, [pc, #228]	@ (8006d08 <xTaskResumeAll+0x118>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3b01      	subs	r3, #1
 8006c28:	4a37      	ldr	r2, [pc, #220]	@ (8006d08 <xTaskResumeAll+0x118>)
 8006c2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c2c:	4b36      	ldr	r3, [pc, #216]	@ (8006d08 <xTaskResumeAll+0x118>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d161      	bne.n	8006cf8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c34:	4b35      	ldr	r3, [pc, #212]	@ (8006d0c <xTaskResumeAll+0x11c>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d05d      	beq.n	8006cf8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c3c:	e02e      	b.n	8006c9c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c3e:	4b34      	ldr	r3, [pc, #208]	@ (8006d10 <xTaskResumeAll+0x120>)
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3318      	adds	r3, #24
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7ff fd69 	bl	8006722 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	3304      	adds	r3, #4
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7ff fd64 	bl	8006722 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5e:	2201      	movs	r2, #1
 8006c60:	409a      	lsls	r2, r3
 8006c62:	4b2c      	ldr	r3, [pc, #176]	@ (8006d14 <xTaskResumeAll+0x124>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	4a2a      	ldr	r2, [pc, #168]	@ (8006d14 <xTaskResumeAll+0x124>)
 8006c6a:	6013      	str	r3, [r2, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4a27      	ldr	r2, [pc, #156]	@ (8006d18 <xTaskResumeAll+0x128>)
 8006c7a:	441a      	add	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	3304      	adds	r3, #4
 8006c80:	4619      	mov	r1, r3
 8006c82:	4610      	mov	r0, r2
 8006c84:	f7ff fcf0 	bl	8006668 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c8c:	4b23      	ldr	r3, [pc, #140]	@ (8006d1c <xTaskResumeAll+0x12c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d302      	bcc.n	8006c9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006c96:	4b22      	ldr	r3, [pc, #136]	@ (8006d20 <xTaskResumeAll+0x130>)
 8006c98:	2201      	movs	r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8006d10 <xTaskResumeAll+0x120>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1cc      	bne.n	8006c3e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006caa:	f000 fa0b 	bl	80070c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006cae:	4b1d      	ldr	r3, [pc, #116]	@ (8006d24 <xTaskResumeAll+0x134>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d010      	beq.n	8006cdc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006cba:	f000 f837 	bl	8006d2c <xTaskIncrementTick>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006cc4:	4b16      	ldr	r3, [pc, #88]	@ (8006d20 <xTaskResumeAll+0x130>)
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1f1      	bne.n	8006cba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006cd6:	4b13      	ldr	r3, [pc, #76]	@ (8006d24 <xTaskResumeAll+0x134>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006cdc:	4b10      	ldr	r3, [pc, #64]	@ (8006d20 <xTaskResumeAll+0x130>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d009      	beq.n	8006cf8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8006d28 <xTaskResumeAll+0x138>)
 8006cea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cee:	601a      	str	r2, [r3, #0]
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cf8:	f000 fbd0 	bl	800749c <vPortExitCritical>

	return xAlreadyYielded;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	2000075c 	.word	0x2000075c
 8006d0c:	20000734 	.word	0x20000734
 8006d10:	200006f4 	.word	0x200006f4
 8006d14:	2000073c 	.word	0x2000073c
 8006d18:	20000638 	.word	0x20000638
 8006d1c:	20000634 	.word	0x20000634
 8006d20:	20000748 	.word	0x20000748
 8006d24:	20000744 	.word	0x20000744
 8006d28:	e000ed04 	.word	0xe000ed04

08006d2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d32:	2300      	movs	r3, #0
 8006d34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d36:	4b4f      	ldr	r3, [pc, #316]	@ (8006e74 <xTaskIncrementTick+0x148>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f040 808f 	bne.w	8006e5e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006d40:	4b4d      	ldr	r3, [pc, #308]	@ (8006e78 <xTaskIncrementTick+0x14c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3301      	adds	r3, #1
 8006d46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006d48:	4a4b      	ldr	r2, [pc, #300]	@ (8006e78 <xTaskIncrementTick+0x14c>)
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d121      	bne.n	8006d98 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006d54:	4b49      	ldr	r3, [pc, #292]	@ (8006e7c <xTaskIncrementTick+0x150>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00b      	beq.n	8006d76 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	603b      	str	r3, [r7, #0]
}
 8006d70:	bf00      	nop
 8006d72:	bf00      	nop
 8006d74:	e7fd      	b.n	8006d72 <xTaskIncrementTick+0x46>
 8006d76:	4b41      	ldr	r3, [pc, #260]	@ (8006e7c <xTaskIncrementTick+0x150>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	4b40      	ldr	r3, [pc, #256]	@ (8006e80 <xTaskIncrementTick+0x154>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a3e      	ldr	r2, [pc, #248]	@ (8006e7c <xTaskIncrementTick+0x150>)
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	4a3e      	ldr	r2, [pc, #248]	@ (8006e80 <xTaskIncrementTick+0x154>)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	4b3e      	ldr	r3, [pc, #248]	@ (8006e84 <xTaskIncrementTick+0x158>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	4a3c      	ldr	r2, [pc, #240]	@ (8006e84 <xTaskIncrementTick+0x158>)
 8006d92:	6013      	str	r3, [r2, #0]
 8006d94:	f000 f996 	bl	80070c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006d98:	4b3b      	ldr	r3, [pc, #236]	@ (8006e88 <xTaskIncrementTick+0x15c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d348      	bcc.n	8006e34 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006da2:	4b36      	ldr	r3, [pc, #216]	@ (8006e7c <xTaskIncrementTick+0x150>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d104      	bne.n	8006db6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dac:	4b36      	ldr	r3, [pc, #216]	@ (8006e88 <xTaskIncrementTick+0x15c>)
 8006dae:	f04f 32ff 	mov.w	r2, #4294967295
 8006db2:	601a      	str	r2, [r3, #0]
					break;
 8006db4:	e03e      	b.n	8006e34 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006db6:	4b31      	ldr	r3, [pc, #196]	@ (8006e7c <xTaskIncrementTick+0x150>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d203      	bcs.n	8006dd6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006dce:	4a2e      	ldr	r2, [pc, #184]	@ (8006e88 <xTaskIncrementTick+0x15c>)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006dd4:	e02e      	b.n	8006e34 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	3304      	adds	r3, #4
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7ff fca1 	bl	8006722 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d004      	beq.n	8006df2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	3318      	adds	r3, #24
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7ff fc98 	bl	8006722 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df6:	2201      	movs	r2, #1
 8006df8:	409a      	lsls	r2, r3
 8006dfa:	4b24      	ldr	r3, [pc, #144]	@ (8006e8c <xTaskIncrementTick+0x160>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	4a22      	ldr	r2, [pc, #136]	@ (8006e8c <xTaskIncrementTick+0x160>)
 8006e02:	6013      	str	r3, [r2, #0]
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4a1f      	ldr	r2, [pc, #124]	@ (8006e90 <xTaskIncrementTick+0x164>)
 8006e12:	441a      	add	r2, r3
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	3304      	adds	r3, #4
 8006e18:	4619      	mov	r1, r3
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	f7ff fc24 	bl	8006668 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e24:	4b1b      	ldr	r3, [pc, #108]	@ (8006e94 <xTaskIncrementTick+0x168>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d3b9      	bcc.n	8006da2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e32:	e7b6      	b.n	8006da2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e34:	4b17      	ldr	r3, [pc, #92]	@ (8006e94 <xTaskIncrementTick+0x168>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e3a:	4915      	ldr	r1, [pc, #84]	@ (8006e90 <xTaskIncrementTick+0x164>)
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4413      	add	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	440b      	add	r3, r1
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d901      	bls.n	8006e50 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006e50:	4b11      	ldr	r3, [pc, #68]	@ (8006e98 <xTaskIncrementTick+0x16c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d007      	beq.n	8006e68 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	617b      	str	r3, [r7, #20]
 8006e5c:	e004      	b.n	8006e68 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8006e9c <xTaskIncrementTick+0x170>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3301      	adds	r3, #1
 8006e64:	4a0d      	ldr	r2, [pc, #52]	@ (8006e9c <xTaskIncrementTick+0x170>)
 8006e66:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006e68:	697b      	ldr	r3, [r7, #20]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	2000075c 	.word	0x2000075c
 8006e78:	20000738 	.word	0x20000738
 8006e7c:	200006ec 	.word	0x200006ec
 8006e80:	200006f0 	.word	0x200006f0
 8006e84:	2000074c 	.word	0x2000074c
 8006e88:	20000754 	.word	0x20000754
 8006e8c:	2000073c 	.word	0x2000073c
 8006e90:	20000638 	.word	0x20000638
 8006e94:	20000634 	.word	0x20000634
 8006e98:	20000748 	.word	0x20000748
 8006e9c:	20000744 	.word	0x20000744

08006ea0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ea6:	4b27      	ldr	r3, [pc, #156]	@ (8006f44 <vTaskSwitchContext+0xa4>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006eae:	4b26      	ldr	r3, [pc, #152]	@ (8006f48 <vTaskSwitchContext+0xa8>)
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006eb4:	e040      	b.n	8006f38 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006eb6:	4b24      	ldr	r3, [pc, #144]	@ (8006f48 <vTaskSwitchContext+0xa8>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ebc:	4b23      	ldr	r3, [pc, #140]	@ (8006f4c <vTaskSwitchContext+0xac>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	fab3 f383 	clz	r3, r3
 8006ec8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006eca:	7afb      	ldrb	r3, [r7, #11]
 8006ecc:	f1c3 031f 	rsb	r3, r3, #31
 8006ed0:	617b      	str	r3, [r7, #20]
 8006ed2:	491f      	ldr	r1, [pc, #124]	@ (8006f50 <vTaskSwitchContext+0xb0>)
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	440b      	add	r3, r1
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10b      	bne.n	8006efe <vTaskSwitchContext+0x5e>
	__asm volatile
 8006ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eea:	f383 8811 	msr	BASEPRI, r3
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	607b      	str	r3, [r7, #4]
}
 8006ef8:	bf00      	nop
 8006efa:	bf00      	nop
 8006efc:	e7fd      	b.n	8006efa <vTaskSwitchContext+0x5a>
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	4613      	mov	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4a11      	ldr	r2, [pc, #68]	@ (8006f50 <vTaskSwitchContext+0xb0>)
 8006f0a:	4413      	add	r3, r2
 8006f0c:	613b      	str	r3, [r7, #16]
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	605a      	str	r2, [r3, #4]
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	3308      	adds	r3, #8
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d104      	bne.n	8006f2e <vTaskSwitchContext+0x8e>
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	605a      	str	r2, [r3, #4]
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	4a07      	ldr	r2, [pc, #28]	@ (8006f54 <vTaskSwitchContext+0xb4>)
 8006f36:	6013      	str	r3, [r2, #0]
}
 8006f38:	bf00      	nop
 8006f3a:	371c      	adds	r7, #28
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	2000075c 	.word	0x2000075c
 8006f48:	20000748 	.word	0x20000748
 8006f4c:	2000073c 	.word	0x2000073c
 8006f50:	20000638 	.word	0x20000638
 8006f54:	20000634 	.word	0x20000634

08006f58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f60:	f000 f852 	bl	8007008 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f64:	4b06      	ldr	r3, [pc, #24]	@ (8006f80 <prvIdleTask+0x28>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d9f9      	bls.n	8006f60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f6c:	4b05      	ldr	r3, [pc, #20]	@ (8006f84 <prvIdleTask+0x2c>)
 8006f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f7c:	e7f0      	b.n	8006f60 <prvIdleTask+0x8>
 8006f7e:	bf00      	nop
 8006f80:	20000638 	.word	0x20000638
 8006f84:	e000ed04 	.word	0xe000ed04

08006f88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f8e:	2300      	movs	r3, #0
 8006f90:	607b      	str	r3, [r7, #4]
 8006f92:	e00c      	b.n	8006fae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	4613      	mov	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	4413      	add	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4a12      	ldr	r2, [pc, #72]	@ (8006fe8 <prvInitialiseTaskLists+0x60>)
 8006fa0:	4413      	add	r3, r2
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7ff fb33 	bl	800660e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3301      	adds	r3, #1
 8006fac:	607b      	str	r3, [r7, #4]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b06      	cmp	r3, #6
 8006fb2:	d9ef      	bls.n	8006f94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006fb4:	480d      	ldr	r0, [pc, #52]	@ (8006fec <prvInitialiseTaskLists+0x64>)
 8006fb6:	f7ff fb2a 	bl	800660e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006fba:	480d      	ldr	r0, [pc, #52]	@ (8006ff0 <prvInitialiseTaskLists+0x68>)
 8006fbc:	f7ff fb27 	bl	800660e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006fc0:	480c      	ldr	r0, [pc, #48]	@ (8006ff4 <prvInitialiseTaskLists+0x6c>)
 8006fc2:	f7ff fb24 	bl	800660e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006fc6:	480c      	ldr	r0, [pc, #48]	@ (8006ff8 <prvInitialiseTaskLists+0x70>)
 8006fc8:	f7ff fb21 	bl	800660e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006fcc:	480b      	ldr	r0, [pc, #44]	@ (8006ffc <prvInitialiseTaskLists+0x74>)
 8006fce:	f7ff fb1e 	bl	800660e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8007000 <prvInitialiseTaskLists+0x78>)
 8006fd4:	4a05      	ldr	r2, [pc, #20]	@ (8006fec <prvInitialiseTaskLists+0x64>)
 8006fd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8007004 <prvInitialiseTaskLists+0x7c>)
 8006fda:	4a05      	ldr	r2, [pc, #20]	@ (8006ff0 <prvInitialiseTaskLists+0x68>)
 8006fdc:	601a      	str	r2, [r3, #0]
}
 8006fde:	bf00      	nop
 8006fe0:	3708      	adds	r7, #8
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	20000638 	.word	0x20000638
 8006fec:	200006c4 	.word	0x200006c4
 8006ff0:	200006d8 	.word	0x200006d8
 8006ff4:	200006f4 	.word	0x200006f4
 8006ff8:	20000708 	.word	0x20000708
 8006ffc:	20000720 	.word	0x20000720
 8007000:	200006ec 	.word	0x200006ec
 8007004:	200006f0 	.word	0x200006f0

08007008 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800700e:	e019      	b.n	8007044 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007010:	f000 fa12 	bl	8007438 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007014:	4b10      	ldr	r3, [pc, #64]	@ (8007058 <prvCheckTasksWaitingTermination+0x50>)
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3304      	adds	r3, #4
 8007020:	4618      	mov	r0, r3
 8007022:	f7ff fb7e 	bl	8006722 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007026:	4b0d      	ldr	r3, [pc, #52]	@ (800705c <prvCheckTasksWaitingTermination+0x54>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3b01      	subs	r3, #1
 800702c:	4a0b      	ldr	r2, [pc, #44]	@ (800705c <prvCheckTasksWaitingTermination+0x54>)
 800702e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007030:	4b0b      	ldr	r3, [pc, #44]	@ (8007060 <prvCheckTasksWaitingTermination+0x58>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3b01      	subs	r3, #1
 8007036:	4a0a      	ldr	r2, [pc, #40]	@ (8007060 <prvCheckTasksWaitingTermination+0x58>)
 8007038:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800703a:	f000 fa2f 	bl	800749c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f810 	bl	8007064 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007044:	4b06      	ldr	r3, [pc, #24]	@ (8007060 <prvCheckTasksWaitingTermination+0x58>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e1      	bne.n	8007010 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800704c:	bf00      	nop
 800704e:	bf00      	nop
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	20000708 	.word	0x20000708
 800705c:	20000734 	.word	0x20000734
 8007060:	2000071c 	.word	0x2000071c

08007064 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007072:	2b00      	cmp	r3, #0
 8007074:	d108      	bne.n	8007088 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800707a:	4618      	mov	r0, r3
 800707c:	f000 fb8a 	bl	8007794 <vPortFree>
				vPortFree( pxTCB );
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fb87 	bl	8007794 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007086:	e019      	b.n	80070bc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800708e:	2b01      	cmp	r3, #1
 8007090:	d103      	bne.n	800709a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fb7e 	bl	8007794 <vPortFree>
	}
 8007098:	e010      	b.n	80070bc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d00b      	beq.n	80070bc <prvDeleteTCB+0x58>
	__asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	60fb      	str	r3, [r7, #12]
}
 80070b6:	bf00      	nop
 80070b8:	bf00      	nop
 80070ba:	e7fd      	b.n	80070b8 <prvDeleteTCB+0x54>
	}
 80070bc:	bf00      	nop
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070ca:	4b0c      	ldr	r3, [pc, #48]	@ (80070fc <prvResetNextTaskUnblockTime+0x38>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d104      	bne.n	80070de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80070d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007100 <prvResetNextTaskUnblockTime+0x3c>)
 80070d6:	f04f 32ff 	mov.w	r2, #4294967295
 80070da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80070dc:	e008      	b.n	80070f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070de:	4b07      	ldr	r3, [pc, #28]	@ (80070fc <prvResetNextTaskUnblockTime+0x38>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	4a04      	ldr	r2, [pc, #16]	@ (8007100 <prvResetNextTaskUnblockTime+0x3c>)
 80070ee:	6013      	str	r3, [r2, #0]
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	200006ec 	.word	0x200006ec
 8007100:	20000754 	.word	0x20000754

08007104 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800710e:	4b29      	ldr	r3, [pc, #164]	@ (80071b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007114:	4b28      	ldr	r3, [pc, #160]	@ (80071b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	3304      	adds	r3, #4
 800711a:	4618      	mov	r0, r3
 800711c:	f7ff fb01 	bl	8006722 <uxListRemove>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10b      	bne.n	800713e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007126:	4b24      	ldr	r3, [pc, #144]	@ (80071b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712c:	2201      	movs	r2, #1
 800712e:	fa02 f303 	lsl.w	r3, r2, r3
 8007132:	43da      	mvns	r2, r3
 8007134:	4b21      	ldr	r3, [pc, #132]	@ (80071bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4013      	ands	r3, r2
 800713a:	4a20      	ldr	r2, [pc, #128]	@ (80071bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800713c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007144:	d10a      	bne.n	800715c <prvAddCurrentTaskToDelayedList+0x58>
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d007      	beq.n	800715c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800714c:	4b1a      	ldr	r3, [pc, #104]	@ (80071b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3304      	adds	r3, #4
 8007152:	4619      	mov	r1, r3
 8007154:	481a      	ldr	r0, [pc, #104]	@ (80071c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007156:	f7ff fa87 	bl	8006668 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800715a:	e026      	b.n	80071aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4413      	add	r3, r2
 8007162:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007164:	4b14      	ldr	r3, [pc, #80]	@ (80071b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	429a      	cmp	r2, r3
 8007172:	d209      	bcs.n	8007188 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007174:	4b13      	ldr	r3, [pc, #76]	@ (80071c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	4b0f      	ldr	r3, [pc, #60]	@ (80071b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3304      	adds	r3, #4
 800717e:	4619      	mov	r1, r3
 8007180:	4610      	mov	r0, r2
 8007182:	f7ff fa95 	bl	80066b0 <vListInsert>
}
 8007186:	e010      	b.n	80071aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007188:	4b0f      	ldr	r3, [pc, #60]	@ (80071c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	4b0a      	ldr	r3, [pc, #40]	@ (80071b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	3304      	adds	r3, #4
 8007192:	4619      	mov	r1, r3
 8007194:	4610      	mov	r0, r2
 8007196:	f7ff fa8b 	bl	80066b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800719a:	4b0c      	ldr	r3, [pc, #48]	@ (80071cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d202      	bcs.n	80071aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80071a4:	4a09      	ldr	r2, [pc, #36]	@ (80071cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	6013      	str	r3, [r2, #0]
}
 80071aa:	bf00      	nop
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	20000738 	.word	0x20000738
 80071b8:	20000634 	.word	0x20000634
 80071bc:	2000073c 	.word	0x2000073c
 80071c0:	20000720 	.word	0x20000720
 80071c4:	200006f0 	.word	0x200006f0
 80071c8:	200006ec 	.word	0x200006ec
 80071cc:	20000754 	.word	0x20000754

080071d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	3b04      	subs	r3, #4
 80071e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80071e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	3b04      	subs	r3, #4
 80071ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	f023 0201 	bic.w	r2, r3, #1
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3b04      	subs	r3, #4
 80071fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007200:	4a0c      	ldr	r2, [pc, #48]	@ (8007234 <pxPortInitialiseStack+0x64>)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3b14      	subs	r3, #20
 800720a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	3b04      	subs	r3, #4
 8007216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f06f 0202 	mvn.w	r2, #2
 800721e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	3b20      	subs	r3, #32
 8007224:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007226:	68fb      	ldr	r3, [r7, #12]
}
 8007228:	4618      	mov	r0, r3
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	08007239 	.word	0x08007239

08007238 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800723e:	2300      	movs	r3, #0
 8007240:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007242:	4b13      	ldr	r3, [pc, #76]	@ (8007290 <prvTaskExitError+0x58>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724a:	d00b      	beq.n	8007264 <prvTaskExitError+0x2c>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	60fb      	str	r3, [r7, #12]
}
 800725e:	bf00      	nop
 8007260:	bf00      	nop
 8007262:	e7fd      	b.n	8007260 <prvTaskExitError+0x28>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	60bb      	str	r3, [r7, #8]
}
 8007276:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007278:	bf00      	nop
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0fc      	beq.n	800727a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007280:	bf00      	nop
 8007282:	bf00      	nop
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	2000014c 	.word	0x2000014c
	...

080072a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80072a0:	4b07      	ldr	r3, [pc, #28]	@ (80072c0 <pxCurrentTCBConst2>)
 80072a2:	6819      	ldr	r1, [r3, #0]
 80072a4:	6808      	ldr	r0, [r1, #0]
 80072a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072aa:	f380 8809 	msr	PSP, r0
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f04f 0000 	mov.w	r0, #0
 80072b6:	f380 8811 	msr	BASEPRI, r0
 80072ba:	4770      	bx	lr
 80072bc:	f3af 8000 	nop.w

080072c0 <pxCurrentTCBConst2>:
 80072c0:	20000634 	.word	0x20000634
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80072c4:	bf00      	nop
 80072c6:	bf00      	nop

080072c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80072c8:	4808      	ldr	r0, [pc, #32]	@ (80072ec <prvPortStartFirstTask+0x24>)
 80072ca:	6800      	ldr	r0, [r0, #0]
 80072cc:	6800      	ldr	r0, [r0, #0]
 80072ce:	f380 8808 	msr	MSP, r0
 80072d2:	f04f 0000 	mov.w	r0, #0
 80072d6:	f380 8814 	msr	CONTROL, r0
 80072da:	b662      	cpsie	i
 80072dc:	b661      	cpsie	f
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	df00      	svc	0
 80072e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072ea:	bf00      	nop
 80072ec:	e000ed08 	.word	0xe000ed08

080072f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072f6:	4b47      	ldr	r3, [pc, #284]	@ (8007414 <xPortStartScheduler+0x124>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a47      	ldr	r2, [pc, #284]	@ (8007418 <xPortStartScheduler+0x128>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d10b      	bne.n	8007318 <xPortStartScheduler+0x28>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	613b      	str	r3, [r7, #16]
}
 8007312:	bf00      	nop
 8007314:	bf00      	nop
 8007316:	e7fd      	b.n	8007314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007318:	4b3e      	ldr	r3, [pc, #248]	@ (8007414 <xPortStartScheduler+0x124>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a3f      	ldr	r2, [pc, #252]	@ (800741c <xPortStartScheduler+0x12c>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d10b      	bne.n	800733a <xPortStartScheduler+0x4a>
	__asm volatile
 8007322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	60fb      	str	r3, [r7, #12]
}
 8007334:	bf00      	nop
 8007336:	bf00      	nop
 8007338:	e7fd      	b.n	8007336 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800733a:	4b39      	ldr	r3, [pc, #228]	@ (8007420 <xPortStartScheduler+0x130>)
 800733c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	b2db      	uxtb	r3, r3
 8007344:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	22ff      	movs	r2, #255	@ 0xff
 800734a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	b2db      	uxtb	r3, r3
 8007352:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007354:	78fb      	ldrb	r3, [r7, #3]
 8007356:	b2db      	uxtb	r3, r3
 8007358:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800735c:	b2da      	uxtb	r2, r3
 800735e:	4b31      	ldr	r3, [pc, #196]	@ (8007424 <xPortStartScheduler+0x134>)
 8007360:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007362:	4b31      	ldr	r3, [pc, #196]	@ (8007428 <xPortStartScheduler+0x138>)
 8007364:	2207      	movs	r2, #7
 8007366:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007368:	e009      	b.n	800737e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800736a:	4b2f      	ldr	r3, [pc, #188]	@ (8007428 <xPortStartScheduler+0x138>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	3b01      	subs	r3, #1
 8007370:	4a2d      	ldr	r2, [pc, #180]	@ (8007428 <xPortStartScheduler+0x138>)
 8007372:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007374:	78fb      	ldrb	r3, [r7, #3]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	b2db      	uxtb	r3, r3
 800737c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800737e:	78fb      	ldrb	r3, [r7, #3]
 8007380:	b2db      	uxtb	r3, r3
 8007382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007386:	2b80      	cmp	r3, #128	@ 0x80
 8007388:	d0ef      	beq.n	800736a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800738a:	4b27      	ldr	r3, [pc, #156]	@ (8007428 <xPortStartScheduler+0x138>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f1c3 0307 	rsb	r3, r3, #7
 8007392:	2b04      	cmp	r3, #4
 8007394:	d00b      	beq.n	80073ae <xPortStartScheduler+0xbe>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	60bb      	str	r3, [r7, #8]
}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop
 80073ac:	e7fd      	b.n	80073aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80073ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007428 <xPortStartScheduler+0x138>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	021b      	lsls	r3, r3, #8
 80073b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007428 <xPortStartScheduler+0x138>)
 80073b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80073b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007428 <xPortStartScheduler+0x138>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80073c0:	4a19      	ldr	r2, [pc, #100]	@ (8007428 <xPortStartScheduler+0x138>)
 80073c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80073cc:	4b17      	ldr	r3, [pc, #92]	@ (800742c <xPortStartScheduler+0x13c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a16      	ldr	r2, [pc, #88]	@ (800742c <xPortStartScheduler+0x13c>)
 80073d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80073d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073d8:	4b14      	ldr	r3, [pc, #80]	@ (800742c <xPortStartScheduler+0x13c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a13      	ldr	r2, [pc, #76]	@ (800742c <xPortStartScheduler+0x13c>)
 80073de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80073e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80073e4:	f000 f8da 	bl	800759c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80073e8:	4b11      	ldr	r3, [pc, #68]	@ (8007430 <xPortStartScheduler+0x140>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80073ee:	f000 f8f9 	bl	80075e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073f2:	4b10      	ldr	r3, [pc, #64]	@ (8007434 <xPortStartScheduler+0x144>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a0f      	ldr	r2, [pc, #60]	@ (8007434 <xPortStartScheduler+0x144>)
 80073f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80073fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073fe:	f7ff ff63 	bl	80072c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007402:	f7ff fd4d 	bl	8006ea0 <vTaskSwitchContext>
	prvTaskExitError();
 8007406:	f7ff ff17 	bl	8007238 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3718      	adds	r7, #24
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	e000ed00 	.word	0xe000ed00
 8007418:	410fc271 	.word	0x410fc271
 800741c:	410fc270 	.word	0x410fc270
 8007420:	e000e400 	.word	0xe000e400
 8007424:	20000760 	.word	0x20000760
 8007428:	20000764 	.word	0x20000764
 800742c:	e000ed20 	.word	0xe000ed20
 8007430:	2000014c 	.word	0x2000014c
 8007434:	e000ef34 	.word	0xe000ef34

08007438 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	607b      	str	r3, [r7, #4]
}
 8007450:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007452:	4b10      	ldr	r3, [pc, #64]	@ (8007494 <vPortEnterCritical+0x5c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3301      	adds	r3, #1
 8007458:	4a0e      	ldr	r2, [pc, #56]	@ (8007494 <vPortEnterCritical+0x5c>)
 800745a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800745c:	4b0d      	ldr	r3, [pc, #52]	@ (8007494 <vPortEnterCritical+0x5c>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d110      	bne.n	8007486 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007464:	4b0c      	ldr	r3, [pc, #48]	@ (8007498 <vPortEnterCritical+0x60>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00b      	beq.n	8007486 <vPortEnterCritical+0x4e>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	603b      	str	r3, [r7, #0]
}
 8007480:	bf00      	nop
 8007482:	bf00      	nop
 8007484:	e7fd      	b.n	8007482 <vPortEnterCritical+0x4a>
	}
}
 8007486:	bf00      	nop
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	2000014c 	.word	0x2000014c
 8007498:	e000ed04 	.word	0xe000ed04

0800749c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80074a2:	4b12      	ldr	r3, [pc, #72]	@ (80074ec <vPortExitCritical+0x50>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10b      	bne.n	80074c2 <vPortExitCritical+0x26>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	607b      	str	r3, [r7, #4]
}
 80074bc:	bf00      	nop
 80074be:	bf00      	nop
 80074c0:	e7fd      	b.n	80074be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80074c2:	4b0a      	ldr	r3, [pc, #40]	@ (80074ec <vPortExitCritical+0x50>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3b01      	subs	r3, #1
 80074c8:	4a08      	ldr	r2, [pc, #32]	@ (80074ec <vPortExitCritical+0x50>)
 80074ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80074cc:	4b07      	ldr	r3, [pc, #28]	@ (80074ec <vPortExitCritical+0x50>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d105      	bne.n	80074e0 <vPortExitCritical+0x44>
 80074d4:	2300      	movs	r3, #0
 80074d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80074de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	2000014c 	.word	0x2000014c

080074f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074f0:	f3ef 8009 	mrs	r0, PSP
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	4b15      	ldr	r3, [pc, #84]	@ (8007550 <pxCurrentTCBConst>)
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	f01e 0f10 	tst.w	lr, #16
 8007500:	bf08      	it	eq
 8007502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750a:	6010      	str	r0, [r2, #0]
 800750c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007510:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007514:	f380 8811 	msr	BASEPRI, r0
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f7ff fcbe 	bl	8006ea0 <vTaskSwitchContext>
 8007524:	f04f 0000 	mov.w	r0, #0
 8007528:	f380 8811 	msr	BASEPRI, r0
 800752c:	bc09      	pop	{r0, r3}
 800752e:	6819      	ldr	r1, [r3, #0]
 8007530:	6808      	ldr	r0, [r1, #0]
 8007532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007536:	f01e 0f10 	tst.w	lr, #16
 800753a:	bf08      	it	eq
 800753c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007540:	f380 8809 	msr	PSP, r0
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	f3af 8000 	nop.w

08007550 <pxCurrentTCBConst>:
 8007550:	20000634 	.word	0x20000634
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007554:	bf00      	nop
 8007556:	bf00      	nop

08007558 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	607b      	str	r3, [r7, #4]
}
 8007570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007572:	f7ff fbdb 	bl	8006d2c <xTaskIncrementTick>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800757c:	4b06      	ldr	r3, [pc, #24]	@ (8007598 <SysTick_Handler+0x40>)
 800757e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	2300      	movs	r3, #0
 8007586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	f383 8811 	msr	BASEPRI, r3
}
 800758e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	e000ed04 	.word	0xe000ed04

0800759c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800759c:	b480      	push	{r7}
 800759e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075a0:	4b0b      	ldr	r3, [pc, #44]	@ (80075d0 <vPortSetupTimerInterrupt+0x34>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075a6:	4b0b      	ldr	r3, [pc, #44]	@ (80075d4 <vPortSetupTimerInterrupt+0x38>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075ac:	4b0a      	ldr	r3, [pc, #40]	@ (80075d8 <vPortSetupTimerInterrupt+0x3c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a0a      	ldr	r2, [pc, #40]	@ (80075dc <vPortSetupTimerInterrupt+0x40>)
 80075b2:	fba2 2303 	umull	r2, r3, r2, r3
 80075b6:	099b      	lsrs	r3, r3, #6
 80075b8:	4a09      	ldr	r2, [pc, #36]	@ (80075e0 <vPortSetupTimerInterrupt+0x44>)
 80075ba:	3b01      	subs	r3, #1
 80075bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075be:	4b04      	ldr	r3, [pc, #16]	@ (80075d0 <vPortSetupTimerInterrupt+0x34>)
 80075c0:	2207      	movs	r2, #7
 80075c2:	601a      	str	r2, [r3, #0]
}
 80075c4:	bf00      	nop
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	e000e010 	.word	0xe000e010
 80075d4:	e000e018 	.word	0xe000e018
 80075d8:	2000007c 	.word	0x2000007c
 80075dc:	10624dd3 	.word	0x10624dd3
 80075e0:	e000e014 	.word	0xe000e014

080075e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80075e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80075f4 <vPortEnableVFP+0x10>
 80075e8:	6801      	ldr	r1, [r0, #0]
 80075ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80075ee:	6001      	str	r1, [r0, #0]
 80075f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80075f2:	bf00      	nop
 80075f4:	e000ed88 	.word	0xe000ed88

080075f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b08a      	sub	sp, #40	@ 0x28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007600:	2300      	movs	r3, #0
 8007602:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007604:	f7ff fae6 	bl	8006bd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007608:	4b5c      	ldr	r3, [pc, #368]	@ (800777c <pvPortMalloc+0x184>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d101      	bne.n	8007614 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007610:	f000 f924 	bl	800785c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007614:	4b5a      	ldr	r3, [pc, #360]	@ (8007780 <pvPortMalloc+0x188>)
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4013      	ands	r3, r2
 800761c:	2b00      	cmp	r3, #0
 800761e:	f040 8095 	bne.w	800774c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d01e      	beq.n	8007666 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007628:	2208      	movs	r2, #8
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4413      	add	r3, r2
 800762e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f003 0307 	and.w	r3, r3, #7
 8007636:	2b00      	cmp	r3, #0
 8007638:	d015      	beq.n	8007666 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f023 0307 	bic.w	r3, r3, #7
 8007640:	3308      	adds	r3, #8
 8007642:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f003 0307 	and.w	r3, r3, #7
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00b      	beq.n	8007666 <pvPortMalloc+0x6e>
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	617b      	str	r3, [r7, #20]
}
 8007660:	bf00      	nop
 8007662:	bf00      	nop
 8007664:	e7fd      	b.n	8007662 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d06f      	beq.n	800774c <pvPortMalloc+0x154>
 800766c:	4b45      	ldr	r3, [pc, #276]	@ (8007784 <pvPortMalloc+0x18c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	429a      	cmp	r2, r3
 8007674:	d86a      	bhi.n	800774c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007676:	4b44      	ldr	r3, [pc, #272]	@ (8007788 <pvPortMalloc+0x190>)
 8007678:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800767a:	4b43      	ldr	r3, [pc, #268]	@ (8007788 <pvPortMalloc+0x190>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007680:	e004      	b.n	800768c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007684:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800768c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	429a      	cmp	r2, r3
 8007694:	d903      	bls.n	800769e <pvPortMalloc+0xa6>
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1f1      	bne.n	8007682 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800769e:	4b37      	ldr	r3, [pc, #220]	@ (800777c <pvPortMalloc+0x184>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d051      	beq.n	800774c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80076a8:	6a3b      	ldr	r3, [r7, #32]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2208      	movs	r2, #8
 80076ae:	4413      	add	r3, r2
 80076b0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80076b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80076ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	1ad2      	subs	r2, r2, r3
 80076c2:	2308      	movs	r3, #8
 80076c4:	005b      	lsls	r3, r3, #1
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d920      	bls.n	800770c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80076ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4413      	add	r3, r2
 80076d0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	f003 0307 	and.w	r3, r3, #7
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00b      	beq.n	80076f4 <pvPortMalloc+0xfc>
	__asm volatile
 80076dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	613b      	str	r3, [r7, #16]
}
 80076ee:	bf00      	nop
 80076f0:	bf00      	nop
 80076f2:	e7fd      	b.n	80076f0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80076f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f6:	685a      	ldr	r2, [r3, #4]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	1ad2      	subs	r2, r2, r3
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007706:	69b8      	ldr	r0, [r7, #24]
 8007708:	f000 f90a 	bl	8007920 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800770c:	4b1d      	ldr	r3, [pc, #116]	@ (8007784 <pvPortMalloc+0x18c>)
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	4a1b      	ldr	r2, [pc, #108]	@ (8007784 <pvPortMalloc+0x18c>)
 8007718:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800771a:	4b1a      	ldr	r3, [pc, #104]	@ (8007784 <pvPortMalloc+0x18c>)
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	4b1b      	ldr	r3, [pc, #108]	@ (800778c <pvPortMalloc+0x194>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	429a      	cmp	r2, r3
 8007724:	d203      	bcs.n	800772e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007726:	4b17      	ldr	r3, [pc, #92]	@ (8007784 <pvPortMalloc+0x18c>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a18      	ldr	r2, [pc, #96]	@ (800778c <pvPortMalloc+0x194>)
 800772c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800772e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007730:	685a      	ldr	r2, [r3, #4]
 8007732:	4b13      	ldr	r3, [pc, #76]	@ (8007780 <pvPortMalloc+0x188>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	431a      	orrs	r2, r3
 8007738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800773c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773e:	2200      	movs	r2, #0
 8007740:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007742:	4b13      	ldr	r3, [pc, #76]	@ (8007790 <pvPortMalloc+0x198>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3301      	adds	r3, #1
 8007748:	4a11      	ldr	r2, [pc, #68]	@ (8007790 <pvPortMalloc+0x198>)
 800774a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800774c:	f7ff fa50 	bl	8006bf0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	f003 0307 	and.w	r3, r3, #7
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00b      	beq.n	8007772 <pvPortMalloc+0x17a>
	__asm volatile
 800775a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	60fb      	str	r3, [r7, #12]
}
 800776c:	bf00      	nop
 800776e:	bf00      	nop
 8007770:	e7fd      	b.n	800776e <pvPortMalloc+0x176>
	return pvReturn;
 8007772:	69fb      	ldr	r3, [r7, #28]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3728      	adds	r7, #40	@ 0x28
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	20001328 	.word	0x20001328
 8007780:	2000133c 	.word	0x2000133c
 8007784:	2000132c 	.word	0x2000132c
 8007788:	20001320 	.word	0x20001320
 800778c:	20001330 	.word	0x20001330
 8007790:	20001334 	.word	0x20001334

08007794 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d04f      	beq.n	8007846 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80077a6:	2308      	movs	r3, #8
 80077a8:	425b      	negs	r3, r3
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	4413      	add	r3, r2
 80077ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	4b25      	ldr	r3, [pc, #148]	@ (8007850 <vPortFree+0xbc>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4013      	ands	r3, r2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d10b      	bne.n	80077da <vPortFree+0x46>
	__asm volatile
 80077c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	60fb      	str	r3, [r7, #12]
}
 80077d4:	bf00      	nop
 80077d6:	bf00      	nop
 80077d8:	e7fd      	b.n	80077d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00b      	beq.n	80077fa <vPortFree+0x66>
	__asm volatile
 80077e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	60bb      	str	r3, [r7, #8]
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop
 80077f8:	e7fd      	b.n	80077f6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	4b14      	ldr	r3, [pc, #80]	@ (8007850 <vPortFree+0xbc>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4013      	ands	r3, r2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d01e      	beq.n	8007846 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d11a      	bne.n	8007846 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	4b0e      	ldr	r3, [pc, #56]	@ (8007850 <vPortFree+0xbc>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	43db      	mvns	r3, r3
 800781a:	401a      	ands	r2, r3
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007820:	f7ff f9d8 	bl	8006bd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	4b0a      	ldr	r3, [pc, #40]	@ (8007854 <vPortFree+0xc0>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4413      	add	r3, r2
 800782e:	4a09      	ldr	r2, [pc, #36]	@ (8007854 <vPortFree+0xc0>)
 8007830:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007832:	6938      	ldr	r0, [r7, #16]
 8007834:	f000 f874 	bl	8007920 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007838:	4b07      	ldr	r3, [pc, #28]	@ (8007858 <vPortFree+0xc4>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3301      	adds	r3, #1
 800783e:	4a06      	ldr	r2, [pc, #24]	@ (8007858 <vPortFree+0xc4>)
 8007840:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007842:	f7ff f9d5 	bl	8006bf0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007846:	bf00      	nop
 8007848:	3718      	adds	r7, #24
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	2000133c 	.word	0x2000133c
 8007854:	2000132c 	.word	0x2000132c
 8007858:	20001338 	.word	0x20001338

0800785c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007862:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007866:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007868:	4b27      	ldr	r3, [pc, #156]	@ (8007908 <prvHeapInit+0xac>)
 800786a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f003 0307 	and.w	r3, r3, #7
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00c      	beq.n	8007890 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3307      	adds	r3, #7
 800787a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f023 0307 	bic.w	r3, r3, #7
 8007882:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	4a1f      	ldr	r2, [pc, #124]	@ (8007908 <prvHeapInit+0xac>)
 800788c:	4413      	add	r3, r2
 800788e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007894:	4a1d      	ldr	r2, [pc, #116]	@ (800790c <prvHeapInit+0xb0>)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800789a:	4b1c      	ldr	r3, [pc, #112]	@ (800790c <prvHeapInit+0xb0>)
 800789c:	2200      	movs	r2, #0
 800789e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	4413      	add	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80078a8:	2208      	movs	r2, #8
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	1a9b      	subs	r3, r3, r2
 80078ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f023 0307 	bic.w	r3, r3, #7
 80078b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	4a15      	ldr	r2, [pc, #84]	@ (8007910 <prvHeapInit+0xb4>)
 80078bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80078be:	4b14      	ldr	r3, [pc, #80]	@ (8007910 <prvHeapInit+0xb4>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2200      	movs	r2, #0
 80078c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80078c6:	4b12      	ldr	r3, [pc, #72]	@ (8007910 <prvHeapInit+0xb4>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2200      	movs	r2, #0
 80078cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	1ad2      	subs	r2, r2, r3
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007910 <prvHeapInit+0xb4>)
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	4a0a      	ldr	r2, [pc, #40]	@ (8007914 <prvHeapInit+0xb8>)
 80078ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	4a09      	ldr	r2, [pc, #36]	@ (8007918 <prvHeapInit+0xbc>)
 80078f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078f4:	4b09      	ldr	r3, [pc, #36]	@ (800791c <prvHeapInit+0xc0>)
 80078f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80078fa:	601a      	str	r2, [r3, #0]
}
 80078fc:	bf00      	nop
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	20000768 	.word	0x20000768
 800790c:	20001320 	.word	0x20001320
 8007910:	20001328 	.word	0x20001328
 8007914:	20001330 	.word	0x20001330
 8007918:	2000132c 	.word	0x2000132c
 800791c:	2000133c 	.word	0x2000133c

08007920 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007928:	4b28      	ldr	r3, [pc, #160]	@ (80079cc <prvInsertBlockIntoFreeList+0xac>)
 800792a:	60fb      	str	r3, [r7, #12]
 800792c:	e002      	b.n	8007934 <prvInsertBlockIntoFreeList+0x14>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	429a      	cmp	r2, r3
 800793c:	d8f7      	bhi.n	800792e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	4413      	add	r3, r2
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	429a      	cmp	r2, r3
 800794e:	d108      	bne.n	8007962 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	441a      	add	r2, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	441a      	add	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	429a      	cmp	r2, r3
 8007974:	d118      	bne.n	80079a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	4b15      	ldr	r3, [pc, #84]	@ (80079d0 <prvInsertBlockIntoFreeList+0xb0>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	429a      	cmp	r2, r3
 8007980:	d00d      	beq.n	800799e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	441a      	add	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	601a      	str	r2, [r3, #0]
 800799c:	e008      	b.n	80079b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800799e:	4b0c      	ldr	r3, [pc, #48]	@ (80079d0 <prvInsertBlockIntoFreeList+0xb0>)
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	e003      	b.n	80079b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d002      	beq.n	80079be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079be:	bf00      	nop
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	20001320 	.word	0x20001320
 80079d0:	20001328 	.word	0x20001328

080079d4 <std>:
 80079d4:	2300      	movs	r3, #0
 80079d6:	b510      	push	{r4, lr}
 80079d8:	4604      	mov	r4, r0
 80079da:	e9c0 3300 	strd	r3, r3, [r0]
 80079de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079e2:	6083      	str	r3, [r0, #8]
 80079e4:	8181      	strh	r1, [r0, #12]
 80079e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80079e8:	81c2      	strh	r2, [r0, #14]
 80079ea:	6183      	str	r3, [r0, #24]
 80079ec:	4619      	mov	r1, r3
 80079ee:	2208      	movs	r2, #8
 80079f0:	305c      	adds	r0, #92	@ 0x5c
 80079f2:	f000 f93a 	bl	8007c6a <memset>
 80079f6:	4b0d      	ldr	r3, [pc, #52]	@ (8007a2c <std+0x58>)
 80079f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80079fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007a30 <std+0x5c>)
 80079fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80079fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007a34 <std+0x60>)
 8007a00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a02:	4b0d      	ldr	r3, [pc, #52]	@ (8007a38 <std+0x64>)
 8007a04:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a06:	4b0d      	ldr	r3, [pc, #52]	@ (8007a3c <std+0x68>)
 8007a08:	6224      	str	r4, [r4, #32]
 8007a0a:	429c      	cmp	r4, r3
 8007a0c:	d006      	beq.n	8007a1c <std+0x48>
 8007a0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a12:	4294      	cmp	r4, r2
 8007a14:	d002      	beq.n	8007a1c <std+0x48>
 8007a16:	33d0      	adds	r3, #208	@ 0xd0
 8007a18:	429c      	cmp	r4, r3
 8007a1a:	d105      	bne.n	8007a28 <std+0x54>
 8007a1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a24:	f000 b99a 	b.w	8007d5c <__retarget_lock_init_recursive>
 8007a28:	bd10      	pop	{r4, pc}
 8007a2a:	bf00      	nop
 8007a2c:	08007be5 	.word	0x08007be5
 8007a30:	08007c07 	.word	0x08007c07
 8007a34:	08007c3f 	.word	0x08007c3f
 8007a38:	08007c63 	.word	0x08007c63
 8007a3c:	20001340 	.word	0x20001340

08007a40 <stdio_exit_handler>:
 8007a40:	4a02      	ldr	r2, [pc, #8]	@ (8007a4c <stdio_exit_handler+0xc>)
 8007a42:	4903      	ldr	r1, [pc, #12]	@ (8007a50 <stdio_exit_handler+0x10>)
 8007a44:	4803      	ldr	r0, [pc, #12]	@ (8007a54 <stdio_exit_handler+0x14>)
 8007a46:	f000 b869 	b.w	8007b1c <_fwalk_sglue>
 8007a4a:	bf00      	nop
 8007a4c:	20000150 	.word	0x20000150
 8007a50:	080088c9 	.word	0x080088c9
 8007a54:	20000160 	.word	0x20000160

08007a58 <cleanup_stdio>:
 8007a58:	6841      	ldr	r1, [r0, #4]
 8007a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8007a8c <cleanup_stdio+0x34>)
 8007a5c:	4299      	cmp	r1, r3
 8007a5e:	b510      	push	{r4, lr}
 8007a60:	4604      	mov	r4, r0
 8007a62:	d001      	beq.n	8007a68 <cleanup_stdio+0x10>
 8007a64:	f000 ff30 	bl	80088c8 <_fflush_r>
 8007a68:	68a1      	ldr	r1, [r4, #8]
 8007a6a:	4b09      	ldr	r3, [pc, #36]	@ (8007a90 <cleanup_stdio+0x38>)
 8007a6c:	4299      	cmp	r1, r3
 8007a6e:	d002      	beq.n	8007a76 <cleanup_stdio+0x1e>
 8007a70:	4620      	mov	r0, r4
 8007a72:	f000 ff29 	bl	80088c8 <_fflush_r>
 8007a76:	68e1      	ldr	r1, [r4, #12]
 8007a78:	4b06      	ldr	r3, [pc, #24]	@ (8007a94 <cleanup_stdio+0x3c>)
 8007a7a:	4299      	cmp	r1, r3
 8007a7c:	d004      	beq.n	8007a88 <cleanup_stdio+0x30>
 8007a7e:	4620      	mov	r0, r4
 8007a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a84:	f000 bf20 	b.w	80088c8 <_fflush_r>
 8007a88:	bd10      	pop	{r4, pc}
 8007a8a:	bf00      	nop
 8007a8c:	20001340 	.word	0x20001340
 8007a90:	200013a8 	.word	0x200013a8
 8007a94:	20001410 	.word	0x20001410

08007a98 <global_stdio_init.part.0>:
 8007a98:	b510      	push	{r4, lr}
 8007a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac8 <global_stdio_init.part.0+0x30>)
 8007a9c:	4c0b      	ldr	r4, [pc, #44]	@ (8007acc <global_stdio_init.part.0+0x34>)
 8007a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8007ad0 <global_stdio_init.part.0+0x38>)
 8007aa0:	601a      	str	r2, [r3, #0]
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	2104      	movs	r1, #4
 8007aa8:	f7ff ff94 	bl	80079d4 <std>
 8007aac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	2109      	movs	r1, #9
 8007ab4:	f7ff ff8e 	bl	80079d4 <std>
 8007ab8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007abc:	2202      	movs	r2, #2
 8007abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ac2:	2112      	movs	r1, #18
 8007ac4:	f7ff bf86 	b.w	80079d4 <std>
 8007ac8:	20001478 	.word	0x20001478
 8007acc:	20001340 	.word	0x20001340
 8007ad0:	08007a41 	.word	0x08007a41

08007ad4 <__sfp_lock_acquire>:
 8007ad4:	4801      	ldr	r0, [pc, #4]	@ (8007adc <__sfp_lock_acquire+0x8>)
 8007ad6:	f000 b942 	b.w	8007d5e <__retarget_lock_acquire_recursive>
 8007ada:	bf00      	nop
 8007adc:	20001481 	.word	0x20001481

08007ae0 <__sfp_lock_release>:
 8007ae0:	4801      	ldr	r0, [pc, #4]	@ (8007ae8 <__sfp_lock_release+0x8>)
 8007ae2:	f000 b93d 	b.w	8007d60 <__retarget_lock_release_recursive>
 8007ae6:	bf00      	nop
 8007ae8:	20001481 	.word	0x20001481

08007aec <__sinit>:
 8007aec:	b510      	push	{r4, lr}
 8007aee:	4604      	mov	r4, r0
 8007af0:	f7ff fff0 	bl	8007ad4 <__sfp_lock_acquire>
 8007af4:	6a23      	ldr	r3, [r4, #32]
 8007af6:	b11b      	cbz	r3, 8007b00 <__sinit+0x14>
 8007af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007afc:	f7ff bff0 	b.w	8007ae0 <__sfp_lock_release>
 8007b00:	4b04      	ldr	r3, [pc, #16]	@ (8007b14 <__sinit+0x28>)
 8007b02:	6223      	str	r3, [r4, #32]
 8007b04:	4b04      	ldr	r3, [pc, #16]	@ (8007b18 <__sinit+0x2c>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1f5      	bne.n	8007af8 <__sinit+0xc>
 8007b0c:	f7ff ffc4 	bl	8007a98 <global_stdio_init.part.0>
 8007b10:	e7f2      	b.n	8007af8 <__sinit+0xc>
 8007b12:	bf00      	nop
 8007b14:	08007a59 	.word	0x08007a59
 8007b18:	20001478 	.word	0x20001478

08007b1c <_fwalk_sglue>:
 8007b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b20:	4607      	mov	r7, r0
 8007b22:	4688      	mov	r8, r1
 8007b24:	4614      	mov	r4, r2
 8007b26:	2600      	movs	r6, #0
 8007b28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b2c:	f1b9 0901 	subs.w	r9, r9, #1
 8007b30:	d505      	bpl.n	8007b3e <_fwalk_sglue+0x22>
 8007b32:	6824      	ldr	r4, [r4, #0]
 8007b34:	2c00      	cmp	r4, #0
 8007b36:	d1f7      	bne.n	8007b28 <_fwalk_sglue+0xc>
 8007b38:	4630      	mov	r0, r6
 8007b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b3e:	89ab      	ldrh	r3, [r5, #12]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d907      	bls.n	8007b54 <_fwalk_sglue+0x38>
 8007b44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	d003      	beq.n	8007b54 <_fwalk_sglue+0x38>
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	4638      	mov	r0, r7
 8007b50:	47c0      	blx	r8
 8007b52:	4306      	orrs	r6, r0
 8007b54:	3568      	adds	r5, #104	@ 0x68
 8007b56:	e7e9      	b.n	8007b2c <_fwalk_sglue+0x10>

08007b58 <iprintf>:
 8007b58:	b40f      	push	{r0, r1, r2, r3}
 8007b5a:	b507      	push	{r0, r1, r2, lr}
 8007b5c:	4906      	ldr	r1, [pc, #24]	@ (8007b78 <iprintf+0x20>)
 8007b5e:	ab04      	add	r3, sp, #16
 8007b60:	6808      	ldr	r0, [r1, #0]
 8007b62:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b66:	6881      	ldr	r1, [r0, #8]
 8007b68:	9301      	str	r3, [sp, #4]
 8007b6a:	f000 fb83 	bl	8008274 <_vfiprintf_r>
 8007b6e:	b003      	add	sp, #12
 8007b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b74:	b004      	add	sp, #16
 8007b76:	4770      	bx	lr
 8007b78:	2000015c 	.word	0x2000015c

08007b7c <sniprintf>:
 8007b7c:	b40c      	push	{r2, r3}
 8007b7e:	b530      	push	{r4, r5, lr}
 8007b80:	4b17      	ldr	r3, [pc, #92]	@ (8007be0 <sniprintf+0x64>)
 8007b82:	1e0c      	subs	r4, r1, #0
 8007b84:	681d      	ldr	r5, [r3, #0]
 8007b86:	b09d      	sub	sp, #116	@ 0x74
 8007b88:	da08      	bge.n	8007b9c <sniprintf+0x20>
 8007b8a:	238b      	movs	r3, #139	@ 0x8b
 8007b8c:	602b      	str	r3, [r5, #0]
 8007b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b92:	b01d      	add	sp, #116	@ 0x74
 8007b94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b98:	b002      	add	sp, #8
 8007b9a:	4770      	bx	lr
 8007b9c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007ba0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007ba4:	bf14      	ite	ne
 8007ba6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007baa:	4623      	moveq	r3, r4
 8007bac:	9304      	str	r3, [sp, #16]
 8007bae:	9307      	str	r3, [sp, #28]
 8007bb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007bb4:	9002      	str	r0, [sp, #8]
 8007bb6:	9006      	str	r0, [sp, #24]
 8007bb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007bbc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007bbe:	ab21      	add	r3, sp, #132	@ 0x84
 8007bc0:	a902      	add	r1, sp, #8
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	9301      	str	r3, [sp, #4]
 8007bc6:	f000 fa2f 	bl	8008028 <_svfiprintf_r>
 8007bca:	1c43      	adds	r3, r0, #1
 8007bcc:	bfbc      	itt	lt
 8007bce:	238b      	movlt	r3, #139	@ 0x8b
 8007bd0:	602b      	strlt	r3, [r5, #0]
 8007bd2:	2c00      	cmp	r4, #0
 8007bd4:	d0dd      	beq.n	8007b92 <sniprintf+0x16>
 8007bd6:	9b02      	ldr	r3, [sp, #8]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	701a      	strb	r2, [r3, #0]
 8007bdc:	e7d9      	b.n	8007b92 <sniprintf+0x16>
 8007bde:	bf00      	nop
 8007be0:	2000015c 	.word	0x2000015c

08007be4 <__sread>:
 8007be4:	b510      	push	{r4, lr}
 8007be6:	460c      	mov	r4, r1
 8007be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bec:	f000 f868 	bl	8007cc0 <_read_r>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	bfab      	itete	ge
 8007bf4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007bf6:	89a3      	ldrhlt	r3, [r4, #12]
 8007bf8:	181b      	addge	r3, r3, r0
 8007bfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007bfe:	bfac      	ite	ge
 8007c00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c02:	81a3      	strhlt	r3, [r4, #12]
 8007c04:	bd10      	pop	{r4, pc}

08007c06 <__swrite>:
 8007c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0a:	461f      	mov	r7, r3
 8007c0c:	898b      	ldrh	r3, [r1, #12]
 8007c0e:	05db      	lsls	r3, r3, #23
 8007c10:	4605      	mov	r5, r0
 8007c12:	460c      	mov	r4, r1
 8007c14:	4616      	mov	r6, r2
 8007c16:	d505      	bpl.n	8007c24 <__swrite+0x1e>
 8007c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f000 f83c 	bl	8007c9c <_lseek_r>
 8007c24:	89a3      	ldrh	r3, [r4, #12]
 8007c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c2e:	81a3      	strh	r3, [r4, #12]
 8007c30:	4632      	mov	r2, r6
 8007c32:	463b      	mov	r3, r7
 8007c34:	4628      	mov	r0, r5
 8007c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c3a:	f000 b853 	b.w	8007ce4 <_write_r>

08007c3e <__sseek>:
 8007c3e:	b510      	push	{r4, lr}
 8007c40:	460c      	mov	r4, r1
 8007c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c46:	f000 f829 	bl	8007c9c <_lseek_r>
 8007c4a:	1c43      	adds	r3, r0, #1
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	bf15      	itete	ne
 8007c50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c5a:	81a3      	strheq	r3, [r4, #12]
 8007c5c:	bf18      	it	ne
 8007c5e:	81a3      	strhne	r3, [r4, #12]
 8007c60:	bd10      	pop	{r4, pc}

08007c62 <__sclose>:
 8007c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c66:	f000 b809 	b.w	8007c7c <_close_r>

08007c6a <memset>:
 8007c6a:	4402      	add	r2, r0
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d100      	bne.n	8007c74 <memset+0xa>
 8007c72:	4770      	bx	lr
 8007c74:	f803 1b01 	strb.w	r1, [r3], #1
 8007c78:	e7f9      	b.n	8007c6e <memset+0x4>
	...

08007c7c <_close_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	4d06      	ldr	r5, [pc, #24]	@ (8007c98 <_close_r+0x1c>)
 8007c80:	2300      	movs	r3, #0
 8007c82:	4604      	mov	r4, r0
 8007c84:	4608      	mov	r0, r1
 8007c86:	602b      	str	r3, [r5, #0]
 8007c88:	f7f9 faa1 	bl	80011ce <_close>
 8007c8c:	1c43      	adds	r3, r0, #1
 8007c8e:	d102      	bne.n	8007c96 <_close_r+0x1a>
 8007c90:	682b      	ldr	r3, [r5, #0]
 8007c92:	b103      	cbz	r3, 8007c96 <_close_r+0x1a>
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	2000147c 	.word	0x2000147c

08007c9c <_lseek_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	4d07      	ldr	r5, [pc, #28]	@ (8007cbc <_lseek_r+0x20>)
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	4608      	mov	r0, r1
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	602a      	str	r2, [r5, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	f7f9 fab6 	bl	800121c <_lseek>
 8007cb0:	1c43      	adds	r3, r0, #1
 8007cb2:	d102      	bne.n	8007cba <_lseek_r+0x1e>
 8007cb4:	682b      	ldr	r3, [r5, #0]
 8007cb6:	b103      	cbz	r3, 8007cba <_lseek_r+0x1e>
 8007cb8:	6023      	str	r3, [r4, #0]
 8007cba:	bd38      	pop	{r3, r4, r5, pc}
 8007cbc:	2000147c 	.word	0x2000147c

08007cc0 <_read_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	4d07      	ldr	r5, [pc, #28]	@ (8007ce0 <_read_r+0x20>)
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	4608      	mov	r0, r1
 8007cc8:	4611      	mov	r1, r2
 8007cca:	2200      	movs	r2, #0
 8007ccc:	602a      	str	r2, [r5, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	f7f9 fa44 	bl	800115c <_read>
 8007cd4:	1c43      	adds	r3, r0, #1
 8007cd6:	d102      	bne.n	8007cde <_read_r+0x1e>
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	b103      	cbz	r3, 8007cde <_read_r+0x1e>
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
 8007ce0:	2000147c 	.word	0x2000147c

08007ce4 <_write_r>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	4d07      	ldr	r5, [pc, #28]	@ (8007d04 <_write_r+0x20>)
 8007ce8:	4604      	mov	r4, r0
 8007cea:	4608      	mov	r0, r1
 8007cec:	4611      	mov	r1, r2
 8007cee:	2200      	movs	r2, #0
 8007cf0:	602a      	str	r2, [r5, #0]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f7f9 fa4f 	bl	8001196 <_write>
 8007cf8:	1c43      	adds	r3, r0, #1
 8007cfa:	d102      	bne.n	8007d02 <_write_r+0x1e>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	b103      	cbz	r3, 8007d02 <_write_r+0x1e>
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
 8007d04:	2000147c 	.word	0x2000147c

08007d08 <__errno>:
 8007d08:	4b01      	ldr	r3, [pc, #4]	@ (8007d10 <__errno+0x8>)
 8007d0a:	6818      	ldr	r0, [r3, #0]
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	2000015c 	.word	0x2000015c

08007d14 <__libc_init_array>:
 8007d14:	b570      	push	{r4, r5, r6, lr}
 8007d16:	4d0d      	ldr	r5, [pc, #52]	@ (8007d4c <__libc_init_array+0x38>)
 8007d18:	4c0d      	ldr	r4, [pc, #52]	@ (8007d50 <__libc_init_array+0x3c>)
 8007d1a:	1b64      	subs	r4, r4, r5
 8007d1c:	10a4      	asrs	r4, r4, #2
 8007d1e:	2600      	movs	r6, #0
 8007d20:	42a6      	cmp	r6, r4
 8007d22:	d109      	bne.n	8007d38 <__libc_init_array+0x24>
 8007d24:	4d0b      	ldr	r5, [pc, #44]	@ (8007d54 <__libc_init_array+0x40>)
 8007d26:	4c0c      	ldr	r4, [pc, #48]	@ (8007d58 <__libc_init_array+0x44>)
 8007d28:	f000 ff6e 	bl	8008c08 <_init>
 8007d2c:	1b64      	subs	r4, r4, r5
 8007d2e:	10a4      	asrs	r4, r4, #2
 8007d30:	2600      	movs	r6, #0
 8007d32:	42a6      	cmp	r6, r4
 8007d34:	d105      	bne.n	8007d42 <__libc_init_array+0x2e>
 8007d36:	bd70      	pop	{r4, r5, r6, pc}
 8007d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d3c:	4798      	blx	r3
 8007d3e:	3601      	adds	r6, #1
 8007d40:	e7ee      	b.n	8007d20 <__libc_init_array+0xc>
 8007d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d46:	4798      	blx	r3
 8007d48:	3601      	adds	r6, #1
 8007d4a:	e7f2      	b.n	8007d32 <__libc_init_array+0x1e>
 8007d4c:	08008e74 	.word	0x08008e74
 8007d50:	08008e74 	.word	0x08008e74
 8007d54:	08008e74 	.word	0x08008e74
 8007d58:	08008e78 	.word	0x08008e78

08007d5c <__retarget_lock_init_recursive>:
 8007d5c:	4770      	bx	lr

08007d5e <__retarget_lock_acquire_recursive>:
 8007d5e:	4770      	bx	lr

08007d60 <__retarget_lock_release_recursive>:
 8007d60:	4770      	bx	lr

08007d62 <memcpy>:
 8007d62:	440a      	add	r2, r1
 8007d64:	4291      	cmp	r1, r2
 8007d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d6a:	d100      	bne.n	8007d6e <memcpy+0xc>
 8007d6c:	4770      	bx	lr
 8007d6e:	b510      	push	{r4, lr}
 8007d70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d78:	4291      	cmp	r1, r2
 8007d7a:	d1f9      	bne.n	8007d70 <memcpy+0xe>
 8007d7c:	bd10      	pop	{r4, pc}
	...

08007d80 <_free_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4605      	mov	r5, r0
 8007d84:	2900      	cmp	r1, #0
 8007d86:	d041      	beq.n	8007e0c <_free_r+0x8c>
 8007d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d8c:	1f0c      	subs	r4, r1, #4
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	bfb8      	it	lt
 8007d92:	18e4      	addlt	r4, r4, r3
 8007d94:	f000 f8e0 	bl	8007f58 <__malloc_lock>
 8007d98:	4a1d      	ldr	r2, [pc, #116]	@ (8007e10 <_free_r+0x90>)
 8007d9a:	6813      	ldr	r3, [r2, #0]
 8007d9c:	b933      	cbnz	r3, 8007dac <_free_r+0x2c>
 8007d9e:	6063      	str	r3, [r4, #4]
 8007da0:	6014      	str	r4, [r2, #0]
 8007da2:	4628      	mov	r0, r5
 8007da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007da8:	f000 b8dc 	b.w	8007f64 <__malloc_unlock>
 8007dac:	42a3      	cmp	r3, r4
 8007dae:	d908      	bls.n	8007dc2 <_free_r+0x42>
 8007db0:	6820      	ldr	r0, [r4, #0]
 8007db2:	1821      	adds	r1, r4, r0
 8007db4:	428b      	cmp	r3, r1
 8007db6:	bf01      	itttt	eq
 8007db8:	6819      	ldreq	r1, [r3, #0]
 8007dba:	685b      	ldreq	r3, [r3, #4]
 8007dbc:	1809      	addeq	r1, r1, r0
 8007dbe:	6021      	streq	r1, [r4, #0]
 8007dc0:	e7ed      	b.n	8007d9e <_free_r+0x1e>
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	b10b      	cbz	r3, 8007dcc <_free_r+0x4c>
 8007dc8:	42a3      	cmp	r3, r4
 8007dca:	d9fa      	bls.n	8007dc2 <_free_r+0x42>
 8007dcc:	6811      	ldr	r1, [r2, #0]
 8007dce:	1850      	adds	r0, r2, r1
 8007dd0:	42a0      	cmp	r0, r4
 8007dd2:	d10b      	bne.n	8007dec <_free_r+0x6c>
 8007dd4:	6820      	ldr	r0, [r4, #0]
 8007dd6:	4401      	add	r1, r0
 8007dd8:	1850      	adds	r0, r2, r1
 8007dda:	4283      	cmp	r3, r0
 8007ddc:	6011      	str	r1, [r2, #0]
 8007dde:	d1e0      	bne.n	8007da2 <_free_r+0x22>
 8007de0:	6818      	ldr	r0, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	6053      	str	r3, [r2, #4]
 8007de6:	4408      	add	r0, r1
 8007de8:	6010      	str	r0, [r2, #0]
 8007dea:	e7da      	b.n	8007da2 <_free_r+0x22>
 8007dec:	d902      	bls.n	8007df4 <_free_r+0x74>
 8007dee:	230c      	movs	r3, #12
 8007df0:	602b      	str	r3, [r5, #0]
 8007df2:	e7d6      	b.n	8007da2 <_free_r+0x22>
 8007df4:	6820      	ldr	r0, [r4, #0]
 8007df6:	1821      	adds	r1, r4, r0
 8007df8:	428b      	cmp	r3, r1
 8007dfa:	bf04      	itt	eq
 8007dfc:	6819      	ldreq	r1, [r3, #0]
 8007dfe:	685b      	ldreq	r3, [r3, #4]
 8007e00:	6063      	str	r3, [r4, #4]
 8007e02:	bf04      	itt	eq
 8007e04:	1809      	addeq	r1, r1, r0
 8007e06:	6021      	streq	r1, [r4, #0]
 8007e08:	6054      	str	r4, [r2, #4]
 8007e0a:	e7ca      	b.n	8007da2 <_free_r+0x22>
 8007e0c:	bd38      	pop	{r3, r4, r5, pc}
 8007e0e:	bf00      	nop
 8007e10:	20001488 	.word	0x20001488

08007e14 <sbrk_aligned>:
 8007e14:	b570      	push	{r4, r5, r6, lr}
 8007e16:	4e0f      	ldr	r6, [pc, #60]	@ (8007e54 <sbrk_aligned+0x40>)
 8007e18:	460c      	mov	r4, r1
 8007e1a:	6831      	ldr	r1, [r6, #0]
 8007e1c:	4605      	mov	r5, r0
 8007e1e:	b911      	cbnz	r1, 8007e26 <sbrk_aligned+0x12>
 8007e20:	f000 fe28 	bl	8008a74 <_sbrk_r>
 8007e24:	6030      	str	r0, [r6, #0]
 8007e26:	4621      	mov	r1, r4
 8007e28:	4628      	mov	r0, r5
 8007e2a:	f000 fe23 	bl	8008a74 <_sbrk_r>
 8007e2e:	1c43      	adds	r3, r0, #1
 8007e30:	d103      	bne.n	8007e3a <sbrk_aligned+0x26>
 8007e32:	f04f 34ff 	mov.w	r4, #4294967295
 8007e36:	4620      	mov	r0, r4
 8007e38:	bd70      	pop	{r4, r5, r6, pc}
 8007e3a:	1cc4      	adds	r4, r0, #3
 8007e3c:	f024 0403 	bic.w	r4, r4, #3
 8007e40:	42a0      	cmp	r0, r4
 8007e42:	d0f8      	beq.n	8007e36 <sbrk_aligned+0x22>
 8007e44:	1a21      	subs	r1, r4, r0
 8007e46:	4628      	mov	r0, r5
 8007e48:	f000 fe14 	bl	8008a74 <_sbrk_r>
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d1f2      	bne.n	8007e36 <sbrk_aligned+0x22>
 8007e50:	e7ef      	b.n	8007e32 <sbrk_aligned+0x1e>
 8007e52:	bf00      	nop
 8007e54:	20001484 	.word	0x20001484

08007e58 <_malloc_r>:
 8007e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e5c:	1ccd      	adds	r5, r1, #3
 8007e5e:	f025 0503 	bic.w	r5, r5, #3
 8007e62:	3508      	adds	r5, #8
 8007e64:	2d0c      	cmp	r5, #12
 8007e66:	bf38      	it	cc
 8007e68:	250c      	movcc	r5, #12
 8007e6a:	2d00      	cmp	r5, #0
 8007e6c:	4606      	mov	r6, r0
 8007e6e:	db01      	blt.n	8007e74 <_malloc_r+0x1c>
 8007e70:	42a9      	cmp	r1, r5
 8007e72:	d904      	bls.n	8007e7e <_malloc_r+0x26>
 8007e74:	230c      	movs	r3, #12
 8007e76:	6033      	str	r3, [r6, #0]
 8007e78:	2000      	movs	r0, #0
 8007e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f54 <_malloc_r+0xfc>
 8007e82:	f000 f869 	bl	8007f58 <__malloc_lock>
 8007e86:	f8d8 3000 	ldr.w	r3, [r8]
 8007e8a:	461c      	mov	r4, r3
 8007e8c:	bb44      	cbnz	r4, 8007ee0 <_malloc_r+0x88>
 8007e8e:	4629      	mov	r1, r5
 8007e90:	4630      	mov	r0, r6
 8007e92:	f7ff ffbf 	bl	8007e14 <sbrk_aligned>
 8007e96:	1c43      	adds	r3, r0, #1
 8007e98:	4604      	mov	r4, r0
 8007e9a:	d158      	bne.n	8007f4e <_malloc_r+0xf6>
 8007e9c:	f8d8 4000 	ldr.w	r4, [r8]
 8007ea0:	4627      	mov	r7, r4
 8007ea2:	2f00      	cmp	r7, #0
 8007ea4:	d143      	bne.n	8007f2e <_malloc_r+0xd6>
 8007ea6:	2c00      	cmp	r4, #0
 8007ea8:	d04b      	beq.n	8007f42 <_malloc_r+0xea>
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	4639      	mov	r1, r7
 8007eae:	4630      	mov	r0, r6
 8007eb0:	eb04 0903 	add.w	r9, r4, r3
 8007eb4:	f000 fdde 	bl	8008a74 <_sbrk_r>
 8007eb8:	4581      	cmp	r9, r0
 8007eba:	d142      	bne.n	8007f42 <_malloc_r+0xea>
 8007ebc:	6821      	ldr	r1, [r4, #0]
 8007ebe:	1a6d      	subs	r5, r5, r1
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f7ff ffa6 	bl	8007e14 <sbrk_aligned>
 8007ec8:	3001      	adds	r0, #1
 8007eca:	d03a      	beq.n	8007f42 <_malloc_r+0xea>
 8007ecc:	6823      	ldr	r3, [r4, #0]
 8007ece:	442b      	add	r3, r5
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	bb62      	cbnz	r2, 8007f34 <_malloc_r+0xdc>
 8007eda:	f8c8 7000 	str.w	r7, [r8]
 8007ede:	e00f      	b.n	8007f00 <_malloc_r+0xa8>
 8007ee0:	6822      	ldr	r2, [r4, #0]
 8007ee2:	1b52      	subs	r2, r2, r5
 8007ee4:	d420      	bmi.n	8007f28 <_malloc_r+0xd0>
 8007ee6:	2a0b      	cmp	r2, #11
 8007ee8:	d917      	bls.n	8007f1a <_malloc_r+0xc2>
 8007eea:	1961      	adds	r1, r4, r5
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	6025      	str	r5, [r4, #0]
 8007ef0:	bf18      	it	ne
 8007ef2:	6059      	strne	r1, [r3, #4]
 8007ef4:	6863      	ldr	r3, [r4, #4]
 8007ef6:	bf08      	it	eq
 8007ef8:	f8c8 1000 	streq.w	r1, [r8]
 8007efc:	5162      	str	r2, [r4, r5]
 8007efe:	604b      	str	r3, [r1, #4]
 8007f00:	4630      	mov	r0, r6
 8007f02:	f000 f82f 	bl	8007f64 <__malloc_unlock>
 8007f06:	f104 000b 	add.w	r0, r4, #11
 8007f0a:	1d23      	adds	r3, r4, #4
 8007f0c:	f020 0007 	bic.w	r0, r0, #7
 8007f10:	1ac2      	subs	r2, r0, r3
 8007f12:	bf1c      	itt	ne
 8007f14:	1a1b      	subne	r3, r3, r0
 8007f16:	50a3      	strne	r3, [r4, r2]
 8007f18:	e7af      	b.n	8007e7a <_malloc_r+0x22>
 8007f1a:	6862      	ldr	r2, [r4, #4]
 8007f1c:	42a3      	cmp	r3, r4
 8007f1e:	bf0c      	ite	eq
 8007f20:	f8c8 2000 	streq.w	r2, [r8]
 8007f24:	605a      	strne	r2, [r3, #4]
 8007f26:	e7eb      	b.n	8007f00 <_malloc_r+0xa8>
 8007f28:	4623      	mov	r3, r4
 8007f2a:	6864      	ldr	r4, [r4, #4]
 8007f2c:	e7ae      	b.n	8007e8c <_malloc_r+0x34>
 8007f2e:	463c      	mov	r4, r7
 8007f30:	687f      	ldr	r7, [r7, #4]
 8007f32:	e7b6      	b.n	8007ea2 <_malloc_r+0x4a>
 8007f34:	461a      	mov	r2, r3
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	42a3      	cmp	r3, r4
 8007f3a:	d1fb      	bne.n	8007f34 <_malloc_r+0xdc>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	6053      	str	r3, [r2, #4]
 8007f40:	e7de      	b.n	8007f00 <_malloc_r+0xa8>
 8007f42:	230c      	movs	r3, #12
 8007f44:	6033      	str	r3, [r6, #0]
 8007f46:	4630      	mov	r0, r6
 8007f48:	f000 f80c 	bl	8007f64 <__malloc_unlock>
 8007f4c:	e794      	b.n	8007e78 <_malloc_r+0x20>
 8007f4e:	6005      	str	r5, [r0, #0]
 8007f50:	e7d6      	b.n	8007f00 <_malloc_r+0xa8>
 8007f52:	bf00      	nop
 8007f54:	20001488 	.word	0x20001488

08007f58 <__malloc_lock>:
 8007f58:	4801      	ldr	r0, [pc, #4]	@ (8007f60 <__malloc_lock+0x8>)
 8007f5a:	f7ff bf00 	b.w	8007d5e <__retarget_lock_acquire_recursive>
 8007f5e:	bf00      	nop
 8007f60:	20001480 	.word	0x20001480

08007f64 <__malloc_unlock>:
 8007f64:	4801      	ldr	r0, [pc, #4]	@ (8007f6c <__malloc_unlock+0x8>)
 8007f66:	f7ff befb 	b.w	8007d60 <__retarget_lock_release_recursive>
 8007f6a:	bf00      	nop
 8007f6c:	20001480 	.word	0x20001480

08007f70 <__ssputs_r>:
 8007f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f74:	688e      	ldr	r6, [r1, #8]
 8007f76:	461f      	mov	r7, r3
 8007f78:	42be      	cmp	r6, r7
 8007f7a:	680b      	ldr	r3, [r1, #0]
 8007f7c:	4682      	mov	sl, r0
 8007f7e:	460c      	mov	r4, r1
 8007f80:	4690      	mov	r8, r2
 8007f82:	d82d      	bhi.n	8007fe0 <__ssputs_r+0x70>
 8007f84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f8c:	d026      	beq.n	8007fdc <__ssputs_r+0x6c>
 8007f8e:	6965      	ldr	r5, [r4, #20]
 8007f90:	6909      	ldr	r1, [r1, #16]
 8007f92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f96:	eba3 0901 	sub.w	r9, r3, r1
 8007f9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f9e:	1c7b      	adds	r3, r7, #1
 8007fa0:	444b      	add	r3, r9
 8007fa2:	106d      	asrs	r5, r5, #1
 8007fa4:	429d      	cmp	r5, r3
 8007fa6:	bf38      	it	cc
 8007fa8:	461d      	movcc	r5, r3
 8007faa:	0553      	lsls	r3, r2, #21
 8007fac:	d527      	bpl.n	8007ffe <__ssputs_r+0x8e>
 8007fae:	4629      	mov	r1, r5
 8007fb0:	f7ff ff52 	bl	8007e58 <_malloc_r>
 8007fb4:	4606      	mov	r6, r0
 8007fb6:	b360      	cbz	r0, 8008012 <__ssputs_r+0xa2>
 8007fb8:	6921      	ldr	r1, [r4, #16]
 8007fba:	464a      	mov	r2, r9
 8007fbc:	f7ff fed1 	bl	8007d62 <memcpy>
 8007fc0:	89a3      	ldrh	r3, [r4, #12]
 8007fc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fca:	81a3      	strh	r3, [r4, #12]
 8007fcc:	6126      	str	r6, [r4, #16]
 8007fce:	6165      	str	r5, [r4, #20]
 8007fd0:	444e      	add	r6, r9
 8007fd2:	eba5 0509 	sub.w	r5, r5, r9
 8007fd6:	6026      	str	r6, [r4, #0]
 8007fd8:	60a5      	str	r5, [r4, #8]
 8007fda:	463e      	mov	r6, r7
 8007fdc:	42be      	cmp	r6, r7
 8007fde:	d900      	bls.n	8007fe2 <__ssputs_r+0x72>
 8007fe0:	463e      	mov	r6, r7
 8007fe2:	6820      	ldr	r0, [r4, #0]
 8007fe4:	4632      	mov	r2, r6
 8007fe6:	4641      	mov	r1, r8
 8007fe8:	f000 fd2a 	bl	8008a40 <memmove>
 8007fec:	68a3      	ldr	r3, [r4, #8]
 8007fee:	1b9b      	subs	r3, r3, r6
 8007ff0:	60a3      	str	r3, [r4, #8]
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	4433      	add	r3, r6
 8007ff6:	6023      	str	r3, [r4, #0]
 8007ff8:	2000      	movs	r0, #0
 8007ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ffe:	462a      	mov	r2, r5
 8008000:	f000 fd48 	bl	8008a94 <_realloc_r>
 8008004:	4606      	mov	r6, r0
 8008006:	2800      	cmp	r0, #0
 8008008:	d1e0      	bne.n	8007fcc <__ssputs_r+0x5c>
 800800a:	6921      	ldr	r1, [r4, #16]
 800800c:	4650      	mov	r0, sl
 800800e:	f7ff feb7 	bl	8007d80 <_free_r>
 8008012:	230c      	movs	r3, #12
 8008014:	f8ca 3000 	str.w	r3, [sl]
 8008018:	89a3      	ldrh	r3, [r4, #12]
 800801a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800801e:	81a3      	strh	r3, [r4, #12]
 8008020:	f04f 30ff 	mov.w	r0, #4294967295
 8008024:	e7e9      	b.n	8007ffa <__ssputs_r+0x8a>
	...

08008028 <_svfiprintf_r>:
 8008028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800802c:	4698      	mov	r8, r3
 800802e:	898b      	ldrh	r3, [r1, #12]
 8008030:	061b      	lsls	r3, r3, #24
 8008032:	b09d      	sub	sp, #116	@ 0x74
 8008034:	4607      	mov	r7, r0
 8008036:	460d      	mov	r5, r1
 8008038:	4614      	mov	r4, r2
 800803a:	d510      	bpl.n	800805e <_svfiprintf_r+0x36>
 800803c:	690b      	ldr	r3, [r1, #16]
 800803e:	b973      	cbnz	r3, 800805e <_svfiprintf_r+0x36>
 8008040:	2140      	movs	r1, #64	@ 0x40
 8008042:	f7ff ff09 	bl	8007e58 <_malloc_r>
 8008046:	6028      	str	r0, [r5, #0]
 8008048:	6128      	str	r0, [r5, #16]
 800804a:	b930      	cbnz	r0, 800805a <_svfiprintf_r+0x32>
 800804c:	230c      	movs	r3, #12
 800804e:	603b      	str	r3, [r7, #0]
 8008050:	f04f 30ff 	mov.w	r0, #4294967295
 8008054:	b01d      	add	sp, #116	@ 0x74
 8008056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800805a:	2340      	movs	r3, #64	@ 0x40
 800805c:	616b      	str	r3, [r5, #20]
 800805e:	2300      	movs	r3, #0
 8008060:	9309      	str	r3, [sp, #36]	@ 0x24
 8008062:	2320      	movs	r3, #32
 8008064:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008068:	f8cd 800c 	str.w	r8, [sp, #12]
 800806c:	2330      	movs	r3, #48	@ 0x30
 800806e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800820c <_svfiprintf_r+0x1e4>
 8008072:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008076:	f04f 0901 	mov.w	r9, #1
 800807a:	4623      	mov	r3, r4
 800807c:	469a      	mov	sl, r3
 800807e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008082:	b10a      	cbz	r2, 8008088 <_svfiprintf_r+0x60>
 8008084:	2a25      	cmp	r2, #37	@ 0x25
 8008086:	d1f9      	bne.n	800807c <_svfiprintf_r+0x54>
 8008088:	ebba 0b04 	subs.w	fp, sl, r4
 800808c:	d00b      	beq.n	80080a6 <_svfiprintf_r+0x7e>
 800808e:	465b      	mov	r3, fp
 8008090:	4622      	mov	r2, r4
 8008092:	4629      	mov	r1, r5
 8008094:	4638      	mov	r0, r7
 8008096:	f7ff ff6b 	bl	8007f70 <__ssputs_r>
 800809a:	3001      	adds	r0, #1
 800809c:	f000 80a7 	beq.w	80081ee <_svfiprintf_r+0x1c6>
 80080a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080a2:	445a      	add	r2, fp
 80080a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80080a6:	f89a 3000 	ldrb.w	r3, [sl]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 809f 	beq.w	80081ee <_svfiprintf_r+0x1c6>
 80080b0:	2300      	movs	r3, #0
 80080b2:	f04f 32ff 	mov.w	r2, #4294967295
 80080b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080ba:	f10a 0a01 	add.w	sl, sl, #1
 80080be:	9304      	str	r3, [sp, #16]
 80080c0:	9307      	str	r3, [sp, #28]
 80080c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80080c8:	4654      	mov	r4, sl
 80080ca:	2205      	movs	r2, #5
 80080cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080d0:	484e      	ldr	r0, [pc, #312]	@ (800820c <_svfiprintf_r+0x1e4>)
 80080d2:	f7f8 f895 	bl	8000200 <memchr>
 80080d6:	9a04      	ldr	r2, [sp, #16]
 80080d8:	b9d8      	cbnz	r0, 8008112 <_svfiprintf_r+0xea>
 80080da:	06d0      	lsls	r0, r2, #27
 80080dc:	bf44      	itt	mi
 80080de:	2320      	movmi	r3, #32
 80080e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080e4:	0711      	lsls	r1, r2, #28
 80080e6:	bf44      	itt	mi
 80080e8:	232b      	movmi	r3, #43	@ 0x2b
 80080ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080ee:	f89a 3000 	ldrb.w	r3, [sl]
 80080f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80080f4:	d015      	beq.n	8008122 <_svfiprintf_r+0xfa>
 80080f6:	9a07      	ldr	r2, [sp, #28]
 80080f8:	4654      	mov	r4, sl
 80080fa:	2000      	movs	r0, #0
 80080fc:	f04f 0c0a 	mov.w	ip, #10
 8008100:	4621      	mov	r1, r4
 8008102:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008106:	3b30      	subs	r3, #48	@ 0x30
 8008108:	2b09      	cmp	r3, #9
 800810a:	d94b      	bls.n	80081a4 <_svfiprintf_r+0x17c>
 800810c:	b1b0      	cbz	r0, 800813c <_svfiprintf_r+0x114>
 800810e:	9207      	str	r2, [sp, #28]
 8008110:	e014      	b.n	800813c <_svfiprintf_r+0x114>
 8008112:	eba0 0308 	sub.w	r3, r0, r8
 8008116:	fa09 f303 	lsl.w	r3, r9, r3
 800811a:	4313      	orrs	r3, r2
 800811c:	9304      	str	r3, [sp, #16]
 800811e:	46a2      	mov	sl, r4
 8008120:	e7d2      	b.n	80080c8 <_svfiprintf_r+0xa0>
 8008122:	9b03      	ldr	r3, [sp, #12]
 8008124:	1d19      	adds	r1, r3, #4
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	9103      	str	r1, [sp, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	bfbb      	ittet	lt
 800812e:	425b      	neglt	r3, r3
 8008130:	f042 0202 	orrlt.w	r2, r2, #2
 8008134:	9307      	strge	r3, [sp, #28]
 8008136:	9307      	strlt	r3, [sp, #28]
 8008138:	bfb8      	it	lt
 800813a:	9204      	strlt	r2, [sp, #16]
 800813c:	7823      	ldrb	r3, [r4, #0]
 800813e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008140:	d10a      	bne.n	8008158 <_svfiprintf_r+0x130>
 8008142:	7863      	ldrb	r3, [r4, #1]
 8008144:	2b2a      	cmp	r3, #42	@ 0x2a
 8008146:	d132      	bne.n	80081ae <_svfiprintf_r+0x186>
 8008148:	9b03      	ldr	r3, [sp, #12]
 800814a:	1d1a      	adds	r2, r3, #4
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	9203      	str	r2, [sp, #12]
 8008150:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008154:	3402      	adds	r4, #2
 8008156:	9305      	str	r3, [sp, #20]
 8008158:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800821c <_svfiprintf_r+0x1f4>
 800815c:	7821      	ldrb	r1, [r4, #0]
 800815e:	2203      	movs	r2, #3
 8008160:	4650      	mov	r0, sl
 8008162:	f7f8 f84d 	bl	8000200 <memchr>
 8008166:	b138      	cbz	r0, 8008178 <_svfiprintf_r+0x150>
 8008168:	9b04      	ldr	r3, [sp, #16]
 800816a:	eba0 000a 	sub.w	r0, r0, sl
 800816e:	2240      	movs	r2, #64	@ 0x40
 8008170:	4082      	lsls	r2, r0
 8008172:	4313      	orrs	r3, r2
 8008174:	3401      	adds	r4, #1
 8008176:	9304      	str	r3, [sp, #16]
 8008178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800817c:	4824      	ldr	r0, [pc, #144]	@ (8008210 <_svfiprintf_r+0x1e8>)
 800817e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008182:	2206      	movs	r2, #6
 8008184:	f7f8 f83c 	bl	8000200 <memchr>
 8008188:	2800      	cmp	r0, #0
 800818a:	d036      	beq.n	80081fa <_svfiprintf_r+0x1d2>
 800818c:	4b21      	ldr	r3, [pc, #132]	@ (8008214 <_svfiprintf_r+0x1ec>)
 800818e:	bb1b      	cbnz	r3, 80081d8 <_svfiprintf_r+0x1b0>
 8008190:	9b03      	ldr	r3, [sp, #12]
 8008192:	3307      	adds	r3, #7
 8008194:	f023 0307 	bic.w	r3, r3, #7
 8008198:	3308      	adds	r3, #8
 800819a:	9303      	str	r3, [sp, #12]
 800819c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800819e:	4433      	add	r3, r6
 80081a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80081a2:	e76a      	b.n	800807a <_svfiprintf_r+0x52>
 80081a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80081a8:	460c      	mov	r4, r1
 80081aa:	2001      	movs	r0, #1
 80081ac:	e7a8      	b.n	8008100 <_svfiprintf_r+0xd8>
 80081ae:	2300      	movs	r3, #0
 80081b0:	3401      	adds	r4, #1
 80081b2:	9305      	str	r3, [sp, #20]
 80081b4:	4619      	mov	r1, r3
 80081b6:	f04f 0c0a 	mov.w	ip, #10
 80081ba:	4620      	mov	r0, r4
 80081bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081c0:	3a30      	subs	r2, #48	@ 0x30
 80081c2:	2a09      	cmp	r2, #9
 80081c4:	d903      	bls.n	80081ce <_svfiprintf_r+0x1a6>
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d0c6      	beq.n	8008158 <_svfiprintf_r+0x130>
 80081ca:	9105      	str	r1, [sp, #20]
 80081cc:	e7c4      	b.n	8008158 <_svfiprintf_r+0x130>
 80081ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80081d2:	4604      	mov	r4, r0
 80081d4:	2301      	movs	r3, #1
 80081d6:	e7f0      	b.n	80081ba <_svfiprintf_r+0x192>
 80081d8:	ab03      	add	r3, sp, #12
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	462a      	mov	r2, r5
 80081de:	4b0e      	ldr	r3, [pc, #56]	@ (8008218 <_svfiprintf_r+0x1f0>)
 80081e0:	a904      	add	r1, sp, #16
 80081e2:	4638      	mov	r0, r7
 80081e4:	f3af 8000 	nop.w
 80081e8:	1c42      	adds	r2, r0, #1
 80081ea:	4606      	mov	r6, r0
 80081ec:	d1d6      	bne.n	800819c <_svfiprintf_r+0x174>
 80081ee:	89ab      	ldrh	r3, [r5, #12]
 80081f0:	065b      	lsls	r3, r3, #25
 80081f2:	f53f af2d 	bmi.w	8008050 <_svfiprintf_r+0x28>
 80081f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081f8:	e72c      	b.n	8008054 <_svfiprintf_r+0x2c>
 80081fa:	ab03      	add	r3, sp, #12
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	462a      	mov	r2, r5
 8008200:	4b05      	ldr	r3, [pc, #20]	@ (8008218 <_svfiprintf_r+0x1f0>)
 8008202:	a904      	add	r1, sp, #16
 8008204:	4638      	mov	r0, r7
 8008206:	f000 f9bb 	bl	8008580 <_printf_i>
 800820a:	e7ed      	b.n	80081e8 <_svfiprintf_r+0x1c0>
 800820c:	08008e38 	.word	0x08008e38
 8008210:	08008e42 	.word	0x08008e42
 8008214:	00000000 	.word	0x00000000
 8008218:	08007f71 	.word	0x08007f71
 800821c:	08008e3e 	.word	0x08008e3e

08008220 <__sfputc_r>:
 8008220:	6893      	ldr	r3, [r2, #8]
 8008222:	3b01      	subs	r3, #1
 8008224:	2b00      	cmp	r3, #0
 8008226:	b410      	push	{r4}
 8008228:	6093      	str	r3, [r2, #8]
 800822a:	da08      	bge.n	800823e <__sfputc_r+0x1e>
 800822c:	6994      	ldr	r4, [r2, #24]
 800822e:	42a3      	cmp	r3, r4
 8008230:	db01      	blt.n	8008236 <__sfputc_r+0x16>
 8008232:	290a      	cmp	r1, #10
 8008234:	d103      	bne.n	800823e <__sfputc_r+0x1e>
 8008236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800823a:	f000 bb6d 	b.w	8008918 <__swbuf_r>
 800823e:	6813      	ldr	r3, [r2, #0]
 8008240:	1c58      	adds	r0, r3, #1
 8008242:	6010      	str	r0, [r2, #0]
 8008244:	7019      	strb	r1, [r3, #0]
 8008246:	4608      	mov	r0, r1
 8008248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800824c:	4770      	bx	lr

0800824e <__sfputs_r>:
 800824e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008250:	4606      	mov	r6, r0
 8008252:	460f      	mov	r7, r1
 8008254:	4614      	mov	r4, r2
 8008256:	18d5      	adds	r5, r2, r3
 8008258:	42ac      	cmp	r4, r5
 800825a:	d101      	bne.n	8008260 <__sfputs_r+0x12>
 800825c:	2000      	movs	r0, #0
 800825e:	e007      	b.n	8008270 <__sfputs_r+0x22>
 8008260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008264:	463a      	mov	r2, r7
 8008266:	4630      	mov	r0, r6
 8008268:	f7ff ffda 	bl	8008220 <__sfputc_r>
 800826c:	1c43      	adds	r3, r0, #1
 800826e:	d1f3      	bne.n	8008258 <__sfputs_r+0xa>
 8008270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008274 <_vfiprintf_r>:
 8008274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008278:	460d      	mov	r5, r1
 800827a:	b09d      	sub	sp, #116	@ 0x74
 800827c:	4614      	mov	r4, r2
 800827e:	4698      	mov	r8, r3
 8008280:	4606      	mov	r6, r0
 8008282:	b118      	cbz	r0, 800828c <_vfiprintf_r+0x18>
 8008284:	6a03      	ldr	r3, [r0, #32]
 8008286:	b90b      	cbnz	r3, 800828c <_vfiprintf_r+0x18>
 8008288:	f7ff fc30 	bl	8007aec <__sinit>
 800828c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800828e:	07d9      	lsls	r1, r3, #31
 8008290:	d405      	bmi.n	800829e <_vfiprintf_r+0x2a>
 8008292:	89ab      	ldrh	r3, [r5, #12]
 8008294:	059a      	lsls	r2, r3, #22
 8008296:	d402      	bmi.n	800829e <_vfiprintf_r+0x2a>
 8008298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800829a:	f7ff fd60 	bl	8007d5e <__retarget_lock_acquire_recursive>
 800829e:	89ab      	ldrh	r3, [r5, #12]
 80082a0:	071b      	lsls	r3, r3, #28
 80082a2:	d501      	bpl.n	80082a8 <_vfiprintf_r+0x34>
 80082a4:	692b      	ldr	r3, [r5, #16]
 80082a6:	b99b      	cbnz	r3, 80082d0 <_vfiprintf_r+0x5c>
 80082a8:	4629      	mov	r1, r5
 80082aa:	4630      	mov	r0, r6
 80082ac:	f000 fb72 	bl	8008994 <__swsetup_r>
 80082b0:	b170      	cbz	r0, 80082d0 <_vfiprintf_r+0x5c>
 80082b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082b4:	07dc      	lsls	r4, r3, #31
 80082b6:	d504      	bpl.n	80082c2 <_vfiprintf_r+0x4e>
 80082b8:	f04f 30ff 	mov.w	r0, #4294967295
 80082bc:	b01d      	add	sp, #116	@ 0x74
 80082be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c2:	89ab      	ldrh	r3, [r5, #12]
 80082c4:	0598      	lsls	r0, r3, #22
 80082c6:	d4f7      	bmi.n	80082b8 <_vfiprintf_r+0x44>
 80082c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082ca:	f7ff fd49 	bl	8007d60 <__retarget_lock_release_recursive>
 80082ce:	e7f3      	b.n	80082b8 <_vfiprintf_r+0x44>
 80082d0:	2300      	movs	r3, #0
 80082d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80082d4:	2320      	movs	r3, #32
 80082d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80082da:	f8cd 800c 	str.w	r8, [sp, #12]
 80082de:	2330      	movs	r3, #48	@ 0x30
 80082e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008490 <_vfiprintf_r+0x21c>
 80082e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80082e8:	f04f 0901 	mov.w	r9, #1
 80082ec:	4623      	mov	r3, r4
 80082ee:	469a      	mov	sl, r3
 80082f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082f4:	b10a      	cbz	r2, 80082fa <_vfiprintf_r+0x86>
 80082f6:	2a25      	cmp	r2, #37	@ 0x25
 80082f8:	d1f9      	bne.n	80082ee <_vfiprintf_r+0x7a>
 80082fa:	ebba 0b04 	subs.w	fp, sl, r4
 80082fe:	d00b      	beq.n	8008318 <_vfiprintf_r+0xa4>
 8008300:	465b      	mov	r3, fp
 8008302:	4622      	mov	r2, r4
 8008304:	4629      	mov	r1, r5
 8008306:	4630      	mov	r0, r6
 8008308:	f7ff ffa1 	bl	800824e <__sfputs_r>
 800830c:	3001      	adds	r0, #1
 800830e:	f000 80a7 	beq.w	8008460 <_vfiprintf_r+0x1ec>
 8008312:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008314:	445a      	add	r2, fp
 8008316:	9209      	str	r2, [sp, #36]	@ 0x24
 8008318:	f89a 3000 	ldrb.w	r3, [sl]
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 809f 	beq.w	8008460 <_vfiprintf_r+0x1ec>
 8008322:	2300      	movs	r3, #0
 8008324:	f04f 32ff 	mov.w	r2, #4294967295
 8008328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800832c:	f10a 0a01 	add.w	sl, sl, #1
 8008330:	9304      	str	r3, [sp, #16]
 8008332:	9307      	str	r3, [sp, #28]
 8008334:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008338:	931a      	str	r3, [sp, #104]	@ 0x68
 800833a:	4654      	mov	r4, sl
 800833c:	2205      	movs	r2, #5
 800833e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008342:	4853      	ldr	r0, [pc, #332]	@ (8008490 <_vfiprintf_r+0x21c>)
 8008344:	f7f7 ff5c 	bl	8000200 <memchr>
 8008348:	9a04      	ldr	r2, [sp, #16]
 800834a:	b9d8      	cbnz	r0, 8008384 <_vfiprintf_r+0x110>
 800834c:	06d1      	lsls	r1, r2, #27
 800834e:	bf44      	itt	mi
 8008350:	2320      	movmi	r3, #32
 8008352:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008356:	0713      	lsls	r3, r2, #28
 8008358:	bf44      	itt	mi
 800835a:	232b      	movmi	r3, #43	@ 0x2b
 800835c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008360:	f89a 3000 	ldrb.w	r3, [sl]
 8008364:	2b2a      	cmp	r3, #42	@ 0x2a
 8008366:	d015      	beq.n	8008394 <_vfiprintf_r+0x120>
 8008368:	9a07      	ldr	r2, [sp, #28]
 800836a:	4654      	mov	r4, sl
 800836c:	2000      	movs	r0, #0
 800836e:	f04f 0c0a 	mov.w	ip, #10
 8008372:	4621      	mov	r1, r4
 8008374:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008378:	3b30      	subs	r3, #48	@ 0x30
 800837a:	2b09      	cmp	r3, #9
 800837c:	d94b      	bls.n	8008416 <_vfiprintf_r+0x1a2>
 800837e:	b1b0      	cbz	r0, 80083ae <_vfiprintf_r+0x13a>
 8008380:	9207      	str	r2, [sp, #28]
 8008382:	e014      	b.n	80083ae <_vfiprintf_r+0x13a>
 8008384:	eba0 0308 	sub.w	r3, r0, r8
 8008388:	fa09 f303 	lsl.w	r3, r9, r3
 800838c:	4313      	orrs	r3, r2
 800838e:	9304      	str	r3, [sp, #16]
 8008390:	46a2      	mov	sl, r4
 8008392:	e7d2      	b.n	800833a <_vfiprintf_r+0xc6>
 8008394:	9b03      	ldr	r3, [sp, #12]
 8008396:	1d19      	adds	r1, r3, #4
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	9103      	str	r1, [sp, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	bfbb      	ittet	lt
 80083a0:	425b      	neglt	r3, r3
 80083a2:	f042 0202 	orrlt.w	r2, r2, #2
 80083a6:	9307      	strge	r3, [sp, #28]
 80083a8:	9307      	strlt	r3, [sp, #28]
 80083aa:	bfb8      	it	lt
 80083ac:	9204      	strlt	r2, [sp, #16]
 80083ae:	7823      	ldrb	r3, [r4, #0]
 80083b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80083b2:	d10a      	bne.n	80083ca <_vfiprintf_r+0x156>
 80083b4:	7863      	ldrb	r3, [r4, #1]
 80083b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80083b8:	d132      	bne.n	8008420 <_vfiprintf_r+0x1ac>
 80083ba:	9b03      	ldr	r3, [sp, #12]
 80083bc:	1d1a      	adds	r2, r3, #4
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	9203      	str	r2, [sp, #12]
 80083c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083c6:	3402      	adds	r4, #2
 80083c8:	9305      	str	r3, [sp, #20]
 80083ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80084a0 <_vfiprintf_r+0x22c>
 80083ce:	7821      	ldrb	r1, [r4, #0]
 80083d0:	2203      	movs	r2, #3
 80083d2:	4650      	mov	r0, sl
 80083d4:	f7f7 ff14 	bl	8000200 <memchr>
 80083d8:	b138      	cbz	r0, 80083ea <_vfiprintf_r+0x176>
 80083da:	9b04      	ldr	r3, [sp, #16]
 80083dc:	eba0 000a 	sub.w	r0, r0, sl
 80083e0:	2240      	movs	r2, #64	@ 0x40
 80083e2:	4082      	lsls	r2, r0
 80083e4:	4313      	orrs	r3, r2
 80083e6:	3401      	adds	r4, #1
 80083e8:	9304      	str	r3, [sp, #16]
 80083ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083ee:	4829      	ldr	r0, [pc, #164]	@ (8008494 <_vfiprintf_r+0x220>)
 80083f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80083f4:	2206      	movs	r2, #6
 80083f6:	f7f7 ff03 	bl	8000200 <memchr>
 80083fa:	2800      	cmp	r0, #0
 80083fc:	d03f      	beq.n	800847e <_vfiprintf_r+0x20a>
 80083fe:	4b26      	ldr	r3, [pc, #152]	@ (8008498 <_vfiprintf_r+0x224>)
 8008400:	bb1b      	cbnz	r3, 800844a <_vfiprintf_r+0x1d6>
 8008402:	9b03      	ldr	r3, [sp, #12]
 8008404:	3307      	adds	r3, #7
 8008406:	f023 0307 	bic.w	r3, r3, #7
 800840a:	3308      	adds	r3, #8
 800840c:	9303      	str	r3, [sp, #12]
 800840e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008410:	443b      	add	r3, r7
 8008412:	9309      	str	r3, [sp, #36]	@ 0x24
 8008414:	e76a      	b.n	80082ec <_vfiprintf_r+0x78>
 8008416:	fb0c 3202 	mla	r2, ip, r2, r3
 800841a:	460c      	mov	r4, r1
 800841c:	2001      	movs	r0, #1
 800841e:	e7a8      	b.n	8008372 <_vfiprintf_r+0xfe>
 8008420:	2300      	movs	r3, #0
 8008422:	3401      	adds	r4, #1
 8008424:	9305      	str	r3, [sp, #20]
 8008426:	4619      	mov	r1, r3
 8008428:	f04f 0c0a 	mov.w	ip, #10
 800842c:	4620      	mov	r0, r4
 800842e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008432:	3a30      	subs	r2, #48	@ 0x30
 8008434:	2a09      	cmp	r2, #9
 8008436:	d903      	bls.n	8008440 <_vfiprintf_r+0x1cc>
 8008438:	2b00      	cmp	r3, #0
 800843a:	d0c6      	beq.n	80083ca <_vfiprintf_r+0x156>
 800843c:	9105      	str	r1, [sp, #20]
 800843e:	e7c4      	b.n	80083ca <_vfiprintf_r+0x156>
 8008440:	fb0c 2101 	mla	r1, ip, r1, r2
 8008444:	4604      	mov	r4, r0
 8008446:	2301      	movs	r3, #1
 8008448:	e7f0      	b.n	800842c <_vfiprintf_r+0x1b8>
 800844a:	ab03      	add	r3, sp, #12
 800844c:	9300      	str	r3, [sp, #0]
 800844e:	462a      	mov	r2, r5
 8008450:	4b12      	ldr	r3, [pc, #72]	@ (800849c <_vfiprintf_r+0x228>)
 8008452:	a904      	add	r1, sp, #16
 8008454:	4630      	mov	r0, r6
 8008456:	f3af 8000 	nop.w
 800845a:	4607      	mov	r7, r0
 800845c:	1c78      	adds	r0, r7, #1
 800845e:	d1d6      	bne.n	800840e <_vfiprintf_r+0x19a>
 8008460:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008462:	07d9      	lsls	r1, r3, #31
 8008464:	d405      	bmi.n	8008472 <_vfiprintf_r+0x1fe>
 8008466:	89ab      	ldrh	r3, [r5, #12]
 8008468:	059a      	lsls	r2, r3, #22
 800846a:	d402      	bmi.n	8008472 <_vfiprintf_r+0x1fe>
 800846c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800846e:	f7ff fc77 	bl	8007d60 <__retarget_lock_release_recursive>
 8008472:	89ab      	ldrh	r3, [r5, #12]
 8008474:	065b      	lsls	r3, r3, #25
 8008476:	f53f af1f 	bmi.w	80082b8 <_vfiprintf_r+0x44>
 800847a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800847c:	e71e      	b.n	80082bc <_vfiprintf_r+0x48>
 800847e:	ab03      	add	r3, sp, #12
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	462a      	mov	r2, r5
 8008484:	4b05      	ldr	r3, [pc, #20]	@ (800849c <_vfiprintf_r+0x228>)
 8008486:	a904      	add	r1, sp, #16
 8008488:	4630      	mov	r0, r6
 800848a:	f000 f879 	bl	8008580 <_printf_i>
 800848e:	e7e4      	b.n	800845a <_vfiprintf_r+0x1e6>
 8008490:	08008e38 	.word	0x08008e38
 8008494:	08008e42 	.word	0x08008e42
 8008498:	00000000 	.word	0x00000000
 800849c:	0800824f 	.word	0x0800824f
 80084a0:	08008e3e 	.word	0x08008e3e

080084a4 <_printf_common>:
 80084a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084a8:	4616      	mov	r6, r2
 80084aa:	4698      	mov	r8, r3
 80084ac:	688a      	ldr	r2, [r1, #8]
 80084ae:	690b      	ldr	r3, [r1, #16]
 80084b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084b4:	4293      	cmp	r3, r2
 80084b6:	bfb8      	it	lt
 80084b8:	4613      	movlt	r3, r2
 80084ba:	6033      	str	r3, [r6, #0]
 80084bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80084c0:	4607      	mov	r7, r0
 80084c2:	460c      	mov	r4, r1
 80084c4:	b10a      	cbz	r2, 80084ca <_printf_common+0x26>
 80084c6:	3301      	adds	r3, #1
 80084c8:	6033      	str	r3, [r6, #0]
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	0699      	lsls	r1, r3, #26
 80084ce:	bf42      	ittt	mi
 80084d0:	6833      	ldrmi	r3, [r6, #0]
 80084d2:	3302      	addmi	r3, #2
 80084d4:	6033      	strmi	r3, [r6, #0]
 80084d6:	6825      	ldr	r5, [r4, #0]
 80084d8:	f015 0506 	ands.w	r5, r5, #6
 80084dc:	d106      	bne.n	80084ec <_printf_common+0x48>
 80084de:	f104 0a19 	add.w	sl, r4, #25
 80084e2:	68e3      	ldr	r3, [r4, #12]
 80084e4:	6832      	ldr	r2, [r6, #0]
 80084e6:	1a9b      	subs	r3, r3, r2
 80084e8:	42ab      	cmp	r3, r5
 80084ea:	dc26      	bgt.n	800853a <_printf_common+0x96>
 80084ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80084f0:	6822      	ldr	r2, [r4, #0]
 80084f2:	3b00      	subs	r3, #0
 80084f4:	bf18      	it	ne
 80084f6:	2301      	movne	r3, #1
 80084f8:	0692      	lsls	r2, r2, #26
 80084fa:	d42b      	bmi.n	8008554 <_printf_common+0xb0>
 80084fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008500:	4641      	mov	r1, r8
 8008502:	4638      	mov	r0, r7
 8008504:	47c8      	blx	r9
 8008506:	3001      	adds	r0, #1
 8008508:	d01e      	beq.n	8008548 <_printf_common+0xa4>
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	6922      	ldr	r2, [r4, #16]
 800850e:	f003 0306 	and.w	r3, r3, #6
 8008512:	2b04      	cmp	r3, #4
 8008514:	bf02      	ittt	eq
 8008516:	68e5      	ldreq	r5, [r4, #12]
 8008518:	6833      	ldreq	r3, [r6, #0]
 800851a:	1aed      	subeq	r5, r5, r3
 800851c:	68a3      	ldr	r3, [r4, #8]
 800851e:	bf0c      	ite	eq
 8008520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008524:	2500      	movne	r5, #0
 8008526:	4293      	cmp	r3, r2
 8008528:	bfc4      	itt	gt
 800852a:	1a9b      	subgt	r3, r3, r2
 800852c:	18ed      	addgt	r5, r5, r3
 800852e:	2600      	movs	r6, #0
 8008530:	341a      	adds	r4, #26
 8008532:	42b5      	cmp	r5, r6
 8008534:	d11a      	bne.n	800856c <_printf_common+0xc8>
 8008536:	2000      	movs	r0, #0
 8008538:	e008      	b.n	800854c <_printf_common+0xa8>
 800853a:	2301      	movs	r3, #1
 800853c:	4652      	mov	r2, sl
 800853e:	4641      	mov	r1, r8
 8008540:	4638      	mov	r0, r7
 8008542:	47c8      	blx	r9
 8008544:	3001      	adds	r0, #1
 8008546:	d103      	bne.n	8008550 <_printf_common+0xac>
 8008548:	f04f 30ff 	mov.w	r0, #4294967295
 800854c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008550:	3501      	adds	r5, #1
 8008552:	e7c6      	b.n	80084e2 <_printf_common+0x3e>
 8008554:	18e1      	adds	r1, r4, r3
 8008556:	1c5a      	adds	r2, r3, #1
 8008558:	2030      	movs	r0, #48	@ 0x30
 800855a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800855e:	4422      	add	r2, r4
 8008560:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008564:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008568:	3302      	adds	r3, #2
 800856a:	e7c7      	b.n	80084fc <_printf_common+0x58>
 800856c:	2301      	movs	r3, #1
 800856e:	4622      	mov	r2, r4
 8008570:	4641      	mov	r1, r8
 8008572:	4638      	mov	r0, r7
 8008574:	47c8      	blx	r9
 8008576:	3001      	adds	r0, #1
 8008578:	d0e6      	beq.n	8008548 <_printf_common+0xa4>
 800857a:	3601      	adds	r6, #1
 800857c:	e7d9      	b.n	8008532 <_printf_common+0x8e>
	...

08008580 <_printf_i>:
 8008580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008584:	7e0f      	ldrb	r7, [r1, #24]
 8008586:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008588:	2f78      	cmp	r7, #120	@ 0x78
 800858a:	4691      	mov	r9, r2
 800858c:	4680      	mov	r8, r0
 800858e:	460c      	mov	r4, r1
 8008590:	469a      	mov	sl, r3
 8008592:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008596:	d807      	bhi.n	80085a8 <_printf_i+0x28>
 8008598:	2f62      	cmp	r7, #98	@ 0x62
 800859a:	d80a      	bhi.n	80085b2 <_printf_i+0x32>
 800859c:	2f00      	cmp	r7, #0
 800859e:	f000 80d2 	beq.w	8008746 <_printf_i+0x1c6>
 80085a2:	2f58      	cmp	r7, #88	@ 0x58
 80085a4:	f000 80b9 	beq.w	800871a <_printf_i+0x19a>
 80085a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085b0:	e03a      	b.n	8008628 <_printf_i+0xa8>
 80085b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085b6:	2b15      	cmp	r3, #21
 80085b8:	d8f6      	bhi.n	80085a8 <_printf_i+0x28>
 80085ba:	a101      	add	r1, pc, #4	@ (adr r1, 80085c0 <_printf_i+0x40>)
 80085bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085c0:	08008619 	.word	0x08008619
 80085c4:	0800862d 	.word	0x0800862d
 80085c8:	080085a9 	.word	0x080085a9
 80085cc:	080085a9 	.word	0x080085a9
 80085d0:	080085a9 	.word	0x080085a9
 80085d4:	080085a9 	.word	0x080085a9
 80085d8:	0800862d 	.word	0x0800862d
 80085dc:	080085a9 	.word	0x080085a9
 80085e0:	080085a9 	.word	0x080085a9
 80085e4:	080085a9 	.word	0x080085a9
 80085e8:	080085a9 	.word	0x080085a9
 80085ec:	0800872d 	.word	0x0800872d
 80085f0:	08008657 	.word	0x08008657
 80085f4:	080086e7 	.word	0x080086e7
 80085f8:	080085a9 	.word	0x080085a9
 80085fc:	080085a9 	.word	0x080085a9
 8008600:	0800874f 	.word	0x0800874f
 8008604:	080085a9 	.word	0x080085a9
 8008608:	08008657 	.word	0x08008657
 800860c:	080085a9 	.word	0x080085a9
 8008610:	080085a9 	.word	0x080085a9
 8008614:	080086ef 	.word	0x080086ef
 8008618:	6833      	ldr	r3, [r6, #0]
 800861a:	1d1a      	adds	r2, r3, #4
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	6032      	str	r2, [r6, #0]
 8008620:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008624:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008628:	2301      	movs	r3, #1
 800862a:	e09d      	b.n	8008768 <_printf_i+0x1e8>
 800862c:	6833      	ldr	r3, [r6, #0]
 800862e:	6820      	ldr	r0, [r4, #0]
 8008630:	1d19      	adds	r1, r3, #4
 8008632:	6031      	str	r1, [r6, #0]
 8008634:	0606      	lsls	r6, r0, #24
 8008636:	d501      	bpl.n	800863c <_printf_i+0xbc>
 8008638:	681d      	ldr	r5, [r3, #0]
 800863a:	e003      	b.n	8008644 <_printf_i+0xc4>
 800863c:	0645      	lsls	r5, r0, #25
 800863e:	d5fb      	bpl.n	8008638 <_printf_i+0xb8>
 8008640:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008644:	2d00      	cmp	r5, #0
 8008646:	da03      	bge.n	8008650 <_printf_i+0xd0>
 8008648:	232d      	movs	r3, #45	@ 0x2d
 800864a:	426d      	negs	r5, r5
 800864c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008650:	4859      	ldr	r0, [pc, #356]	@ (80087b8 <_printf_i+0x238>)
 8008652:	230a      	movs	r3, #10
 8008654:	e011      	b.n	800867a <_printf_i+0xfa>
 8008656:	6821      	ldr	r1, [r4, #0]
 8008658:	6833      	ldr	r3, [r6, #0]
 800865a:	0608      	lsls	r0, r1, #24
 800865c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008660:	d402      	bmi.n	8008668 <_printf_i+0xe8>
 8008662:	0649      	lsls	r1, r1, #25
 8008664:	bf48      	it	mi
 8008666:	b2ad      	uxthmi	r5, r5
 8008668:	2f6f      	cmp	r7, #111	@ 0x6f
 800866a:	4853      	ldr	r0, [pc, #332]	@ (80087b8 <_printf_i+0x238>)
 800866c:	6033      	str	r3, [r6, #0]
 800866e:	bf14      	ite	ne
 8008670:	230a      	movne	r3, #10
 8008672:	2308      	moveq	r3, #8
 8008674:	2100      	movs	r1, #0
 8008676:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800867a:	6866      	ldr	r6, [r4, #4]
 800867c:	60a6      	str	r6, [r4, #8]
 800867e:	2e00      	cmp	r6, #0
 8008680:	bfa2      	ittt	ge
 8008682:	6821      	ldrge	r1, [r4, #0]
 8008684:	f021 0104 	bicge.w	r1, r1, #4
 8008688:	6021      	strge	r1, [r4, #0]
 800868a:	b90d      	cbnz	r5, 8008690 <_printf_i+0x110>
 800868c:	2e00      	cmp	r6, #0
 800868e:	d04b      	beq.n	8008728 <_printf_i+0x1a8>
 8008690:	4616      	mov	r6, r2
 8008692:	fbb5 f1f3 	udiv	r1, r5, r3
 8008696:	fb03 5711 	mls	r7, r3, r1, r5
 800869a:	5dc7      	ldrb	r7, [r0, r7]
 800869c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086a0:	462f      	mov	r7, r5
 80086a2:	42bb      	cmp	r3, r7
 80086a4:	460d      	mov	r5, r1
 80086a6:	d9f4      	bls.n	8008692 <_printf_i+0x112>
 80086a8:	2b08      	cmp	r3, #8
 80086aa:	d10b      	bne.n	80086c4 <_printf_i+0x144>
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	07df      	lsls	r7, r3, #31
 80086b0:	d508      	bpl.n	80086c4 <_printf_i+0x144>
 80086b2:	6923      	ldr	r3, [r4, #16]
 80086b4:	6861      	ldr	r1, [r4, #4]
 80086b6:	4299      	cmp	r1, r3
 80086b8:	bfde      	ittt	le
 80086ba:	2330      	movle	r3, #48	@ 0x30
 80086bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086c4:	1b92      	subs	r2, r2, r6
 80086c6:	6122      	str	r2, [r4, #16]
 80086c8:	f8cd a000 	str.w	sl, [sp]
 80086cc:	464b      	mov	r3, r9
 80086ce:	aa03      	add	r2, sp, #12
 80086d0:	4621      	mov	r1, r4
 80086d2:	4640      	mov	r0, r8
 80086d4:	f7ff fee6 	bl	80084a4 <_printf_common>
 80086d8:	3001      	adds	r0, #1
 80086da:	d14a      	bne.n	8008772 <_printf_i+0x1f2>
 80086dc:	f04f 30ff 	mov.w	r0, #4294967295
 80086e0:	b004      	add	sp, #16
 80086e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e6:	6823      	ldr	r3, [r4, #0]
 80086e8:	f043 0320 	orr.w	r3, r3, #32
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	4833      	ldr	r0, [pc, #204]	@ (80087bc <_printf_i+0x23c>)
 80086f0:	2778      	movs	r7, #120	@ 0x78
 80086f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	6831      	ldr	r1, [r6, #0]
 80086fa:	061f      	lsls	r7, r3, #24
 80086fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8008700:	d402      	bmi.n	8008708 <_printf_i+0x188>
 8008702:	065f      	lsls	r7, r3, #25
 8008704:	bf48      	it	mi
 8008706:	b2ad      	uxthmi	r5, r5
 8008708:	6031      	str	r1, [r6, #0]
 800870a:	07d9      	lsls	r1, r3, #31
 800870c:	bf44      	itt	mi
 800870e:	f043 0320 	orrmi.w	r3, r3, #32
 8008712:	6023      	strmi	r3, [r4, #0]
 8008714:	b11d      	cbz	r5, 800871e <_printf_i+0x19e>
 8008716:	2310      	movs	r3, #16
 8008718:	e7ac      	b.n	8008674 <_printf_i+0xf4>
 800871a:	4827      	ldr	r0, [pc, #156]	@ (80087b8 <_printf_i+0x238>)
 800871c:	e7e9      	b.n	80086f2 <_printf_i+0x172>
 800871e:	6823      	ldr	r3, [r4, #0]
 8008720:	f023 0320 	bic.w	r3, r3, #32
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	e7f6      	b.n	8008716 <_printf_i+0x196>
 8008728:	4616      	mov	r6, r2
 800872a:	e7bd      	b.n	80086a8 <_printf_i+0x128>
 800872c:	6833      	ldr	r3, [r6, #0]
 800872e:	6825      	ldr	r5, [r4, #0]
 8008730:	6961      	ldr	r1, [r4, #20]
 8008732:	1d18      	adds	r0, r3, #4
 8008734:	6030      	str	r0, [r6, #0]
 8008736:	062e      	lsls	r6, r5, #24
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	d501      	bpl.n	8008740 <_printf_i+0x1c0>
 800873c:	6019      	str	r1, [r3, #0]
 800873e:	e002      	b.n	8008746 <_printf_i+0x1c6>
 8008740:	0668      	lsls	r0, r5, #25
 8008742:	d5fb      	bpl.n	800873c <_printf_i+0x1bc>
 8008744:	8019      	strh	r1, [r3, #0]
 8008746:	2300      	movs	r3, #0
 8008748:	6123      	str	r3, [r4, #16]
 800874a:	4616      	mov	r6, r2
 800874c:	e7bc      	b.n	80086c8 <_printf_i+0x148>
 800874e:	6833      	ldr	r3, [r6, #0]
 8008750:	1d1a      	adds	r2, r3, #4
 8008752:	6032      	str	r2, [r6, #0]
 8008754:	681e      	ldr	r6, [r3, #0]
 8008756:	6862      	ldr	r2, [r4, #4]
 8008758:	2100      	movs	r1, #0
 800875a:	4630      	mov	r0, r6
 800875c:	f7f7 fd50 	bl	8000200 <memchr>
 8008760:	b108      	cbz	r0, 8008766 <_printf_i+0x1e6>
 8008762:	1b80      	subs	r0, r0, r6
 8008764:	6060      	str	r0, [r4, #4]
 8008766:	6863      	ldr	r3, [r4, #4]
 8008768:	6123      	str	r3, [r4, #16]
 800876a:	2300      	movs	r3, #0
 800876c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008770:	e7aa      	b.n	80086c8 <_printf_i+0x148>
 8008772:	6923      	ldr	r3, [r4, #16]
 8008774:	4632      	mov	r2, r6
 8008776:	4649      	mov	r1, r9
 8008778:	4640      	mov	r0, r8
 800877a:	47d0      	blx	sl
 800877c:	3001      	adds	r0, #1
 800877e:	d0ad      	beq.n	80086dc <_printf_i+0x15c>
 8008780:	6823      	ldr	r3, [r4, #0]
 8008782:	079b      	lsls	r3, r3, #30
 8008784:	d413      	bmi.n	80087ae <_printf_i+0x22e>
 8008786:	68e0      	ldr	r0, [r4, #12]
 8008788:	9b03      	ldr	r3, [sp, #12]
 800878a:	4298      	cmp	r0, r3
 800878c:	bfb8      	it	lt
 800878e:	4618      	movlt	r0, r3
 8008790:	e7a6      	b.n	80086e0 <_printf_i+0x160>
 8008792:	2301      	movs	r3, #1
 8008794:	4632      	mov	r2, r6
 8008796:	4649      	mov	r1, r9
 8008798:	4640      	mov	r0, r8
 800879a:	47d0      	blx	sl
 800879c:	3001      	adds	r0, #1
 800879e:	d09d      	beq.n	80086dc <_printf_i+0x15c>
 80087a0:	3501      	adds	r5, #1
 80087a2:	68e3      	ldr	r3, [r4, #12]
 80087a4:	9903      	ldr	r1, [sp, #12]
 80087a6:	1a5b      	subs	r3, r3, r1
 80087a8:	42ab      	cmp	r3, r5
 80087aa:	dcf2      	bgt.n	8008792 <_printf_i+0x212>
 80087ac:	e7eb      	b.n	8008786 <_printf_i+0x206>
 80087ae:	2500      	movs	r5, #0
 80087b0:	f104 0619 	add.w	r6, r4, #25
 80087b4:	e7f5      	b.n	80087a2 <_printf_i+0x222>
 80087b6:	bf00      	nop
 80087b8:	08008e49 	.word	0x08008e49
 80087bc:	08008e5a 	.word	0x08008e5a

080087c0 <__sflush_r>:
 80087c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c8:	0716      	lsls	r6, r2, #28
 80087ca:	4605      	mov	r5, r0
 80087cc:	460c      	mov	r4, r1
 80087ce:	d454      	bmi.n	800887a <__sflush_r+0xba>
 80087d0:	684b      	ldr	r3, [r1, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	dc02      	bgt.n	80087dc <__sflush_r+0x1c>
 80087d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80087d8:	2b00      	cmp	r3, #0
 80087da:	dd48      	ble.n	800886e <__sflush_r+0xae>
 80087dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087de:	2e00      	cmp	r6, #0
 80087e0:	d045      	beq.n	800886e <__sflush_r+0xae>
 80087e2:	2300      	movs	r3, #0
 80087e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80087e8:	682f      	ldr	r7, [r5, #0]
 80087ea:	6a21      	ldr	r1, [r4, #32]
 80087ec:	602b      	str	r3, [r5, #0]
 80087ee:	d030      	beq.n	8008852 <__sflush_r+0x92>
 80087f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087f2:	89a3      	ldrh	r3, [r4, #12]
 80087f4:	0759      	lsls	r1, r3, #29
 80087f6:	d505      	bpl.n	8008804 <__sflush_r+0x44>
 80087f8:	6863      	ldr	r3, [r4, #4]
 80087fa:	1ad2      	subs	r2, r2, r3
 80087fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80087fe:	b10b      	cbz	r3, 8008804 <__sflush_r+0x44>
 8008800:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008802:	1ad2      	subs	r2, r2, r3
 8008804:	2300      	movs	r3, #0
 8008806:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008808:	6a21      	ldr	r1, [r4, #32]
 800880a:	4628      	mov	r0, r5
 800880c:	47b0      	blx	r6
 800880e:	1c43      	adds	r3, r0, #1
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	d106      	bne.n	8008822 <__sflush_r+0x62>
 8008814:	6829      	ldr	r1, [r5, #0]
 8008816:	291d      	cmp	r1, #29
 8008818:	d82b      	bhi.n	8008872 <__sflush_r+0xb2>
 800881a:	4a2a      	ldr	r2, [pc, #168]	@ (80088c4 <__sflush_r+0x104>)
 800881c:	410a      	asrs	r2, r1
 800881e:	07d6      	lsls	r6, r2, #31
 8008820:	d427      	bmi.n	8008872 <__sflush_r+0xb2>
 8008822:	2200      	movs	r2, #0
 8008824:	6062      	str	r2, [r4, #4]
 8008826:	04d9      	lsls	r1, r3, #19
 8008828:	6922      	ldr	r2, [r4, #16]
 800882a:	6022      	str	r2, [r4, #0]
 800882c:	d504      	bpl.n	8008838 <__sflush_r+0x78>
 800882e:	1c42      	adds	r2, r0, #1
 8008830:	d101      	bne.n	8008836 <__sflush_r+0x76>
 8008832:	682b      	ldr	r3, [r5, #0]
 8008834:	b903      	cbnz	r3, 8008838 <__sflush_r+0x78>
 8008836:	6560      	str	r0, [r4, #84]	@ 0x54
 8008838:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800883a:	602f      	str	r7, [r5, #0]
 800883c:	b1b9      	cbz	r1, 800886e <__sflush_r+0xae>
 800883e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008842:	4299      	cmp	r1, r3
 8008844:	d002      	beq.n	800884c <__sflush_r+0x8c>
 8008846:	4628      	mov	r0, r5
 8008848:	f7ff fa9a 	bl	8007d80 <_free_r>
 800884c:	2300      	movs	r3, #0
 800884e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008850:	e00d      	b.n	800886e <__sflush_r+0xae>
 8008852:	2301      	movs	r3, #1
 8008854:	4628      	mov	r0, r5
 8008856:	47b0      	blx	r6
 8008858:	4602      	mov	r2, r0
 800885a:	1c50      	adds	r0, r2, #1
 800885c:	d1c9      	bne.n	80087f2 <__sflush_r+0x32>
 800885e:	682b      	ldr	r3, [r5, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d0c6      	beq.n	80087f2 <__sflush_r+0x32>
 8008864:	2b1d      	cmp	r3, #29
 8008866:	d001      	beq.n	800886c <__sflush_r+0xac>
 8008868:	2b16      	cmp	r3, #22
 800886a:	d11e      	bne.n	80088aa <__sflush_r+0xea>
 800886c:	602f      	str	r7, [r5, #0]
 800886e:	2000      	movs	r0, #0
 8008870:	e022      	b.n	80088b8 <__sflush_r+0xf8>
 8008872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008876:	b21b      	sxth	r3, r3
 8008878:	e01b      	b.n	80088b2 <__sflush_r+0xf2>
 800887a:	690f      	ldr	r7, [r1, #16]
 800887c:	2f00      	cmp	r7, #0
 800887e:	d0f6      	beq.n	800886e <__sflush_r+0xae>
 8008880:	0793      	lsls	r3, r2, #30
 8008882:	680e      	ldr	r6, [r1, #0]
 8008884:	bf08      	it	eq
 8008886:	694b      	ldreq	r3, [r1, #20]
 8008888:	600f      	str	r7, [r1, #0]
 800888a:	bf18      	it	ne
 800888c:	2300      	movne	r3, #0
 800888e:	eba6 0807 	sub.w	r8, r6, r7
 8008892:	608b      	str	r3, [r1, #8]
 8008894:	f1b8 0f00 	cmp.w	r8, #0
 8008898:	dde9      	ble.n	800886e <__sflush_r+0xae>
 800889a:	6a21      	ldr	r1, [r4, #32]
 800889c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800889e:	4643      	mov	r3, r8
 80088a0:	463a      	mov	r2, r7
 80088a2:	4628      	mov	r0, r5
 80088a4:	47b0      	blx	r6
 80088a6:	2800      	cmp	r0, #0
 80088a8:	dc08      	bgt.n	80088bc <__sflush_r+0xfc>
 80088aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088b2:	81a3      	strh	r3, [r4, #12]
 80088b4:	f04f 30ff 	mov.w	r0, #4294967295
 80088b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088bc:	4407      	add	r7, r0
 80088be:	eba8 0800 	sub.w	r8, r8, r0
 80088c2:	e7e7      	b.n	8008894 <__sflush_r+0xd4>
 80088c4:	dfbffffe 	.word	0xdfbffffe

080088c8 <_fflush_r>:
 80088c8:	b538      	push	{r3, r4, r5, lr}
 80088ca:	690b      	ldr	r3, [r1, #16]
 80088cc:	4605      	mov	r5, r0
 80088ce:	460c      	mov	r4, r1
 80088d0:	b913      	cbnz	r3, 80088d8 <_fflush_r+0x10>
 80088d2:	2500      	movs	r5, #0
 80088d4:	4628      	mov	r0, r5
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	b118      	cbz	r0, 80088e2 <_fflush_r+0x1a>
 80088da:	6a03      	ldr	r3, [r0, #32]
 80088dc:	b90b      	cbnz	r3, 80088e2 <_fflush_r+0x1a>
 80088de:	f7ff f905 	bl	8007aec <__sinit>
 80088e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d0f3      	beq.n	80088d2 <_fflush_r+0xa>
 80088ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80088ec:	07d0      	lsls	r0, r2, #31
 80088ee:	d404      	bmi.n	80088fa <_fflush_r+0x32>
 80088f0:	0599      	lsls	r1, r3, #22
 80088f2:	d402      	bmi.n	80088fa <_fflush_r+0x32>
 80088f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088f6:	f7ff fa32 	bl	8007d5e <__retarget_lock_acquire_recursive>
 80088fa:	4628      	mov	r0, r5
 80088fc:	4621      	mov	r1, r4
 80088fe:	f7ff ff5f 	bl	80087c0 <__sflush_r>
 8008902:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008904:	07da      	lsls	r2, r3, #31
 8008906:	4605      	mov	r5, r0
 8008908:	d4e4      	bmi.n	80088d4 <_fflush_r+0xc>
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	059b      	lsls	r3, r3, #22
 800890e:	d4e1      	bmi.n	80088d4 <_fflush_r+0xc>
 8008910:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008912:	f7ff fa25 	bl	8007d60 <__retarget_lock_release_recursive>
 8008916:	e7dd      	b.n	80088d4 <_fflush_r+0xc>

08008918 <__swbuf_r>:
 8008918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891a:	460e      	mov	r6, r1
 800891c:	4614      	mov	r4, r2
 800891e:	4605      	mov	r5, r0
 8008920:	b118      	cbz	r0, 800892a <__swbuf_r+0x12>
 8008922:	6a03      	ldr	r3, [r0, #32]
 8008924:	b90b      	cbnz	r3, 800892a <__swbuf_r+0x12>
 8008926:	f7ff f8e1 	bl	8007aec <__sinit>
 800892a:	69a3      	ldr	r3, [r4, #24]
 800892c:	60a3      	str	r3, [r4, #8]
 800892e:	89a3      	ldrh	r3, [r4, #12]
 8008930:	071a      	lsls	r2, r3, #28
 8008932:	d501      	bpl.n	8008938 <__swbuf_r+0x20>
 8008934:	6923      	ldr	r3, [r4, #16]
 8008936:	b943      	cbnz	r3, 800894a <__swbuf_r+0x32>
 8008938:	4621      	mov	r1, r4
 800893a:	4628      	mov	r0, r5
 800893c:	f000 f82a 	bl	8008994 <__swsetup_r>
 8008940:	b118      	cbz	r0, 800894a <__swbuf_r+0x32>
 8008942:	f04f 37ff 	mov.w	r7, #4294967295
 8008946:	4638      	mov	r0, r7
 8008948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	6922      	ldr	r2, [r4, #16]
 800894e:	1a98      	subs	r0, r3, r2
 8008950:	6963      	ldr	r3, [r4, #20]
 8008952:	b2f6      	uxtb	r6, r6
 8008954:	4283      	cmp	r3, r0
 8008956:	4637      	mov	r7, r6
 8008958:	dc05      	bgt.n	8008966 <__swbuf_r+0x4e>
 800895a:	4621      	mov	r1, r4
 800895c:	4628      	mov	r0, r5
 800895e:	f7ff ffb3 	bl	80088c8 <_fflush_r>
 8008962:	2800      	cmp	r0, #0
 8008964:	d1ed      	bne.n	8008942 <__swbuf_r+0x2a>
 8008966:	68a3      	ldr	r3, [r4, #8]
 8008968:	3b01      	subs	r3, #1
 800896a:	60a3      	str	r3, [r4, #8]
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	1c5a      	adds	r2, r3, #1
 8008970:	6022      	str	r2, [r4, #0]
 8008972:	701e      	strb	r6, [r3, #0]
 8008974:	6962      	ldr	r2, [r4, #20]
 8008976:	1c43      	adds	r3, r0, #1
 8008978:	429a      	cmp	r2, r3
 800897a:	d004      	beq.n	8008986 <__swbuf_r+0x6e>
 800897c:	89a3      	ldrh	r3, [r4, #12]
 800897e:	07db      	lsls	r3, r3, #31
 8008980:	d5e1      	bpl.n	8008946 <__swbuf_r+0x2e>
 8008982:	2e0a      	cmp	r6, #10
 8008984:	d1df      	bne.n	8008946 <__swbuf_r+0x2e>
 8008986:	4621      	mov	r1, r4
 8008988:	4628      	mov	r0, r5
 800898a:	f7ff ff9d 	bl	80088c8 <_fflush_r>
 800898e:	2800      	cmp	r0, #0
 8008990:	d0d9      	beq.n	8008946 <__swbuf_r+0x2e>
 8008992:	e7d6      	b.n	8008942 <__swbuf_r+0x2a>

08008994 <__swsetup_r>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	4b29      	ldr	r3, [pc, #164]	@ (8008a3c <__swsetup_r+0xa8>)
 8008998:	4605      	mov	r5, r0
 800899a:	6818      	ldr	r0, [r3, #0]
 800899c:	460c      	mov	r4, r1
 800899e:	b118      	cbz	r0, 80089a8 <__swsetup_r+0x14>
 80089a0:	6a03      	ldr	r3, [r0, #32]
 80089a2:	b90b      	cbnz	r3, 80089a8 <__swsetup_r+0x14>
 80089a4:	f7ff f8a2 	bl	8007aec <__sinit>
 80089a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ac:	0719      	lsls	r1, r3, #28
 80089ae:	d422      	bmi.n	80089f6 <__swsetup_r+0x62>
 80089b0:	06da      	lsls	r2, r3, #27
 80089b2:	d407      	bmi.n	80089c4 <__swsetup_r+0x30>
 80089b4:	2209      	movs	r2, #9
 80089b6:	602a      	str	r2, [r5, #0]
 80089b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089bc:	81a3      	strh	r3, [r4, #12]
 80089be:	f04f 30ff 	mov.w	r0, #4294967295
 80089c2:	e033      	b.n	8008a2c <__swsetup_r+0x98>
 80089c4:	0758      	lsls	r0, r3, #29
 80089c6:	d512      	bpl.n	80089ee <__swsetup_r+0x5a>
 80089c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089ca:	b141      	cbz	r1, 80089de <__swsetup_r+0x4a>
 80089cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089d0:	4299      	cmp	r1, r3
 80089d2:	d002      	beq.n	80089da <__swsetup_r+0x46>
 80089d4:	4628      	mov	r0, r5
 80089d6:	f7ff f9d3 	bl	8007d80 <_free_r>
 80089da:	2300      	movs	r3, #0
 80089dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80089de:	89a3      	ldrh	r3, [r4, #12]
 80089e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80089e4:	81a3      	strh	r3, [r4, #12]
 80089e6:	2300      	movs	r3, #0
 80089e8:	6063      	str	r3, [r4, #4]
 80089ea:	6923      	ldr	r3, [r4, #16]
 80089ec:	6023      	str	r3, [r4, #0]
 80089ee:	89a3      	ldrh	r3, [r4, #12]
 80089f0:	f043 0308 	orr.w	r3, r3, #8
 80089f4:	81a3      	strh	r3, [r4, #12]
 80089f6:	6923      	ldr	r3, [r4, #16]
 80089f8:	b94b      	cbnz	r3, 8008a0e <__swsetup_r+0x7a>
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a04:	d003      	beq.n	8008a0e <__swsetup_r+0x7a>
 8008a06:	4621      	mov	r1, r4
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f000 f897 	bl	8008b3c <__smakebuf_r>
 8008a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a12:	f013 0201 	ands.w	r2, r3, #1
 8008a16:	d00a      	beq.n	8008a2e <__swsetup_r+0x9a>
 8008a18:	2200      	movs	r2, #0
 8008a1a:	60a2      	str	r2, [r4, #8]
 8008a1c:	6962      	ldr	r2, [r4, #20]
 8008a1e:	4252      	negs	r2, r2
 8008a20:	61a2      	str	r2, [r4, #24]
 8008a22:	6922      	ldr	r2, [r4, #16]
 8008a24:	b942      	cbnz	r2, 8008a38 <__swsetup_r+0xa4>
 8008a26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a2a:	d1c5      	bne.n	80089b8 <__swsetup_r+0x24>
 8008a2c:	bd38      	pop	{r3, r4, r5, pc}
 8008a2e:	0799      	lsls	r1, r3, #30
 8008a30:	bf58      	it	pl
 8008a32:	6962      	ldrpl	r2, [r4, #20]
 8008a34:	60a2      	str	r2, [r4, #8]
 8008a36:	e7f4      	b.n	8008a22 <__swsetup_r+0x8e>
 8008a38:	2000      	movs	r0, #0
 8008a3a:	e7f7      	b.n	8008a2c <__swsetup_r+0x98>
 8008a3c:	2000015c 	.word	0x2000015c

08008a40 <memmove>:
 8008a40:	4288      	cmp	r0, r1
 8008a42:	b510      	push	{r4, lr}
 8008a44:	eb01 0402 	add.w	r4, r1, r2
 8008a48:	d902      	bls.n	8008a50 <memmove+0x10>
 8008a4a:	4284      	cmp	r4, r0
 8008a4c:	4623      	mov	r3, r4
 8008a4e:	d807      	bhi.n	8008a60 <memmove+0x20>
 8008a50:	1e43      	subs	r3, r0, #1
 8008a52:	42a1      	cmp	r1, r4
 8008a54:	d008      	beq.n	8008a68 <memmove+0x28>
 8008a56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a5e:	e7f8      	b.n	8008a52 <memmove+0x12>
 8008a60:	4402      	add	r2, r0
 8008a62:	4601      	mov	r1, r0
 8008a64:	428a      	cmp	r2, r1
 8008a66:	d100      	bne.n	8008a6a <memmove+0x2a>
 8008a68:	bd10      	pop	{r4, pc}
 8008a6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a72:	e7f7      	b.n	8008a64 <memmove+0x24>

08008a74 <_sbrk_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	4d06      	ldr	r5, [pc, #24]	@ (8008a90 <_sbrk_r+0x1c>)
 8008a78:	2300      	movs	r3, #0
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	4608      	mov	r0, r1
 8008a7e:	602b      	str	r3, [r5, #0]
 8008a80:	f7f8 fbda 	bl	8001238 <_sbrk>
 8008a84:	1c43      	adds	r3, r0, #1
 8008a86:	d102      	bne.n	8008a8e <_sbrk_r+0x1a>
 8008a88:	682b      	ldr	r3, [r5, #0]
 8008a8a:	b103      	cbz	r3, 8008a8e <_sbrk_r+0x1a>
 8008a8c:	6023      	str	r3, [r4, #0]
 8008a8e:	bd38      	pop	{r3, r4, r5, pc}
 8008a90:	2000147c 	.word	0x2000147c

08008a94 <_realloc_r>:
 8008a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a98:	4680      	mov	r8, r0
 8008a9a:	4615      	mov	r5, r2
 8008a9c:	460c      	mov	r4, r1
 8008a9e:	b921      	cbnz	r1, 8008aaa <_realloc_r+0x16>
 8008aa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	f7ff b9d7 	b.w	8007e58 <_malloc_r>
 8008aaa:	b92a      	cbnz	r2, 8008ab8 <_realloc_r+0x24>
 8008aac:	f7ff f968 	bl	8007d80 <_free_r>
 8008ab0:	2400      	movs	r4, #0
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ab8:	f000 f89e 	bl	8008bf8 <_malloc_usable_size_r>
 8008abc:	4285      	cmp	r5, r0
 8008abe:	4606      	mov	r6, r0
 8008ac0:	d802      	bhi.n	8008ac8 <_realloc_r+0x34>
 8008ac2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008ac6:	d8f4      	bhi.n	8008ab2 <_realloc_r+0x1e>
 8008ac8:	4629      	mov	r1, r5
 8008aca:	4640      	mov	r0, r8
 8008acc:	f7ff f9c4 	bl	8007e58 <_malloc_r>
 8008ad0:	4607      	mov	r7, r0
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	d0ec      	beq.n	8008ab0 <_realloc_r+0x1c>
 8008ad6:	42b5      	cmp	r5, r6
 8008ad8:	462a      	mov	r2, r5
 8008ada:	4621      	mov	r1, r4
 8008adc:	bf28      	it	cs
 8008ade:	4632      	movcs	r2, r6
 8008ae0:	f7ff f93f 	bl	8007d62 <memcpy>
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	4640      	mov	r0, r8
 8008ae8:	f7ff f94a 	bl	8007d80 <_free_r>
 8008aec:	463c      	mov	r4, r7
 8008aee:	e7e0      	b.n	8008ab2 <_realloc_r+0x1e>

08008af0 <__swhatbuf_r>:
 8008af0:	b570      	push	{r4, r5, r6, lr}
 8008af2:	460c      	mov	r4, r1
 8008af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008af8:	2900      	cmp	r1, #0
 8008afa:	b096      	sub	sp, #88	@ 0x58
 8008afc:	4615      	mov	r5, r2
 8008afe:	461e      	mov	r6, r3
 8008b00:	da0d      	bge.n	8008b1e <__swhatbuf_r+0x2e>
 8008b02:	89a3      	ldrh	r3, [r4, #12]
 8008b04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b08:	f04f 0100 	mov.w	r1, #0
 8008b0c:	bf14      	ite	ne
 8008b0e:	2340      	movne	r3, #64	@ 0x40
 8008b10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b14:	2000      	movs	r0, #0
 8008b16:	6031      	str	r1, [r6, #0]
 8008b18:	602b      	str	r3, [r5, #0]
 8008b1a:	b016      	add	sp, #88	@ 0x58
 8008b1c:	bd70      	pop	{r4, r5, r6, pc}
 8008b1e:	466a      	mov	r2, sp
 8008b20:	f000 f848 	bl	8008bb4 <_fstat_r>
 8008b24:	2800      	cmp	r0, #0
 8008b26:	dbec      	blt.n	8008b02 <__swhatbuf_r+0x12>
 8008b28:	9901      	ldr	r1, [sp, #4]
 8008b2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b32:	4259      	negs	r1, r3
 8008b34:	4159      	adcs	r1, r3
 8008b36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b3a:	e7eb      	b.n	8008b14 <__swhatbuf_r+0x24>

08008b3c <__smakebuf_r>:
 8008b3c:	898b      	ldrh	r3, [r1, #12]
 8008b3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b40:	079d      	lsls	r5, r3, #30
 8008b42:	4606      	mov	r6, r0
 8008b44:	460c      	mov	r4, r1
 8008b46:	d507      	bpl.n	8008b58 <__smakebuf_r+0x1c>
 8008b48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b4c:	6023      	str	r3, [r4, #0]
 8008b4e:	6123      	str	r3, [r4, #16]
 8008b50:	2301      	movs	r3, #1
 8008b52:	6163      	str	r3, [r4, #20]
 8008b54:	b003      	add	sp, #12
 8008b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b58:	ab01      	add	r3, sp, #4
 8008b5a:	466a      	mov	r2, sp
 8008b5c:	f7ff ffc8 	bl	8008af0 <__swhatbuf_r>
 8008b60:	9f00      	ldr	r7, [sp, #0]
 8008b62:	4605      	mov	r5, r0
 8008b64:	4639      	mov	r1, r7
 8008b66:	4630      	mov	r0, r6
 8008b68:	f7ff f976 	bl	8007e58 <_malloc_r>
 8008b6c:	b948      	cbnz	r0, 8008b82 <__smakebuf_r+0x46>
 8008b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b72:	059a      	lsls	r2, r3, #22
 8008b74:	d4ee      	bmi.n	8008b54 <__smakebuf_r+0x18>
 8008b76:	f023 0303 	bic.w	r3, r3, #3
 8008b7a:	f043 0302 	orr.w	r3, r3, #2
 8008b7e:	81a3      	strh	r3, [r4, #12]
 8008b80:	e7e2      	b.n	8008b48 <__smakebuf_r+0xc>
 8008b82:	89a3      	ldrh	r3, [r4, #12]
 8008b84:	6020      	str	r0, [r4, #0]
 8008b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b8a:	81a3      	strh	r3, [r4, #12]
 8008b8c:	9b01      	ldr	r3, [sp, #4]
 8008b8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b92:	b15b      	cbz	r3, 8008bac <__smakebuf_r+0x70>
 8008b94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b98:	4630      	mov	r0, r6
 8008b9a:	f000 f81d 	bl	8008bd8 <_isatty_r>
 8008b9e:	b128      	cbz	r0, 8008bac <__smakebuf_r+0x70>
 8008ba0:	89a3      	ldrh	r3, [r4, #12]
 8008ba2:	f023 0303 	bic.w	r3, r3, #3
 8008ba6:	f043 0301 	orr.w	r3, r3, #1
 8008baa:	81a3      	strh	r3, [r4, #12]
 8008bac:	89a3      	ldrh	r3, [r4, #12]
 8008bae:	431d      	orrs	r5, r3
 8008bb0:	81a5      	strh	r5, [r4, #12]
 8008bb2:	e7cf      	b.n	8008b54 <__smakebuf_r+0x18>

08008bb4 <_fstat_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	4d07      	ldr	r5, [pc, #28]	@ (8008bd4 <_fstat_r+0x20>)
 8008bb8:	2300      	movs	r3, #0
 8008bba:	4604      	mov	r4, r0
 8008bbc:	4608      	mov	r0, r1
 8008bbe:	4611      	mov	r1, r2
 8008bc0:	602b      	str	r3, [r5, #0]
 8008bc2:	f7f8 fb10 	bl	80011e6 <_fstat>
 8008bc6:	1c43      	adds	r3, r0, #1
 8008bc8:	d102      	bne.n	8008bd0 <_fstat_r+0x1c>
 8008bca:	682b      	ldr	r3, [r5, #0]
 8008bcc:	b103      	cbz	r3, 8008bd0 <_fstat_r+0x1c>
 8008bce:	6023      	str	r3, [r4, #0]
 8008bd0:	bd38      	pop	{r3, r4, r5, pc}
 8008bd2:	bf00      	nop
 8008bd4:	2000147c 	.word	0x2000147c

08008bd8 <_isatty_r>:
 8008bd8:	b538      	push	{r3, r4, r5, lr}
 8008bda:	4d06      	ldr	r5, [pc, #24]	@ (8008bf4 <_isatty_r+0x1c>)
 8008bdc:	2300      	movs	r3, #0
 8008bde:	4604      	mov	r4, r0
 8008be0:	4608      	mov	r0, r1
 8008be2:	602b      	str	r3, [r5, #0]
 8008be4:	f7f8 fb0f 	bl	8001206 <_isatty>
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	d102      	bne.n	8008bf2 <_isatty_r+0x1a>
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	b103      	cbz	r3, 8008bf2 <_isatty_r+0x1a>
 8008bf0:	6023      	str	r3, [r4, #0]
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
 8008bf4:	2000147c 	.word	0x2000147c

08008bf8 <_malloc_usable_size_r>:
 8008bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bfc:	1f18      	subs	r0, r3, #4
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	bfbc      	itt	lt
 8008c02:	580b      	ldrlt	r3, [r1, r0]
 8008c04:	18c0      	addlt	r0, r0, r3
 8008c06:	4770      	bx	lr

08008c08 <_init>:
 8008c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0a:	bf00      	nop
 8008c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c0e:	bc08      	pop	{r3}
 8008c10:	469e      	mov	lr, r3
 8008c12:	4770      	bx	lr

08008c14 <_fini>:
 8008c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c16:	bf00      	nop
 8008c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c1a:	bc08      	pop	{r3}
 8008c1c:	469e      	mov	lr, r3
 8008c1e:	4770      	bx	lr
