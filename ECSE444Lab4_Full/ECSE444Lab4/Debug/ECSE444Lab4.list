
ECSE444Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007168  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08007328  08007328  00008328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007414  08007414  00009108  2**0
                  CONTENTS
  4 .ARM          00000008  08007414  08007414  00008414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800741c  0800741c  00009108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800741c  0800741c  0000841c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007420  08007420  00008420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08007424  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  20000108  0800752c  00009108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  0800752c  00009598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009108  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001405c  00000000  00000000  00009138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b74  00000000  00000000  0001d194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  0001fd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c60  00000000  00000000  00020d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bf09  00000000  00000000  00021980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f94  00000000  00000000  0004d889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106752  00000000  00000000  0006281d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168f6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048d8  00000000  00000000  00168fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0016d88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000108 	.word	0x20000108
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007310 	.word	0x08007310

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000010c 	.word	0x2000010c
 80001fc:	08007310 	.word	0x08007310

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <__io_putchar>:
#else
#define PUTCHAR_PROTOint fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTO
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000598:	1d39      	adds	r1, r7, #4
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
 800059e:	2201      	movs	r2, #1
 80005a0:	4803      	ldr	r0, [pc, #12]	@ (80005b0 <__io_putchar+0x20>)
 80005a2:	f004 fb03 	bl	8004bac <HAL_UART_Transmit>
  return ch;
 80005a6:	687b      	ldr	r3, [r7, #4]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000178 	.word	0x20000178

080005b4 <HAL_UARTEx_RxEventCallback>:

//interrupts
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	460b      	mov	r3, r1
 80005be:	807b      	strh	r3, [r7, #2]
    if (huart == &huart1)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000600 <HAL_UARTEx_RxEventCallback+0x4c>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d117      	bne.n	80005f8 <HAL_UARTEx_RxEventCallback+0x44>
    {
        int i;
        for(i = 0; i < Size; i++){
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e002      	b.n	80005d4 <HAL_UARTEx_RxEventCallback+0x20>
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	3301      	adds	r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	887b      	ldrh	r3, [r7, #2]
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	429a      	cmp	r2, r3
 80005da:	dbf8      	blt.n	80005ce <HAL_UARTEx_RxEventCallback+0x1a>
            if(Rx_buff[i] == '\n'){
                // TODO
            }
        }
        HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx_buff, 256);
 80005dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005e0:	4908      	ldr	r1, [pc, #32]	@ (8000604 <HAL_UARTEx_RxEventCallback+0x50>)
 80005e2:	4807      	ldr	r0, [pc, #28]	@ (8000600 <HAL_UARTEx_RxEventCallback+0x4c>)
 80005e4:	f005 fec2 	bl	800636c <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80005e8:	4b07      	ldr	r3, [pc, #28]	@ (8000608 <HAL_UARTEx_RxEventCallback+0x54>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <HAL_UARTEx_RxEventCallback+0x54>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f022 0204 	bic.w	r2, r2, #4
 80005f6:	601a      	str	r2, [r3, #0]
    }
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000178 	.word	0x20000178
 8000604:	200002e8 	.word	0x200002e8
 8000608:	2000020c 	.word	0x2000020c

0800060c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	80fb      	strh	r3, [r7, #6]
	hum_buff = BSP_HSENSOR_ReadHumidity();
 8000616:	f000 fe31 	bl	800127c <BSP_HSENSOR_ReadHumidity>
 800061a:	eef0 7a40 	vmov.f32	s15, s0
 800061e:	4b36      	ldr	r3, [pc, #216]	@ (80006f8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000620:	edc3 7a00 	vstr	s15, [r3]
	temp_buff = BSP_TSENSOR_ReadTemp();
 8000624:	f000 fe54 	bl	80012d0 <BSP_TSENSOR_ReadTemp>
 8000628:	eef0 7a40 	vmov.f32	s15, s0
 800062c:	4b33      	ldr	r3, [pc, #204]	@ (80006fc <HAL_GPIO_EXTI_Callback+0xf0>)
 800062e:	edc3 7a00 	vstr	s15, [r3]
	temp_int = temp_buff;
 8000632:	4b32      	ldr	r3, [pc, #200]	@ (80006fc <HAL_GPIO_EXTI_Callback+0xf0>)
 8000634:	edd3 7a00 	vldr	s15, [r3]
 8000638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800063c:	ee17 2a90 	vmov	r2, s15
 8000640:	4b2f      	ldr	r3, [pc, #188]	@ (8000700 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000642:	601a      	str	r2, [r3, #0]
	temp_frac = 100*(temp_buff-(int)temp_buff);
 8000644:	4b2d      	ldr	r3, [pc, #180]	@ (80006fc <HAL_GPIO_EXTI_Callback+0xf0>)
 8000646:	ed93 7a00 	vldr	s14, [r3]
 800064a:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <HAL_GPIO_EXTI_Callback+0xf0>)
 800064c:	edd3 7a00 	vldr	s15, [r3]
 8000650:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000658:	ee77 7a67 	vsub.f32	s15, s14, s15
 800065c:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8000704 <HAL_GPIO_EXTI_Callback+0xf8>
 8000660:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000668:	ee17 2a90 	vmov	r2, s15
 800066c:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <HAL_GPIO_EXTI_Callback+0xfc>)
 800066e:	601a      	str	r2, [r3, #0]
	hum_int = hum_buff;
 8000670:	4b21      	ldr	r3, [pc, #132]	@ (80006f8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000672:	edd3 7a00 	vldr	s15, [r3]
 8000676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800067a:	ee17 2a90 	vmov	r2, s15
 800067e:	4b23      	ldr	r3, [pc, #140]	@ (800070c <HAL_GPIO_EXTI_Callback+0x100>)
 8000680:	601a      	str	r2, [r3, #0]
	hum_frac = 100*(hum_buff-(int)hum_buff);
 8000682:	4b1d      	ldr	r3, [pc, #116]	@ (80006f8 <HAL_GPIO_EXTI_Callback+0xec>)
 8000684:	ed93 7a00 	vldr	s14, [r3]
 8000688:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <HAL_GPIO_EXTI_Callback+0xec>)
 800068a:	edd3 7a00 	vldr	s15, [r3]
 800068e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800069a:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000704 <HAL_GPIO_EXTI_Callback+0xf8>
 800069e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006a6:	ee17 2a90 	vmov	r2, s15
 80006aa:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <HAL_GPIO_EXTI_Callback+0x104>)
 80006ac:	601a      	str	r2, [r3, #0]
	//snprintf((char*)str_th,100,"Temperature = %d.%02d\n\r", temp_int, temp_frac);
	//HAL_UART_Transmit(&huart1, str_th,sizeof(str_th),HAL_MAX_DELAY);
	//snprintf((char*)str_th,100,"Humidity = %d.%02d\n\r", hum_int, hum_frac);
	//HAL_UART_Transmit(&huart1, str_th,sizeof(str_th),HAL_MAX_DELAY);

	printf("Click output = %d \n\r", counter);
 80006ae:	4b19      	ldr	r3, [pc, #100]	@ (8000714 <HAL_GPIO_EXTI_Callback+0x108>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4619      	mov	r1, r3
 80006b4:	4818      	ldr	r0, [pc, #96]	@ (8000718 <HAL_GPIO_EXTI_Callback+0x10c>)
 80006b6:	f005 ffbd 	bl	8006634 <iprintf>
	printf("Temperature = %d.%02d\n\r", temp_int, temp_frac);
 80006ba:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <HAL_GPIO_EXTI_Callback+0xf4>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a12      	ldr	r2, [pc, #72]	@ (8000708 <HAL_GPIO_EXTI_Callback+0xfc>)
 80006c0:	6812      	ldr	r2, [r2, #0]
 80006c2:	4619      	mov	r1, r3
 80006c4:	4815      	ldr	r0, [pc, #84]	@ (800071c <HAL_GPIO_EXTI_Callback+0x110>)
 80006c6:	f005 ffb5 	bl	8006634 <iprintf>
	printf("Humidity = %d.%02d\n\r\n\r", hum_int, hum_frac);
 80006ca:	4b10      	ldr	r3, [pc, #64]	@ (800070c <HAL_GPIO_EXTI_Callback+0x100>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a10      	ldr	r2, [pc, #64]	@ (8000710 <HAL_GPIO_EXTI_Callback+0x104>)
 80006d0:	6812      	ldr	r2, [r2, #0]
 80006d2:	4619      	mov	r1, r3
 80006d4:	4812      	ldr	r0, [pc, #72]	@ (8000720 <HAL_GPIO_EXTI_Callback+0x114>)
 80006d6:	f005 ffad 	bl	8006634 <iprintf>

	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 80006da:	2120      	movs	r1, #32
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006e0:	f001 fee6 	bl	80024b0 <HAL_GPIO_TogglePin>
	counter++;
 80006e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <HAL_GPIO_EXTI_Callback+0x108>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	3301      	adds	r3, #1
 80006ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000714 <HAL_GPIO_EXTI_Callback+0x108>)
 80006ec:	6013      	str	r3, [r2, #0]
	//HAL_Delay(100);
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	200002d0 	.word	0x200002d0
 80006fc:	200002d4 	.word	0x200002d4
 8000700:	200002d8 	.word	0x200002d8
 8000704:	42c80000 	.word	0x42c80000
 8000708:	200002dc 	.word	0x200002dc
 800070c:	200002e0 	.word	0x200002e0
 8000710:	200002e4 	.word	0x200002e4
 8000714:	200002cc 	.word	0x200002cc
 8000718:	08007328 	.word	0x08007328
 800071c:	08007340 	.word	0x08007340
 8000720:	08007358 	.word	0x08007358

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000728:	f000 ff72 	bl	8001610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072c:	f000 f81e 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000730:	f000 f92c 	bl	800098c <MX_GPIO_Init>
  MX_DMA_Init();
 8000734:	f000 f8f8 	bl	8000928 <MX_DMA_Init>
  MX_I2C1_Init();
 8000738:	f000 f86a 	bl	8000810 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800073c:	f000 f8a8 	bl	8000890 <MX_USART1_UART_Init>
  //HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Rx_buff, 256);
  //__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);


  //HAL_UART_Transmit(&huart1, msg1,sizeof(msg1),HAL_MAX_DELAY);
  printf((char*)msg1);
 8000740:	4807      	ldr	r0, [pc, #28]	@ (8000760 <main+0x3c>)
 8000742:	f005 ff77 	bl	8006634 <iprintf>
  //HAL_UART_Transmit(&huart1, msg2,sizeof(msg2),HAL_MAX_DELAY);
  printf((char*)msg2);
 8000746:	4807      	ldr	r0, [pc, #28]	@ (8000764 <main+0x40>)
 8000748:	f005 ff74 	bl	8006634 <iprintf>

  BSP_HSENSOR_Init();
 800074c:	f000 fd76 	bl	800123c <BSP_HSENSOR_Init>
  BSP_TSENSOR_Init();
 8000750:	f000 fda2 	bl	8001298 <BSP_TSENSOR_Init>

  //HAL_UART_Transmit(&huart1, msg3,sizeof(msg3),HAL_MAX_DELAY);
  printf((char*)msg3);
 8000754:	4804      	ldr	r0, [pc, #16]	@ (8000768 <main+0x44>)
 8000756:	f005 ff6d 	bl	8006634 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while(1){
 800075a:	bf00      	nop
 800075c:	e7fd      	b.n	800075a <main+0x36>
 800075e:	bf00      	nop
 8000760:	20000000 	.word	0x20000000
 8000764:	20000044 	.word	0x20000044
 8000768:	20000064 	.word	0x20000064

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b096      	sub	sp, #88	@ 0x58
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	2244      	movs	r2, #68	@ 0x44
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f005 ffaf 	bl	80066de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	463b      	mov	r3, r7
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800078e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000792:	f002 fd27 	bl	80031e4 <HAL_PWREx_ControlVoltageScaling>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800079c:	f000 f958 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007a0:	2310      	movs	r3, #16
 80007a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007ac:	2360      	movs	r3, #96	@ 0x60
 80007ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b0:	2302      	movs	r3, #2
 80007b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007b4:	2301      	movs	r3, #1
 80007b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 18;
 80007bc:	2312      	movs	r3, #18
 80007be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	4618      	mov	r0, r3
 80007d2:	f002 fdab 	bl	800332c <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80007dc:	f000 f938 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	230f      	movs	r3, #15
 80007e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e4:	2303      	movs	r3, #3
 80007e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007f4:	463b      	mov	r3, r7
 80007f6:	2101      	movs	r1, #1
 80007f8:	4618      	mov	r0, r3
 80007fa:	f003 f9b1 	bl	8003b60 <HAL_RCC_ClockConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000804:	f000 f924 	bl	8000a50 <Error_Handler>
  }
}
 8000808:	bf00      	nop
 800080a:	3758      	adds	r7, #88	@ 0x58
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000814:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <MX_I2C1_Init+0x74>)
 8000816:	4a1c      	ldr	r2, [pc, #112]	@ (8000888 <MX_I2C1_Init+0x78>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800081a:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <MX_I2C1_Init+0x74>)
 800081c:	4a1b      	ldr	r2, [pc, #108]	@ (800088c <MX_I2C1_Init+0x7c>)
 800081e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000820:	4b18      	ldr	r3, [pc, #96]	@ (8000884 <MX_I2C1_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000826:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <MX_I2C1_Init+0x74>)
 8000828:	2201      	movs	r2, #1
 800082a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800082c:	4b15      	ldr	r3, [pc, #84]	@ (8000884 <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000832:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <MX_I2C1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <MX_I2C1_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800083e:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <MX_I2C1_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000844:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <MX_I2C1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084a:	480e      	ldr	r0, [pc, #56]	@ (8000884 <MX_I2C1_Init+0x74>)
 800084c:	f001 fe62 	bl	8002514 <HAL_I2C_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000856:	f000 f8fb 	bl	8000a50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800085a:	2100      	movs	r1, #0
 800085c:	4809      	ldr	r0, [pc, #36]	@ (8000884 <MX_I2C1_Init+0x74>)
 800085e:	f002 fc09 	bl	8003074 <HAL_I2CEx_ConfigAnalogFilter>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000868:	f000 f8f2 	bl	8000a50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800086c:	2100      	movs	r1, #0
 800086e:	4805      	ldr	r0, [pc, #20]	@ (8000884 <MX_I2C1_Init+0x74>)
 8000870:	f002 fc4b 	bl	800310a <HAL_I2CEx_ConfigDigitalFilter>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800087a:	f000 f8e9 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000124 	.word	0x20000124
 8000888:	40005400 	.word	0x40005400
 800088c:	00808cd2 	.word	0x00808cd2

08000890 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000894:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 8000896:	4a23      	ldr	r2, [pc, #140]	@ (8000924 <MX_USART1_UART_Init+0x94>)
 8000898:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800089a:	4b21      	ldr	r3, [pc, #132]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c6:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008cc:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008d8:	4811      	ldr	r0, [pc, #68]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008da:	f004 f917 	bl	8004b0c <HAL_UART_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008e4:	f000 f8b4 	bl	8000a50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e8:	2100      	movs	r1, #0
 80008ea:	480d      	ldr	r0, [pc, #52]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008ec:	f005 fcc2 	bl	8006274 <HAL_UARTEx_SetTxFifoThreshold>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008f6:	f000 f8ab 	bl	8000a50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008fa:	2100      	movs	r1, #0
 80008fc:	4808      	ldr	r0, [pc, #32]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 80008fe:	f005 fcf7 	bl	80062f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000908:	f000 f8a2 	bl	8000a50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	@ (8000920 <MX_USART1_UART_Init+0x90>)
 800090e:	f005 fc78 	bl	8006202 <HAL_UARTEx_DisableFifoMode>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000918:	f000 f89a 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000178 	.word	0x20000178
 8000924:	40013800 	.word	0x40013800

08000928 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800092e:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <MX_DMA_Init+0x60>)
 8000930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000932:	4a15      	ldr	r2, [pc, #84]	@ (8000988 <MX_DMA_Init+0x60>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6493      	str	r3, [r2, #72]	@ 0x48
 800093a:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <MX_DMA_Init+0x60>)
 800093c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000946:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <MX_DMA_Init+0x60>)
 8000948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800094a:	4a0f      	ldr	r2, [pc, #60]	@ (8000988 <MX_DMA_Init+0x60>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6493      	str	r3, [r2, #72]	@ 0x48
 8000952:	4b0d      	ldr	r3, [pc, #52]	@ (8000988 <MX_DMA_Init+0x60>)
 8000954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	200b      	movs	r0, #11
 8000964:	f000 ffa3 	bl	80018ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000968:	200b      	movs	r0, #11
 800096a:	f000 ffbc 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	200c      	movs	r0, #12
 8000974:	f000 ff9b 	bl	80018ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000978:	200c      	movs	r0, #12
 800097a:	f000 ffb4 	bl	80018e6 <HAL_NVIC_EnableIRQ>

}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40021000 	.word	0x40021000

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	4b29      	ldr	r3, [pc, #164]	@ (8000a48 <MX_GPIO_Init+0xbc>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	4a28      	ldr	r2, [pc, #160]	@ (8000a48 <MX_GPIO_Init+0xbc>)
 80009a8:	f043 0304 	orr.w	r3, r3, #4
 80009ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ae:	4b26      	ldr	r3, [pc, #152]	@ (8000a48 <MX_GPIO_Init+0xbc>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	f003 0304 	and.w	r3, r3, #4
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b23      	ldr	r3, [pc, #140]	@ (8000a48 <MX_GPIO_Init+0xbc>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	4a22      	ldr	r2, [pc, #136]	@ (8000a48 <MX_GPIO_Init+0xbc>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c6:	4b20      	ldr	r3, [pc, #128]	@ (8000a48 <MX_GPIO_Init+0xbc>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a48 <MX_GPIO_Init+0xbc>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a48 <MX_GPIO_Init+0xbc>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009de:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <MX_GPIO_Init+0xbc>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2120      	movs	r1, #32
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f2:	f001 fd45 	bl	8002480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480f      	ldr	r0, [pc, #60]	@ (8000a4c <MX_GPIO_Init+0xc0>)
 8000a0e:	f001 fab3 	bl	8001f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a12:	2320      	movs	r3, #32
 8000a14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	4619      	mov	r1, r3
 8000a28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2c:	f001 faa4 	bl	8001f78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	2028      	movs	r0, #40	@ 0x28
 8000a36:	f000 ff3a 	bl	80018ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a3a:	2028      	movs	r0, #40	@ 0x28
 8000a3c:	f000 ff53 	bl	80018e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a40:	bf00      	nop
 8000a42:	3720      	adds	r7, #32
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	48000800 	.word	0x48000800

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <Error_Handler+0x8>

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <HAL_MspInit+0x44>)
 8000a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a66:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa0 <HAL_MspInit+0x44>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <HAL_MspInit+0x44>)
 8000a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <HAL_MspInit+0x44>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a7e:	4a08      	ldr	r2, [pc, #32]	@ (8000aa0 <HAL_MspInit+0x44>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a86:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <HAL_MspInit+0x44>)
 8000a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b0ae      	sub	sp, #184	@ 0xb8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	2294      	movs	r2, #148	@ 0x94
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f005 fe0a 	bl	80066de <memset>
  if(hi2c->Instance==I2C1)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a21      	ldr	r2, [pc, #132]	@ (8000b54 <HAL_I2C_MspInit+0xb0>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d13b      	bne.n	8000b4c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ad4:	2340      	movs	r3, #64	@ 0x40
 8000ad6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f003 fafb 	bl	80040dc <HAL_RCCEx_PeriphCLKConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000aec:	f7ff ffb0 	bl	8000a50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af0:	4b19      	ldr	r3, [pc, #100]	@ (8000b58 <HAL_I2C_MspInit+0xb4>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af4:	4a18      	ldr	r2, [pc, #96]	@ (8000b58 <HAL_I2C_MspInit+0xb4>)
 8000af6:	f043 0302 	orr.w	r3, r3, #2
 8000afa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afc:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <HAL_I2C_MspInit+0xb4>)
 8000afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b08:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b10:	2312      	movs	r3, #18
 8000b12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b22:	2304      	movs	r3, #4
 8000b24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	480b      	ldr	r0, [pc, #44]	@ (8000b5c <HAL_I2C_MspInit+0xb8>)
 8000b30:	f001 fa22 	bl	8001f78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <HAL_I2C_MspInit+0xb4>)
 8000b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b38:	4a07      	ldr	r2, [pc, #28]	@ (8000b58 <HAL_I2C_MspInit+0xb4>)
 8000b3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b40:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <HAL_I2C_MspInit+0xb4>)
 8000b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b4c:	bf00      	nop
 8000b4e:	37b8      	adds	r7, #184	@ 0xb8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40005400 	.word	0x40005400
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	48000400 	.word	0x48000400

08000b60 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b9c <HAL_I2C_MspDeInit+0x3c>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d10f      	bne.n	8000b92 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000b72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <HAL_I2C_MspDeInit+0x40>)
 8000b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba0 <HAL_I2C_MspDeInit+0x40>)
 8000b78:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000b7c:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8000b7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b82:	4808      	ldr	r0, [pc, #32]	@ (8000ba4 <HAL_I2C_MspDeInit+0x44>)
 8000b84:	f001 fb8a 	bl	800229c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8000b88:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b8c:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <HAL_I2C_MspDeInit+0x44>)
 8000b8e:	f001 fb85 	bl	800229c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40005400 	.word	0x40005400
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	48000400 	.word	0x48000400

08000ba8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b0ae      	sub	sp, #184	@ 0xb8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	2294      	movs	r2, #148	@ 0x94
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f005 fd88 	bl	80066de <memset>
  if(huart->Instance==USART1)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a50      	ldr	r2, [pc, #320]	@ (8000d14 <HAL_UART_MspInit+0x16c>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	f040 8098 	bne.w	8000d0a <HAL_UART_MspInit+0x162>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bde:	2300      	movs	r3, #0
 8000be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 fa78 	bl	80040dc <HAL_RCCEx_PeriphCLKConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bf2:	f7ff ff2d 	bl	8000a50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bf6:	4b48      	ldr	r3, [pc, #288]	@ (8000d18 <HAL_UART_MspInit+0x170>)
 8000bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bfa:	4a47      	ldr	r2, [pc, #284]	@ (8000d18 <HAL_UART_MspInit+0x170>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c00:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c02:	4b45      	ldr	r3, [pc, #276]	@ (8000d18 <HAL_UART_MspInit+0x170>)
 8000c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0e:	4b42      	ldr	r3, [pc, #264]	@ (8000d18 <HAL_UART_MspInit+0x170>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c12:	4a41      	ldr	r2, [pc, #260]	@ (8000d18 <HAL_UART_MspInit+0x170>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c1a:	4b3f      	ldr	r3, [pc, #252]	@ (8000d18 <HAL_UART_MspInit+0x170>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c26:	23c0      	movs	r3, #192	@ 0xc0
 8000c28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c3e:	2307      	movs	r3, #7
 8000c40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c44:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4834      	ldr	r0, [pc, #208]	@ (8000d1c <HAL_UART_MspInit+0x174>)
 8000c4c:	f001 f994 	bl	8001f78 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000c50:	4b33      	ldr	r3, [pc, #204]	@ (8000d20 <HAL_UART_MspInit+0x178>)
 8000c52:	4a34      	ldr	r2, [pc, #208]	@ (8000d24 <HAL_UART_MspInit+0x17c>)
 8000c54:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000c56:	4b32      	ldr	r3, [pc, #200]	@ (8000d20 <HAL_UART_MspInit+0x178>)
 8000c58:	2218      	movs	r2, #24
 8000c5a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c5c:	4b30      	ldr	r3, [pc, #192]	@ (8000d20 <HAL_UART_MspInit+0x178>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c62:	4b2f      	ldr	r3, [pc, #188]	@ (8000d20 <HAL_UART_MspInit+0x178>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c68:	4b2d      	ldr	r3, [pc, #180]	@ (8000d20 <HAL_UART_MspInit+0x178>)
 8000c6a:	2280      	movs	r2, #128	@ 0x80
 8000c6c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8000d20 <HAL_UART_MspInit+0x178>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c74:	4b2a      	ldr	r3, [pc, #168]	@ (8000d20 <HAL_UART_MspInit+0x178>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000c7a:	4b29      	ldr	r3, [pc, #164]	@ (8000d20 <HAL_UART_MspInit+0x178>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000c80:	4b27      	ldr	r3, [pc, #156]	@ (8000d20 <HAL_UART_MspInit+0x178>)
 8000c82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c88:	4825      	ldr	r0, [pc, #148]	@ (8000d20 <HAL_UART_MspInit+0x178>)
 8000c8a:	f000 fe47 	bl	800191c <HAL_DMA_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8000c94:	f7ff fedc 	bl	8000a50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a21      	ldr	r2, [pc, #132]	@ (8000d20 <HAL_UART_MspInit+0x178>)
 8000c9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8000d20 <HAL_UART_MspInit+0x178>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000ca6:	4b20      	ldr	r3, [pc, #128]	@ (8000d28 <HAL_UART_MspInit+0x180>)
 8000ca8:	4a20      	ldr	r2, [pc, #128]	@ (8000d2c <HAL_UART_MspInit+0x184>)
 8000caa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000cac:	4b1e      	ldr	r3, [pc, #120]	@ (8000d28 <HAL_UART_MspInit+0x180>)
 8000cae:	2219      	movs	r2, #25
 8000cb0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d28 <HAL_UART_MspInit+0x180>)
 8000cb4:	2210      	movs	r2, #16
 8000cb6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <HAL_UART_MspInit+0x180>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d28 <HAL_UART_MspInit+0x180>)
 8000cc0:	2280      	movs	r2, #128	@ 0x80
 8000cc2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cc4:	4b18      	ldr	r3, [pc, #96]	@ (8000d28 <HAL_UART_MspInit+0x180>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cca:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <HAL_UART_MspInit+0x180>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000cd0:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <HAL_UART_MspInit+0x180>)
 8000cd2:	2220      	movs	r2, #32
 8000cd4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <HAL_UART_MspInit+0x180>)
 8000cd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cdc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000cde:	4812      	ldr	r0, [pc, #72]	@ (8000d28 <HAL_UART_MspInit+0x180>)
 8000ce0:	f000 fe1c 	bl	800191c <HAL_DMA_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_UART_MspInit+0x146>
    {
      Error_Handler();
 8000cea:	f7ff feb1 	bl	8000a50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d28 <HAL_UART_MspInit+0x180>)
 8000cf2:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000cf4:	4a0c      	ldr	r2, [pc, #48]	@ (8000d28 <HAL_UART_MspInit+0x180>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2025      	movs	r0, #37	@ 0x25
 8000d00:	f000 fdd5 	bl	80018ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d04:	2025      	movs	r0, #37	@ 0x25
 8000d06:	f000 fdee 	bl	80018e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d0a:	bf00      	nop
 8000d0c:	37b8      	adds	r7, #184	@ 0xb8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40013800 	.word	0x40013800
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	48000400 	.word	0x48000400
 8000d20:	2000020c 	.word	0x2000020c
 8000d24:	40020008 	.word	0x40020008
 8000d28:	2000026c 	.word	0x2000026c
 8000d2c:	4002001c 	.word	0x4002001c

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <NMI_Handler+0x4>

08000d38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <MemManage_Handler+0x4>

08000d48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d86:	f000 fc97 	bl	80016b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d94:	4802      	ldr	r0, [pc, #8]	@ (8000da0 <DMA1_Channel1_IRQHandler+0x10>)
 8000d96:	f000 ff9f 	bl	8001cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000020c 	.word	0x2000020c

08000da4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000da8:	4802      	ldr	r0, [pc, #8]	@ (8000db4 <DMA1_Channel2_IRQHandler+0x10>)
 8000daa:	f000 ff95 	bl	8001cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2000026c 	.word	0x2000026c

08000db8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dbc:	4802      	ldr	r0, [pc, #8]	@ (8000dc8 <USART1_IRQHandler+0x10>)
 8000dbe:	f003 ff83 	bl	8004cc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000178 	.word	0x20000178

08000dcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000dd0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000dd4:	f001 fb86 	bl	80024e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	e00a      	b.n	8000e04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dee:	f3af 8000 	nop.w
 8000df2:	4601      	mov	r1, r0
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	1c5a      	adds	r2, r3, #1
 8000df8:	60ba      	str	r2, [r7, #8]
 8000dfa:	b2ca      	uxtb	r2, r1
 8000dfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	3301      	adds	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	dbf0      	blt.n	8000dee <_read+0x12>
  }

  return len;
 8000e0c:	687b      	ldr	r3, [r7, #4]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	60f8      	str	r0, [r7, #12]
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	e009      	b.n	8000e3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	1c5a      	adds	r2, r3, #1
 8000e2c:	60ba      	str	r2, [r7, #8]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fbad 	bl	8000590 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	dbf1      	blt.n	8000e28 <_write+0x12>
  }
  return len;
 8000e44:	687b      	ldr	r3, [r7, #4]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <_close>:

int _close(int file)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e76:	605a      	str	r2, [r3, #4]
  return 0;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <_isatty>:

int _isatty(int file)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec0:	4a14      	ldr	r2, [pc, #80]	@ (8000f14 <_sbrk+0x5c>)
 8000ec2:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <_sbrk+0x60>)
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ecc:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <_sbrk+0x64>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	@ (8000f20 <_sbrk+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d207      	bcs.n	8000ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee8:	f005 fc48 	bl	800677c <__errno>
 8000eec:	4603      	mov	r3, r0
 8000eee:	220c      	movs	r2, #12
 8000ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef6:	e009      	b.n	8000f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efe:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	4a05      	ldr	r2, [pc, #20]	@ (8000f1c <_sbrk+0x64>)
 8000f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200a0000 	.word	0x200a0000
 8000f18:	00000400 	.word	0x00000400
 8000f1c:	200003e8 	.word	0x200003e8
 8000f20:	20000598 	.word	0x20000598

08000f24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <SystemInit+0x20>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f2e:	4a05      	ldr	r2, [pc, #20]	@ (8000f44 <SystemInit+0x20>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f4c:	f7ff ffea 	bl	8000f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f50:	480c      	ldr	r0, [pc, #48]	@ (8000f84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f52:	490d      	ldr	r1, [pc, #52]	@ (8000f88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f54:	4a0d      	ldr	r2, [pc, #52]	@ (8000f8c <LoopForever+0xe>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f68:	4c0a      	ldr	r4, [pc, #40]	@ (8000f94 <LoopForever+0x16>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f76:	f005 fc07 	bl	8006788 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f7a:	f7ff fbd3 	bl	8000724 <main>

08000f7e <LoopForever>:

LoopForever:
    b LoopForever
 8000f7e:	e7fe      	b.n	8000f7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f80:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8000f8c:	08007424 	.word	0x08007424
  ldr r2, =_sbss
 8000f90:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8000f94:	20000598 	.word	0x20000598

08000f98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC1_IRQHandler>
	...

08000f9c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	@ 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000fa4:	4b27      	ldr	r3, [pc, #156]	@ (8001044 <I2Cx_MspInit+0xa8>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa8:	4a26      	ldr	r2, [pc, #152]	@ (8001044 <I2Cx_MspInit+0xa8>)
 8000faa:	f043 0302 	orr.w	r3, r3, #2
 8000fae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb0:	4b24      	ldr	r3, [pc, #144]	@ (8001044 <I2Cx_MspInit+0xa8>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000fbc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fc0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000fc2:	2312      	movs	r3, #18
 8000fc4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	481b      	ldr	r0, [pc, #108]	@ (8001048 <I2Cx_MspInit+0xac>)
 8000fda:	f000 ffcd 	bl	8001f78 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4818      	ldr	r0, [pc, #96]	@ (8001048 <I2Cx_MspInit+0xac>)
 8000fe6:	f000 ffc7 	bl	8001f78 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000fea:	4b16      	ldr	r3, [pc, #88]	@ (8001044 <I2Cx_MspInit+0xa8>)
 8000fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fee:	4a15      	ldr	r2, [pc, #84]	@ (8001044 <I2Cx_MspInit+0xa8>)
 8000ff0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ff4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ff6:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <I2Cx_MspInit+0xa8>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <I2Cx_MspInit+0xa8>)
 8001004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001006:	4a0f      	ldr	r2, [pc, #60]	@ (8001044 <I2Cx_MspInit+0xa8>)
 8001008:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800100c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800100e:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <I2Cx_MspInit+0xa8>)
 8001010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001012:	4a0c      	ldr	r2, [pc, #48]	@ (8001044 <I2Cx_MspInit+0xa8>)
 8001014:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001018:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	210f      	movs	r1, #15
 800101e:	2021      	movs	r0, #33	@ 0x21
 8001020:	f000 fc45 	bl	80018ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001024:	2021      	movs	r0, #33	@ 0x21
 8001026:	f000 fc5e 	bl	80018e6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	210f      	movs	r1, #15
 800102e:	2022      	movs	r0, #34	@ 0x22
 8001030:	f000 fc3d 	bl	80018ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001034:	2022      	movs	r0, #34	@ 0x22
 8001036:	f000 fc56 	bl	80018e6 <HAL_NVIC_EnableIRQ>
}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	@ 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000
 8001048:	48000400 	.word	0x48000400

0800104c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a12      	ldr	r2, [pc, #72]	@ (80010a0 <I2Cx_Init+0x54>)
 8001058:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a11      	ldr	r2, [pc, #68]	@ (80010a4 <I2Cx_Init+0x58>)
 800105e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff89 	bl	8000f9c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f001 fa42 	bl	8002514 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001090:	2100      	movs	r1, #0
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f001 ffee 	bl	8003074 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40005800 	.word	0x40005800
 80010a4:	00702681 	.word	0x00702681

080010a8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	@ 0x28
 80010ac:	af04      	add	r7, sp, #16
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	4608      	mov	r0, r1
 80010b2:	4611      	mov	r1, r2
 80010b4:	461a      	mov	r2, r3
 80010b6:	4603      	mov	r3, r0
 80010b8:	72fb      	strb	r3, [r7, #11]
 80010ba:	460b      	mov	r3, r1
 80010bc:	813b      	strh	r3, [r7, #8]
 80010be:	4613      	mov	r3, r2
 80010c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80010c6:	7afb      	ldrb	r3, [r7, #11]
 80010c8:	b299      	uxth	r1, r3
 80010ca:	88f8      	ldrh	r0, [r7, #6]
 80010cc:	893a      	ldrh	r2, [r7, #8]
 80010ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	6a3b      	ldr	r3, [r7, #32]
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	4603      	mov	r3, r0
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f001 fbf6 	bl	80028d0 <HAL_I2C_Mem_Read>
 80010e4:	4603      	mov	r3, r0
 80010e6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d004      	beq.n	80010f8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80010ee:	7afb      	ldrb	r3, [r7, #11]
 80010f0:	4619      	mov	r1, r3
 80010f2:	68f8      	ldr	r0, [r7, #12]
 80010f4:	f000 f832 	bl	800115c <I2Cx_Error>
  }
  return status;
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b08a      	sub	sp, #40	@ 0x28
 8001106:	af04      	add	r7, sp, #16
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	4608      	mov	r0, r1
 800110c:	4611      	mov	r1, r2
 800110e:	461a      	mov	r2, r3
 8001110:	4603      	mov	r3, r0
 8001112:	72fb      	strb	r3, [r7, #11]
 8001114:	460b      	mov	r3, r1
 8001116:	813b      	strh	r3, [r7, #8]
 8001118:	4613      	mov	r3, r2
 800111a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001120:	7afb      	ldrb	r3, [r7, #11]
 8001122:	b299      	uxth	r1, r3
 8001124:	88f8      	ldrh	r0, [r7, #6]
 8001126:	893a      	ldrh	r2, [r7, #8]
 8001128:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	4603      	mov	r3, r0
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f001 fab5 	bl	80026a8 <HAL_I2C_Mem_Write>
 800113e:	4603      	mov	r3, r0
 8001140:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001142:	7dfb      	ldrb	r3, [r7, #23]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d004      	beq.n	8001152 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001148:	7afb      	ldrb	r3, [r7, #11]
 800114a:	4619      	mov	r1, r3
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f000 f805 	bl	800115c <I2Cx_Error>
  }
  return status;
 8001152:	7dfb      	ldrb	r3, [r7, #23]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f001 fa6e 	bl	800264a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ff6c 	bl	800104c <I2Cx_Init>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001180:	4802      	ldr	r0, [pc, #8]	@ (800118c <SENSOR_IO_Init+0x10>)
 8001182:	f7ff ff63 	bl	800104c <I2Cx_Init>
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200003ec 	.word	0x200003ec

08001190 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af02      	add	r7, sp, #8
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
 800119a:	460b      	mov	r3, r1
 800119c:	71bb      	strb	r3, [r7, #6]
 800119e:	4613      	mov	r3, r2
 80011a0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	79f9      	ldrb	r1, [r7, #7]
 80011a8:	2301      	movs	r3, #1
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	1d7b      	adds	r3, r7, #5
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2301      	movs	r3, #1
 80011b2:	4803      	ldr	r0, [pc, #12]	@ (80011c0 <SENSOR_IO_Write+0x30>)
 80011b4:	f7ff ffa5 	bl	8001102 <I2Cx_WriteMultiple>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200003ec 	.word	0x200003ec

080011c4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	4603      	mov	r3, r0
 80011cc:	460a      	mov	r2, r1
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	4613      	mov	r3, r2
 80011d2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80011d8:	79bb      	ldrb	r3, [r7, #6]
 80011da:	b29a      	uxth	r2, r3
 80011dc:	79f9      	ldrb	r1, [r7, #7]
 80011de:	2301      	movs	r3, #1
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	f107 030f 	add.w	r3, r7, #15
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2301      	movs	r3, #1
 80011ea:	4804      	ldr	r0, [pc, #16]	@ (80011fc <SENSOR_IO_Read+0x38>)
 80011ec:	f7ff ff5c 	bl	80010a8 <I2Cx_ReadMultiple>

  return read_value;
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200003ec 	.word	0x200003ec

08001200 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af02      	add	r7, sp, #8
 8001206:	603a      	str	r2, [r7, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
 800120e:	460b      	mov	r3, r1
 8001210:	71bb      	strb	r3, [r7, #6]
 8001212:	4613      	mov	r3, r2
 8001214:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001216:	79bb      	ldrb	r3, [r7, #6]
 8001218:	b29a      	uxth	r2, r3
 800121a:	79f9      	ldrb	r1, [r7, #7]
 800121c:	88bb      	ldrh	r3, [r7, #4]
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2301      	movs	r3, #1
 8001226:	4804      	ldr	r0, [pc, #16]	@ (8001238 <SENSOR_IO_ReadMultiple+0x38>)
 8001228:	f7ff ff3e 	bl	80010a8 <I2Cx_ReadMultiple>
 800122c:	4603      	mov	r3, r0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200003ec 	.word	0x200003ec

0800123c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001242:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <BSP_HSENSOR_Init+0x38>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	20be      	movs	r0, #190	@ 0xbe
 8001248:	4798      	blx	r3
 800124a:	4603      	mov	r3, r0
 800124c:	2bbc      	cmp	r3, #188	@ 0xbc
 800124e:	d002      	beq.n	8001256 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	e009      	b.n	800126a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001256:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <BSP_HSENSOR_Init+0x3c>)
 8001258:	4a06      	ldr	r2, [pc, #24]	@ (8001274 <BSP_HSENSOR_Init+0x38>)
 800125a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <BSP_HSENSOR_Init+0x3c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	20be      	movs	r0, #190	@ 0xbe
 8001264:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800126a:	687b      	ldr	r3, [r7, #4]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000088 	.word	0x20000088
 8001278:	20000440 	.word	0x20000440

0800127c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001280:	4b04      	ldr	r3, [pc, #16]	@ (8001294 <BSP_HSENSOR_ReadHumidity+0x18>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	20be      	movs	r0, #190	@ 0xbe
 8001288:	4798      	blx	r3
 800128a:	eef0 7a40 	vmov.f32	s15, s0
}
 800128e:	eeb0 0a67 	vmov.f32	s0, s15
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000440 	.word	0x20000440

08001298 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80012a2:	4b09      	ldr	r3, [pc, #36]	@ (80012c8 <BSP_TSENSOR_Init+0x30>)
 80012a4:	4a09      	ldr	r2, [pc, #36]	@ (80012cc <BSP_TSENSOR_Init+0x34>)
 80012a6:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80012a8:	f7ff ff68 	bl	800117c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <BSP_TSENSOR_Init+0x30>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2100      	movs	r1, #0
 80012b4:	20be      	movs	r0, #190	@ 0xbe
 80012b6:	4798      	blx	r3

  ret = TSENSOR_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80012bc:	79fb      	ldrb	r3, [r7, #7]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000444 	.word	0x20000444
 80012cc:	20000094 	.word	0x20000094

080012d0 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80012d4:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <BSP_TSENSOR_ReadTemp+0x18>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	20be      	movs	r0, #190	@ 0xbe
 80012dc:	4798      	blx	r3
 80012de:	eef0 7a40 	vmov.f32	s15, s0
}
 80012e2:	eeb0 0a67 	vmov.f32	s0, s15
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000444 	.word	0x20000444

080012ec <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2120      	movs	r1, #32
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff61 	bl	80011c4 <SENSOR_IO_Read>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	f023 0304 	bic.w	r3, r3, #4
 800130c:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	f023 0303 	bic.w	r3, r3, #3
 800131c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
 8001328:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800132c:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	2120      	movs	r1, #32
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff2a 	bl	8001190 <SENSOR_IO_Write>
}
 800133c:	bf00      	nop
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800134e:	2300      	movs	r3, #0
 8001350:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8001352:	f7ff ff13 	bl	800117c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	210f      	movs	r1, #15
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff31 	bl	80011c4 <SENSOR_IO_Read>
 8001362:	4603      	mov	r3, r0
 8001364:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	b2d8      	uxtb	r0, r3
 800137e:	f107 020c 	add.w	r2, r7, #12
 8001382:	2302      	movs	r3, #2
 8001384:	21b0      	movs	r1, #176	@ 0xb0
 8001386:	f7ff ff3b 	bl	8001200 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800138a:	7b3b      	ldrb	r3, [r7, #12]
 800138c:	085b      	lsrs	r3, r3, #1
 800138e:	b2db      	uxtb	r3, r3
 8001390:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8001392:	7b7b      	ldrb	r3, [r7, #13]
 8001394:	085b      	lsrs	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800139a:	88fb      	ldrh	r3, [r7, #6]
 800139c:	b2d8      	uxtb	r0, r3
 800139e:	f107 020c 	add.w	r2, r7, #12
 80013a2:	2302      	movs	r3, #2
 80013a4:	21b6      	movs	r1, #182	@ 0xb6
 80013a6:	f7ff ff2b 	bl	8001200 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80013aa:	7b7b      	ldrb	r3, [r7, #13]
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	7b3b      	ldrb	r3, [r7, #12]
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	4313      	orrs	r3, r2
 80013b6:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	b2d8      	uxtb	r0, r3
 80013bc:	f107 020c 	add.w	r2, r7, #12
 80013c0:	2302      	movs	r3, #2
 80013c2:	21ba      	movs	r1, #186	@ 0xba
 80013c4:	f7ff ff1c 	bl	8001200 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80013c8:	7b7b      	ldrb	r3, [r7, #13]
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	b21a      	sxth	r2, r3
 80013ce:	7b3b      	ldrb	r3, [r7, #12]
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	4313      	orrs	r3, r2
 80013d4:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	b2d8      	uxtb	r0, r3
 80013da:	f107 020c 	add.w	r2, r7, #12
 80013de:	2302      	movs	r3, #2
 80013e0:	21a8      	movs	r1, #168	@ 0xa8
 80013e2:	f7ff ff0d 	bl	8001200 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80013e6:	7b7b      	ldrb	r3, [r7, #13]
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	b21a      	sxth	r2, r3
 80013ec:	7b3b      	ldrb	r3, [r7, #12]
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	4313      	orrs	r3, r2
 80013f2:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80013f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80013f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001406:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800140a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	ee07 3a90 	vmov	s15, r3
 8001414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001418:	ee67 6a27 	vmul.f32	s13, s14, s15
 800141c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001420:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001432:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001436:	ee07 3a90 	vmov	s15, r3
 800143a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001442:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001446:	edd7 7a04 	vldr	s15, [r7, #16]
 800144a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800144e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001452:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001456:	edd7 7a04 	vldr	s15, [r7, #16]
 800145a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80014a0 <HTS221_H_ReadHumidity+0x130>
 800145e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001466:	dd01      	ble.n	800146c <HTS221_H_ReadHumidity+0xfc>
 8001468:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <HTS221_H_ReadHumidity+0x134>)
 800146a:	e00a      	b.n	8001482 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 800146c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001470:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001478:	d502      	bpl.n	8001480 <HTS221_H_ReadHumidity+0x110>
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	e000      	b.n	8001482 <HTS221_H_ReadHumidity+0x112>
 8001480:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001482:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001484:	edd7 7a04 	vldr	s15, [r7, #16]
 8001488:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800148c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001490:	eef0 7a66 	vmov.f32	s15, s13
}
 8001494:	eeb0 0a67 	vmov.f32	s0, s15
 8001498:	3720      	adds	r7, #32
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	447a0000 	.word	0x447a0000
 80014a4:	447a0000 	.word	0x447a0000

080014a8 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80014b4:	88fb      	ldrh	r3, [r7, #6]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2120      	movs	r1, #32
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fe82 	bl	80011c4 <SENSOR_IO_Read>
 80014c0:	4603      	mov	r3, r0
 80014c2:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	f023 0304 	bic.w	r3, r3, #4
 80014ca:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	f023 0303 	bic.w	r3, r3, #3
 80014da:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014ea:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	2120      	movs	r1, #32
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fe4b 	bl	8001190 <SENSOR_IO_Write>
}
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b088      	sub	sp, #32
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	b2d8      	uxtb	r0, r3
 8001510:	f107 0208 	add.w	r2, r7, #8
 8001514:	2302      	movs	r3, #2
 8001516:	21b2      	movs	r1, #178	@ 0xb2
 8001518:	f7ff fe72 	bl	8001200 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2135      	movs	r1, #53	@ 0x35
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fe4e 	bl	80011c4 <SENSOR_IO_Read>
 8001528:	4603      	mov	r3, r0
 800152a:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800152c:	7ffb      	ldrb	r3, [r7, #31]
 800152e:	021b      	lsls	r3, r3, #8
 8001530:	b21b      	sxth	r3, r3
 8001532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001536:	b21a      	sxth	r2, r3
 8001538:	7a3b      	ldrb	r3, [r7, #8]
 800153a:	b21b      	sxth	r3, r3
 800153c:	4313      	orrs	r3, r2
 800153e:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001540:	7ffb      	ldrb	r3, [r7, #31]
 8001542:	019b      	lsls	r3, r3, #6
 8001544:	b21b      	sxth	r3, r3
 8001546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800154a:	b21a      	sxth	r2, r3
 800154c:	7a7b      	ldrb	r3, [r7, #9]
 800154e:	b21b      	sxth	r3, r3
 8001550:	4313      	orrs	r3, r2
 8001552:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001554:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001558:	10db      	asrs	r3, r3, #3
 800155a:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 800155c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001560:	10db      	asrs	r3, r3, #3
 8001562:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	b2d8      	uxtb	r0, r3
 8001568:	f107 0208 	add.w	r2, r7, #8
 800156c:	2304      	movs	r3, #4
 800156e:	21bc      	movs	r1, #188	@ 0xbc
 8001570:	f7ff fe46 	bl	8001200 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001574:	7a7b      	ldrb	r3, [r7, #9]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	7a3b      	ldrb	r3, [r7, #8]
 800157c:	b21b      	sxth	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001582:	7afb      	ldrb	r3, [r7, #11]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	b21a      	sxth	r2, r3
 8001588:	7abb      	ldrb	r3, [r7, #10]
 800158a:	b21b      	sxth	r3, r3
 800158c:	4313      	orrs	r3, r2
 800158e:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	b2d8      	uxtb	r0, r3
 8001594:	f107 0208 	add.w	r2, r7, #8
 8001598:	2302      	movs	r3, #2
 800159a:	21aa      	movs	r1, #170	@ 0xaa
 800159c:	f7ff fe30 	bl	8001200 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80015a0:	7a7b      	ldrb	r3, [r7, #9]
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	7a3b      	ldrb	r3, [r7, #8]
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	4313      	orrs	r3, r2
 80015ac:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80015ae:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80015b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	ee07 3a90 	vmov	s15, r3
 80015bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015c4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	ee07 3a90 	vmov	s15, r3
 80015ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80015d6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80015da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015ec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80015f0:	ee07 3a90 	vmov	s15, r3
 80015f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fc:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	ee07 3a90 	vmov	s15, r3
}
 8001606:	eeb0 0a67 	vmov.f32	s0, s15
 800160a:	3720      	adds	r7, #32
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161a:	2003      	movs	r0, #3
 800161c:	f000 f93c 	bl	8001898 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001620:	2000      	movs	r0, #0
 8001622:	f000 f80d 	bl	8001640 <HAL_InitTick>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d002      	beq.n	8001632 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	71fb      	strb	r3, [r7, #7]
 8001630:	e001      	b.n	8001636 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001632:	f7ff fa13 	bl	8000a5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001636:	79fb      	ldrb	r3, [r7, #7]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800164c:	4b17      	ldr	r3, [pc, #92]	@ (80016ac <HAL_InitTick+0x6c>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d023      	beq.n	800169c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001654:	4b16      	ldr	r3, [pc, #88]	@ (80016b0 <HAL_InitTick+0x70>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <HAL_InitTick+0x6c>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001662:	fbb3 f3f1 	udiv	r3, r3, r1
 8001666:	fbb2 f3f3 	udiv	r3, r2, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f949 	bl	8001902 <HAL_SYSTICK_Config>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10f      	bne.n	8001696 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b0f      	cmp	r3, #15
 800167a:	d809      	bhi.n	8001690 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800167c:	2200      	movs	r2, #0
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f000 f913 	bl	80018ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001688:	4a0a      	ldr	r2, [pc, #40]	@ (80016b4 <HAL_InitTick+0x74>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e007      	b.n	80016a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
 8001694:	e004      	b.n	80016a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	73fb      	strb	r3, [r7, #15]
 800169a:	e001      	b.n	80016a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200000a8 	.word	0x200000a8
 80016b0:	20000084 	.word	0x20000084
 80016b4:	200000a4 	.word	0x200000a4

080016b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_IncTick+0x20>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_IncTick+0x24>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a04      	ldr	r2, [pc, #16]	@ (80016dc <HAL_IncTick+0x24>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	200000a8 	.word	0x200000a8
 80016dc:	20000448 	.word	0x20000448

080016e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return uwTick;
 80016e4:	4b03      	ldr	r3, [pc, #12]	@ (80016f4 <HAL_GetTick+0x14>)
 80016e6:	681b      	ldr	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000448 	.word	0x20000448

080016f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001708:	4b0c      	ldr	r3, [pc, #48]	@ (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001714:	4013      	ands	r3, r2
 8001716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001720:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172a:	4a04      	ldr	r2, [pc, #16]	@ (800173c <__NVIC_SetPriorityGrouping+0x44>)
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	60d3      	str	r3, [r2, #12]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001744:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <__NVIC_GetPriorityGrouping+0x18>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	f003 0307 	and.w	r3, r3, #7
}
 800174e:	4618      	mov	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	2b00      	cmp	r3, #0
 800176c:	db0b      	blt.n	8001786 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	f003 021f 	and.w	r2, r3, #31
 8001774:	4907      	ldr	r1, [pc, #28]	@ (8001794 <__NVIC_EnableIRQ+0x38>)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	095b      	lsrs	r3, r3, #5
 800177c:	2001      	movs	r0, #1
 800177e:	fa00 f202 	lsl.w	r2, r0, r2
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000e100 	.word	0xe000e100

08001798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	6039      	str	r1, [r7, #0]
 80017a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	db0a      	blt.n	80017c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	490c      	ldr	r1, [pc, #48]	@ (80017e4 <__NVIC_SetPriority+0x4c>)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	0112      	lsls	r2, r2, #4
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	440b      	add	r3, r1
 80017bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c0:	e00a      	b.n	80017d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4908      	ldr	r1, [pc, #32]	@ (80017e8 <__NVIC_SetPriority+0x50>)
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	3b04      	subs	r3, #4
 80017d0:	0112      	lsls	r2, r2, #4
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	440b      	add	r3, r1
 80017d6:	761a      	strb	r2, [r3, #24]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000e100 	.word	0xe000e100
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b089      	sub	sp, #36	@ 0x24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f1c3 0307 	rsb	r3, r3, #7
 8001806:	2b04      	cmp	r3, #4
 8001808:	bf28      	it	cs
 800180a:	2304      	movcs	r3, #4
 800180c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3304      	adds	r3, #4
 8001812:	2b06      	cmp	r3, #6
 8001814:	d902      	bls.n	800181c <NVIC_EncodePriority+0x30>
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3b03      	subs	r3, #3
 800181a:	e000      	b.n	800181e <NVIC_EncodePriority+0x32>
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	f04f 32ff 	mov.w	r2, #4294967295
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43da      	mvns	r2, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	401a      	ands	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001834:	f04f 31ff 	mov.w	r1, #4294967295
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	43d9      	mvns	r1, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001844:	4313      	orrs	r3, r2
         );
}
 8001846:	4618      	mov	r0, r3
 8001848:	3724      	adds	r7, #36	@ 0x24
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001864:	d301      	bcc.n	800186a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001866:	2301      	movs	r3, #1
 8001868:	e00f      	b.n	800188a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186a:	4a0a      	ldr	r2, [pc, #40]	@ (8001894 <SysTick_Config+0x40>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001872:	210f      	movs	r1, #15
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f7ff ff8e 	bl	8001798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800187c:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <SysTick_Config+0x40>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001882:	4b04      	ldr	r3, [pc, #16]	@ (8001894 <SysTick_Config+0x40>)
 8001884:	2207      	movs	r2, #7
 8001886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	e000e010 	.word	0xe000e010

08001898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ff29 	bl	80016f8 <__NVIC_SetPriorityGrouping>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018c0:	f7ff ff3e 	bl	8001740 <__NVIC_GetPriorityGrouping>
 80018c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	6978      	ldr	r0, [r7, #20]
 80018cc:	f7ff ff8e 	bl	80017ec <NVIC_EncodePriority>
 80018d0:	4602      	mov	r2, r0
 80018d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff5d 	bl	8001798 <__NVIC_SetPriority>
}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff31 	bl	800175c <__NVIC_EnableIRQ>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ffa2 	bl	8001854 <SysTick_Config>
 8001910:	4603      	mov	r3, r0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e08d      	b.n	8001a4a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	4b47      	ldr	r3, [pc, #284]	@ (8001a54 <HAL_DMA_Init+0x138>)
 8001936:	429a      	cmp	r2, r3
 8001938:	d80f      	bhi.n	800195a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	4b45      	ldr	r3, [pc, #276]	@ (8001a58 <HAL_DMA_Init+0x13c>)
 8001942:	4413      	add	r3, r2
 8001944:	4a45      	ldr	r2, [pc, #276]	@ (8001a5c <HAL_DMA_Init+0x140>)
 8001946:	fba2 2303 	umull	r2, r3, r2, r3
 800194a:	091b      	lsrs	r3, r3, #4
 800194c:	009a      	lsls	r2, r3, #2
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a42      	ldr	r2, [pc, #264]	@ (8001a60 <HAL_DMA_Init+0x144>)
 8001956:	641a      	str	r2, [r3, #64]	@ 0x40
 8001958:	e00e      	b.n	8001978 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	4b40      	ldr	r3, [pc, #256]	@ (8001a64 <HAL_DMA_Init+0x148>)
 8001962:	4413      	add	r3, r2
 8001964:	4a3d      	ldr	r2, [pc, #244]	@ (8001a5c <HAL_DMA_Init+0x140>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	091b      	lsrs	r3, r3, #4
 800196c:	009a      	lsls	r2, r3, #2
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a3c      	ldr	r2, [pc, #240]	@ (8001a68 <HAL_DMA_Init+0x14c>)
 8001976:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2202      	movs	r2, #2
 800197c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800198e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001992:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800199c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4313      	orrs	r3, r2
 80019c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 fa72 	bl	8001eb4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019d8:	d102      	bne.n	80019e0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019f4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d010      	beq.n	8001a20 <HAL_DMA_Init+0x104>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d80c      	bhi.n	8001a20 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 fa92 	bl	8001f30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	e008      	b.n	8001a32 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40020407 	.word	0x40020407
 8001a58:	bffdfff8 	.word	0xbffdfff8
 8001a5c:	cccccccd 	.word	0xcccccccd
 8001a60:	40020000 	.word	0x40020000
 8001a64:	bffdfbf8 	.word	0xbffdfbf8
 8001a68:	40020400 	.word	0x40020400

08001a6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_DMA_Start_IT+0x20>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e066      	b.n	8001b5a <HAL_DMA_Start_IT+0xee>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d155      	bne.n	8001b4c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 0201 	bic.w	r2, r2, #1
 8001abc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	68b9      	ldr	r1, [r7, #8]
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 f9b6 	bl	8001e36 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d008      	beq.n	8001ae4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 020e 	orr.w	r2, r2, #14
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	e00f      	b.n	8001b04 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0204 	bic.w	r2, r2, #4
 8001af2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 020a 	orr.w	r2, r2, #10
 8001b02:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d007      	beq.n	8001b22 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b20:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d007      	beq.n	8001b3a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b38:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f042 0201 	orr.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	e005      	b.n	8001b58 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b54:	2302      	movs	r3, #2
 8001b56:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b085      	sub	sp, #20
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d008      	beq.n	8001b8c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e040      	b.n	8001c0e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 020e 	bic.w	r2, r2, #14
 8001b9a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ba6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001baa:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0201 	bic.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc0:	f003 021c 	and.w	r2, r3, #28
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	2101      	movs	r1, #1
 8001bca:	fa01 f202 	lsl.w	r2, r1, r2
 8001bce:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001bd8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00c      	beq.n	8001bfc <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bf0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001bfa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d005      	beq.n	8001c3e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2204      	movs	r2, #4
 8001c36:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
 8001c3c:	e047      	b.n	8001cce <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 020e 	bic.w	r2, r2, #14
 8001c4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0201 	bic.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c72:	f003 021c 	and.w	r2, r3, #28
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c80:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c8a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00c      	beq.n	8001cae <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ca2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001cac:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	4798      	blx	r3
    }
  }
  return status;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf4:	f003 031c 	and.w	r3, r3, #28
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d026      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x7a>
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d021      	beq.n	8001d52 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0320 	and.w	r3, r3, #32
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d107      	bne.n	8001d2c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0204 	bic.w	r2, r2, #4
 8001d2a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d30:	f003 021c 	and.w	r2, r3, #28
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d38:	2104      	movs	r1, #4
 8001d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d071      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001d50:	e06c      	b.n	8001e2c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d56:	f003 031c 	and.w	r3, r3, #28
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d02e      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0xec>
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d029      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0320 	and.w	r3, r3, #32
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10b      	bne.n	8001d96 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 020a 	bic.w	r2, r2, #10
 8001d8c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9a:	f003 021c 	and.w	r2, r3, #28
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	2102      	movs	r1, #2
 8001da4:	fa01 f202 	lsl.w	r2, r1, r2
 8001da8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d038      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001dc2:	e033      	b.n	8001e2c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc8:	f003 031c 	and.w	r3, r3, #28
 8001dcc:	2208      	movs	r2, #8
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d02a      	beq.n	8001e2e <HAL_DMA_IRQHandler+0x156>
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d025      	beq.n	8001e2e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 020e 	bic.w	r2, r2, #14
 8001df0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	f003 021c 	and.w	r2, r3, #28
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	2101      	movs	r1, #1
 8001e00:	fa01 f202 	lsl.w	r2, r1, r2
 8001e04:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d004      	beq.n	8001e2e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
}
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b085      	sub	sp, #20
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e4c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d004      	beq.n	8001e60 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001e5e:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e64:	f003 021c 	and.w	r2, r3, #28
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e72:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b10      	cmp	r3, #16
 8001e82:	d108      	bne.n	8001e96 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e94:	e007      	b.n	8001ea6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	60da      	str	r2, [r3, #12]
}
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b17      	ldr	r3, [pc, #92]	@ (8001f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d80a      	bhi.n	8001ede <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ecc:	089b      	lsrs	r3, r3, #2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001ed4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6493      	str	r3, [r2, #72]	@ 0x48
 8001edc:	e007      	b.n	8001eee <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	009a      	lsls	r2, r3, #2
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001ee8:	4413      	add	r3, r2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	3b08      	subs	r3, #8
 8001ef6:	4a0c      	ldr	r2, [pc, #48]	@ (8001f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001f04:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40020407 	.word	0x40020407
 8001f24:	4002081c 	.word	0x4002081c
 8001f28:	cccccccd 	.word	0xcccccccd
 8001f2c:	40020880 	.word	0x40020880

08001f30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	461a      	mov	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a08      	ldr	r2, [pc, #32]	@ (8001f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001f52:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	1000823f 	.word	0x1000823f
 8001f74:	40020940 	.word	0x40020940

08001f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f86:	e166      	b.n	8002256 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	4013      	ands	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 8158 	beq.w	8002250 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d005      	beq.n	8001fb8 <HAL_GPIO_Init+0x40>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d130      	bne.n	800201a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fee:	2201      	movs	r2, #1
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	091b      	lsrs	r3, r3, #4
 8002004:	f003 0201 	and.w	r2, r3, #1
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4313      	orrs	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	2b03      	cmp	r3, #3
 8002024:	d017      	beq.n	8002056 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	2203      	movs	r2, #3
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4013      	ands	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d123      	bne.n	80020aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	08da      	lsrs	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3208      	adds	r2, #8
 800206a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	220f      	movs	r2, #15
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4013      	ands	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	08da      	lsrs	r2, r3, #3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3208      	adds	r2, #8
 80020a4:	6939      	ldr	r1, [r7, #16]
 80020a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	2203      	movs	r2, #3
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0203 	and.w	r2, r3, #3
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80b2 	beq.w	8002250 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ec:	4b61      	ldr	r3, [pc, #388]	@ (8002274 <HAL_GPIO_Init+0x2fc>)
 80020ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f0:	4a60      	ldr	r2, [pc, #384]	@ (8002274 <HAL_GPIO_Init+0x2fc>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6613      	str	r3, [r2, #96]	@ 0x60
 80020f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002274 <HAL_GPIO_Init+0x2fc>)
 80020fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002104:	4a5c      	ldr	r2, [pc, #368]	@ (8002278 <HAL_GPIO_Init+0x300>)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	3302      	adds	r3, #2
 800210c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	220f      	movs	r2, #15
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800212e:	d02b      	beq.n	8002188 <HAL_GPIO_Init+0x210>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a52      	ldr	r2, [pc, #328]	@ (800227c <HAL_GPIO_Init+0x304>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d025      	beq.n	8002184 <HAL_GPIO_Init+0x20c>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a51      	ldr	r2, [pc, #324]	@ (8002280 <HAL_GPIO_Init+0x308>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d01f      	beq.n	8002180 <HAL_GPIO_Init+0x208>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a50      	ldr	r2, [pc, #320]	@ (8002284 <HAL_GPIO_Init+0x30c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d019      	beq.n	800217c <HAL_GPIO_Init+0x204>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a4f      	ldr	r2, [pc, #316]	@ (8002288 <HAL_GPIO_Init+0x310>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d013      	beq.n	8002178 <HAL_GPIO_Init+0x200>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a4e      	ldr	r2, [pc, #312]	@ (800228c <HAL_GPIO_Init+0x314>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d00d      	beq.n	8002174 <HAL_GPIO_Init+0x1fc>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a4d      	ldr	r2, [pc, #308]	@ (8002290 <HAL_GPIO_Init+0x318>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d007      	beq.n	8002170 <HAL_GPIO_Init+0x1f8>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a4c      	ldr	r2, [pc, #304]	@ (8002294 <HAL_GPIO_Init+0x31c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d101      	bne.n	800216c <HAL_GPIO_Init+0x1f4>
 8002168:	2307      	movs	r3, #7
 800216a:	e00e      	b.n	800218a <HAL_GPIO_Init+0x212>
 800216c:	2308      	movs	r3, #8
 800216e:	e00c      	b.n	800218a <HAL_GPIO_Init+0x212>
 8002170:	2306      	movs	r3, #6
 8002172:	e00a      	b.n	800218a <HAL_GPIO_Init+0x212>
 8002174:	2305      	movs	r3, #5
 8002176:	e008      	b.n	800218a <HAL_GPIO_Init+0x212>
 8002178:	2304      	movs	r3, #4
 800217a:	e006      	b.n	800218a <HAL_GPIO_Init+0x212>
 800217c:	2303      	movs	r3, #3
 800217e:	e004      	b.n	800218a <HAL_GPIO_Init+0x212>
 8002180:	2302      	movs	r3, #2
 8002182:	e002      	b.n	800218a <HAL_GPIO_Init+0x212>
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <HAL_GPIO_Init+0x212>
 8002188:	2300      	movs	r3, #0
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	f002 0203 	and.w	r2, r2, #3
 8002190:	0092      	lsls	r2, r2, #2
 8002192:	4093      	lsls	r3, r2
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800219a:	4937      	ldr	r1, [pc, #220]	@ (8002278 <HAL_GPIO_Init+0x300>)
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	089b      	lsrs	r3, r3, #2
 80021a0:	3302      	adds	r3, #2
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002298 <HAL_GPIO_Init+0x320>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021cc:	4a32      	ldr	r2, [pc, #200]	@ (8002298 <HAL_GPIO_Init+0x320>)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021d2:	4b31      	ldr	r3, [pc, #196]	@ (8002298 <HAL_GPIO_Init+0x320>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	43db      	mvns	r3, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4013      	ands	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021f6:	4a28      	ldr	r2, [pc, #160]	@ (8002298 <HAL_GPIO_Init+0x320>)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021fc:	4b26      	ldr	r3, [pc, #152]	@ (8002298 <HAL_GPIO_Init+0x320>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	43db      	mvns	r3, r3
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002220:	4a1d      	ldr	r2, [pc, #116]	@ (8002298 <HAL_GPIO_Init+0x320>)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002226:	4b1c      	ldr	r3, [pc, #112]	@ (8002298 <HAL_GPIO_Init+0x320>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	43db      	mvns	r3, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800224a:	4a13      	ldr	r2, [pc, #76]	@ (8002298 <HAL_GPIO_Init+0x320>)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	3301      	adds	r3, #1
 8002254:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	f47f ae91 	bne.w	8001f88 <HAL_GPIO_Init+0x10>
  }
}
 8002266:	bf00      	nop
 8002268:	bf00      	nop
 800226a:	371c      	adds	r7, #28
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	40021000 	.word	0x40021000
 8002278:	40010000 	.word	0x40010000
 800227c:	48000400 	.word	0x48000400
 8002280:	48000800 	.word	0x48000800
 8002284:	48000c00 	.word	0x48000c00
 8002288:	48001000 	.word	0x48001000
 800228c:	48001400 	.word	0x48001400
 8002290:	48001800 	.word	0x48001800
 8002294:	48001c00 	.word	0x48001c00
 8002298:	40010400 	.word	0x40010400

0800229c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800229c:	b480      	push	{r7}
 800229e:	b087      	sub	sp, #28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80022aa:	e0c9      	b.n	8002440 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80022ac:	2201      	movs	r2, #1
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	4013      	ands	r3, r2
 80022b8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80bc 	beq.w	800243a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80022c2:	4a66      	ldr	r2, [pc, #408]	@ (800245c <HAL_GPIO_DeInit+0x1c0>)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	089b      	lsrs	r3, r3, #2
 80022c8:	3302      	adds	r3, #2
 80022ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	220f      	movs	r2, #15
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4013      	ands	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80022ea:	d02b      	beq.n	8002344 <HAL_GPIO_DeInit+0xa8>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a5c      	ldr	r2, [pc, #368]	@ (8002460 <HAL_GPIO_DeInit+0x1c4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d025      	beq.n	8002340 <HAL_GPIO_DeInit+0xa4>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002464 <HAL_GPIO_DeInit+0x1c8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d01f      	beq.n	800233c <HAL_GPIO_DeInit+0xa0>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a5a      	ldr	r2, [pc, #360]	@ (8002468 <HAL_GPIO_DeInit+0x1cc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d019      	beq.n	8002338 <HAL_GPIO_DeInit+0x9c>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a59      	ldr	r2, [pc, #356]	@ (800246c <HAL_GPIO_DeInit+0x1d0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d013      	beq.n	8002334 <HAL_GPIO_DeInit+0x98>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a58      	ldr	r2, [pc, #352]	@ (8002470 <HAL_GPIO_DeInit+0x1d4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d00d      	beq.n	8002330 <HAL_GPIO_DeInit+0x94>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a57      	ldr	r2, [pc, #348]	@ (8002474 <HAL_GPIO_DeInit+0x1d8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d007      	beq.n	800232c <HAL_GPIO_DeInit+0x90>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a56      	ldr	r2, [pc, #344]	@ (8002478 <HAL_GPIO_DeInit+0x1dc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d101      	bne.n	8002328 <HAL_GPIO_DeInit+0x8c>
 8002324:	2307      	movs	r3, #7
 8002326:	e00e      	b.n	8002346 <HAL_GPIO_DeInit+0xaa>
 8002328:	2308      	movs	r3, #8
 800232a:	e00c      	b.n	8002346 <HAL_GPIO_DeInit+0xaa>
 800232c:	2306      	movs	r3, #6
 800232e:	e00a      	b.n	8002346 <HAL_GPIO_DeInit+0xaa>
 8002330:	2305      	movs	r3, #5
 8002332:	e008      	b.n	8002346 <HAL_GPIO_DeInit+0xaa>
 8002334:	2304      	movs	r3, #4
 8002336:	e006      	b.n	8002346 <HAL_GPIO_DeInit+0xaa>
 8002338:	2303      	movs	r3, #3
 800233a:	e004      	b.n	8002346 <HAL_GPIO_DeInit+0xaa>
 800233c:	2302      	movs	r3, #2
 800233e:	e002      	b.n	8002346 <HAL_GPIO_DeInit+0xaa>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <HAL_GPIO_DeInit+0xaa>
 8002344:	2300      	movs	r3, #0
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	f002 0203 	and.w	r2, r2, #3
 800234c:	0092      	lsls	r2, r2, #2
 800234e:	4093      	lsls	r3, r2
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	429a      	cmp	r2, r3
 8002354:	d132      	bne.n	80023bc <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002356:	4b49      	ldr	r3, [pc, #292]	@ (800247c <HAL_GPIO_DeInit+0x1e0>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	43db      	mvns	r3, r3
 800235e:	4947      	ldr	r1, [pc, #284]	@ (800247c <HAL_GPIO_DeInit+0x1e0>)
 8002360:	4013      	ands	r3, r2
 8002362:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002364:	4b45      	ldr	r3, [pc, #276]	@ (800247c <HAL_GPIO_DeInit+0x1e0>)
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	4943      	ldr	r1, [pc, #268]	@ (800247c <HAL_GPIO_DeInit+0x1e0>)
 800236e:	4013      	ands	r3, r2
 8002370:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002372:	4b42      	ldr	r3, [pc, #264]	@ (800247c <HAL_GPIO_DeInit+0x1e0>)
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	43db      	mvns	r3, r3
 800237a:	4940      	ldr	r1, [pc, #256]	@ (800247c <HAL_GPIO_DeInit+0x1e0>)
 800237c:	4013      	ands	r3, r2
 800237e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002380:	4b3e      	ldr	r3, [pc, #248]	@ (800247c <HAL_GPIO_DeInit+0x1e0>)
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	43db      	mvns	r3, r3
 8002388:	493c      	ldr	r1, [pc, #240]	@ (800247c <HAL_GPIO_DeInit+0x1e0>)
 800238a:	4013      	ands	r3, r2
 800238c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	220f      	movs	r2, #15
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800239e:	4a2f      	ldr	r2, [pc, #188]	@ (800245c <HAL_GPIO_DeInit+0x1c0>)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	089b      	lsrs	r3, r3, #2
 80023a4:	3302      	adds	r3, #2
 80023a6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	43da      	mvns	r2, r3
 80023ae:	482b      	ldr	r0, [pc, #172]	@ (800245c <HAL_GPIO_DeInit+0x1c0>)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	089b      	lsrs	r3, r3, #2
 80023b4:	400a      	ands	r2, r1
 80023b6:	3302      	adds	r3, #2
 80023b8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	2103      	movs	r1, #3
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	08da      	lsrs	r2, r3, #3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3208      	adds	r2, #8
 80023d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	220f      	movs	r2, #15
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	08d2      	lsrs	r2, r2, #3
 80023f0:	4019      	ands	r1, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3208      	adds	r2, #8
 80023f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	2103      	movs	r1, #3
 8002404:	fa01 f303 	lsl.w	r3, r1, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	401a      	ands	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	2101      	movs	r1, #1
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	401a      	ands	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68da      	ldr	r2, [r3, #12]
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	2103      	movs	r1, #3
 800242e:	fa01 f303 	lsl.w	r3, r1, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	401a      	ands	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	3301      	adds	r3, #1
 800243e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	f47f af2f 	bne.w	80022ac <HAL_GPIO_DeInit+0x10>
  }
}
 800244e:	bf00      	nop
 8002450:	bf00      	nop
 8002452:	371c      	adds	r7, #28
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	40010000 	.word	0x40010000
 8002460:	48000400 	.word	0x48000400
 8002464:	48000800 	.word	0x48000800
 8002468:	48000c00 	.word	0x48000c00
 800246c:	48001000 	.word	0x48001000
 8002470:	48001400 	.word	0x48001400
 8002474:	48001800 	.word	0x48001800
 8002478:	48001c00 	.word	0x48001c00
 800247c:	40010400 	.word	0x40010400

08002480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	807b      	strh	r3, [r7, #2]
 800248c:	4613      	mov	r3, r2
 800248e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002490:	787b      	ldrb	r3, [r7, #1]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002496:	887a      	ldrh	r2, [r7, #2]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800249c:	e002      	b.n	80024a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800249e:	887a      	ldrh	r2, [r7, #2]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024c2:	887a      	ldrh	r2, [r7, #2]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4013      	ands	r3, r2
 80024c8:	041a      	lsls	r2, r3, #16
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	43d9      	mvns	r1, r3
 80024ce:	887b      	ldrh	r3, [r7, #2]
 80024d0:	400b      	ands	r3, r1
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	619a      	str	r2, [r3, #24]
}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024ee:	4b08      	ldr	r3, [pc, #32]	@ (8002510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d006      	beq.n	8002508 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024fa:	4a05      	ldr	r2, [pc, #20]	@ (8002510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002500:	88fb      	ldrh	r3, [r7, #6]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe f882 	bl	800060c <HAL_GPIO_EXTI_Callback>
  }
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40010400 	.word	0x40010400

08002514 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e08d      	b.n	8002642 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe fab2 	bl	8000aa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2224      	movs	r2, #36	@ 0x24
 8002544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0201 	bic.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002564:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002574:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d107      	bne.n	800258e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	e006      	b.n	800259c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800259a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d108      	bne.n	80025b6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	e007      	b.n	80025c6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69d9      	ldr	r1, [r3, #28]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1a      	ldr	r2, [r3, #32]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2220      	movs	r2, #32
 800262e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e021      	b.n	80026a0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2224      	movs	r2, #36	@ 0x24
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0201 	bic.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f7fe fa73 	bl	8000b60 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af02      	add	r7, sp, #8
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	4608      	mov	r0, r1
 80026b2:	4611      	mov	r1, r2
 80026b4:	461a      	mov	r2, r3
 80026b6:	4603      	mov	r3, r0
 80026b8:	817b      	strh	r3, [r7, #10]
 80026ba:	460b      	mov	r3, r1
 80026bc:	813b      	strh	r3, [r7, #8]
 80026be:	4613      	mov	r3, r2
 80026c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b20      	cmp	r3, #32
 80026cc:	f040 80f9 	bne.w	80028c2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <HAL_I2C_Mem_Write+0x34>
 80026d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d105      	bne.n	80026e8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026e2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0ed      	b.n	80028c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_I2C_Mem_Write+0x4e>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e0e6      	b.n	80028c4 <HAL_I2C_Mem_Write+0x21c>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026fe:	f7fe ffef 	bl	80016e0 <HAL_GetTick>
 8002702:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	2319      	movs	r3, #25
 800270a:	2201      	movs	r2, #1
 800270c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 fac3 	bl	8002c9c <I2C_WaitOnFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0d1      	b.n	80028c4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2221      	movs	r2, #33	@ 0x21
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2240      	movs	r2, #64	@ 0x40
 800272c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a3a      	ldr	r2, [r7, #32]
 800273a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002740:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002748:	88f8      	ldrh	r0, [r7, #6]
 800274a:	893a      	ldrh	r2, [r7, #8]
 800274c:	8979      	ldrh	r1, [r7, #10]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	9301      	str	r3, [sp, #4]
 8002752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	4603      	mov	r3, r0
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 f9d3 	bl	8002b04 <I2C_RequestMemoryWrite>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0a9      	b.n	80028c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	2bff      	cmp	r3, #255	@ 0xff
 8002778:	d90e      	bls.n	8002798 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	22ff      	movs	r2, #255	@ 0xff
 800277e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002784:	b2da      	uxtb	r2, r3
 8002786:	8979      	ldrh	r1, [r7, #10]
 8002788:	2300      	movs	r3, #0
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fc3d 	bl	8003010 <I2C_TransferConfig>
 8002796:	e00f      	b.n	80027b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	8979      	ldrh	r1, [r7, #10]
 80027aa:	2300      	movs	r3, #0
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 fc2c 	bl	8003010 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 fabc 	bl	8002d3a <I2C_WaitOnTXISFlagUntilTimeout>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e07b      	b.n	80028c4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	781a      	ldrb	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d034      	beq.n	8002870 <HAL_I2C_Mem_Write+0x1c8>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800280a:	2b00      	cmp	r3, #0
 800280c:	d130      	bne.n	8002870 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002814:	2200      	movs	r2, #0
 8002816:	2180      	movs	r1, #128	@ 0x80
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fa3f 	bl	8002c9c <I2C_WaitOnFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e04d      	b.n	80028c4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282c:	b29b      	uxth	r3, r3
 800282e:	2bff      	cmp	r3, #255	@ 0xff
 8002830:	d90e      	bls.n	8002850 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	22ff      	movs	r2, #255	@ 0xff
 8002836:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800283c:	b2da      	uxtb	r2, r3
 800283e:	8979      	ldrh	r1, [r7, #10]
 8002840:	2300      	movs	r3, #0
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 fbe1 	bl	8003010 <I2C_TransferConfig>
 800284e:	e00f      	b.n	8002870 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285e:	b2da      	uxtb	r2, r3
 8002860:	8979      	ldrh	r1, [r7, #10]
 8002862:	2300      	movs	r3, #0
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fbd0 	bl	8003010 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002874:	b29b      	uxth	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d19e      	bne.n	80027b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 faa2 	bl	8002dc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e01a      	b.n	80028c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2220      	movs	r2, #32
 8002894:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6859      	ldr	r1, [r3, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4b0a      	ldr	r3, [pc, #40]	@ (80028cc <HAL_I2C_Mem_Write+0x224>)
 80028a2:	400b      	ands	r3, r1
 80028a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	e000      	b.n	80028c4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
  }
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	fe00e800 	.word	0xfe00e800

080028d0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	4608      	mov	r0, r1
 80028da:	4611      	mov	r1, r2
 80028dc:	461a      	mov	r2, r3
 80028de:	4603      	mov	r3, r0
 80028e0:	817b      	strh	r3, [r7, #10]
 80028e2:	460b      	mov	r3, r1
 80028e4:	813b      	strh	r3, [r7, #8]
 80028e6:	4613      	mov	r3, r2
 80028e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	f040 80fd 	bne.w	8002af2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <HAL_I2C_Mem_Read+0x34>
 80028fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002900:	2b00      	cmp	r3, #0
 8002902:	d105      	bne.n	8002910 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800290a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0f1      	b.n	8002af4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_I2C_Mem_Read+0x4e>
 800291a:	2302      	movs	r3, #2
 800291c:	e0ea      	b.n	8002af4 <HAL_I2C_Mem_Read+0x224>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002926:	f7fe fedb 	bl	80016e0 <HAL_GetTick>
 800292a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	2319      	movs	r3, #25
 8002932:	2201      	movs	r2, #1
 8002934:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 f9af 	bl	8002c9c <I2C_WaitOnFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0d5      	b.n	8002af4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2222      	movs	r2, #34	@ 0x22
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2240      	movs	r2, #64	@ 0x40
 8002954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a3a      	ldr	r2, [r7, #32]
 8002962:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002968:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002970:	88f8      	ldrh	r0, [r7, #6]
 8002972:	893a      	ldrh	r2, [r7, #8]
 8002974:	8979      	ldrh	r1, [r7, #10]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	4603      	mov	r3, r0
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 f913 	bl	8002bac <I2C_RequestMemoryRead>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0ad      	b.n	8002af4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800299c:	b29b      	uxth	r3, r3
 800299e:	2bff      	cmp	r3, #255	@ 0xff
 80029a0:	d90e      	bls.n	80029c0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	22ff      	movs	r2, #255	@ 0xff
 80029a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	8979      	ldrh	r1, [r7, #10]
 80029b0:	4b52      	ldr	r3, [pc, #328]	@ (8002afc <HAL_I2C_Mem_Read+0x22c>)
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 fb29 	bl	8003010 <I2C_TransferConfig>
 80029be:	e00f      	b.n	80029e0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	8979      	ldrh	r1, [r7, #10]
 80029d2:	4b4a      	ldr	r3, [pc, #296]	@ (8002afc <HAL_I2C_Mem_Read+0x22c>)
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 fb18 	bl	8003010 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e6:	2200      	movs	r2, #0
 80029e8:	2104      	movs	r1, #4
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f956 	bl	8002c9c <I2C_WaitOnFlagUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e07c      	b.n	8002af4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d034      	beq.n	8002aa0 <HAL_I2C_Mem_Read+0x1d0>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d130      	bne.n	8002aa0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a44:	2200      	movs	r2, #0
 8002a46:	2180      	movs	r1, #128	@ 0x80
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 f927 	bl	8002c9c <I2C_WaitOnFlagUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e04d      	b.n	8002af4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2bff      	cmp	r3, #255	@ 0xff
 8002a60:	d90e      	bls.n	8002a80 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	22ff      	movs	r2, #255	@ 0xff
 8002a66:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	8979      	ldrh	r1, [r7, #10]
 8002a70:	2300      	movs	r3, #0
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 fac9 	bl	8003010 <I2C_TransferConfig>
 8002a7e:	e00f      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	8979      	ldrh	r1, [r7, #10]
 8002a92:	2300      	movs	r3, #0
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 fab8 	bl	8003010 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d19a      	bne.n	80029e0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f98a 	bl	8002dc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e01a      	b.n	8002af4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b00 <HAL_I2C_Mem_Read+0x230>)
 8002ad2:	400b      	ands	r3, r1
 8002ad4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e000      	b.n	8002af4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002af2:	2302      	movs	r3, #2
  }
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	80002400 	.word	0x80002400
 8002b00:	fe00e800 	.word	0xfe00e800

08002b04 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	4608      	mov	r0, r1
 8002b0e:	4611      	mov	r1, r2
 8002b10:	461a      	mov	r2, r3
 8002b12:	4603      	mov	r3, r0
 8002b14:	817b      	strh	r3, [r7, #10]
 8002b16:	460b      	mov	r3, r1
 8002b18:	813b      	strh	r3, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	8979      	ldrh	r1, [r7, #10]
 8002b24:	4b20      	ldr	r3, [pc, #128]	@ (8002ba8 <I2C_RequestMemoryWrite+0xa4>)
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 fa6f 	bl	8003010 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	69b9      	ldr	r1, [r7, #24]
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 f8ff 	bl	8002d3a <I2C_WaitOnTXISFlagUntilTimeout>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e02c      	b.n	8002ba0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b46:	88fb      	ldrh	r3, [r7, #6]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d105      	bne.n	8002b58 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b4c:	893b      	ldrh	r3, [r7, #8]
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b56:	e015      	b.n	8002b84 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b58:	893b      	ldrh	r3, [r7, #8]
 8002b5a:	0a1b      	lsrs	r3, r3, #8
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	69b9      	ldr	r1, [r7, #24]
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 f8e5 	bl	8002d3a <I2C_WaitOnTXISFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e012      	b.n	8002ba0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b7a:	893b      	ldrh	r3, [r7, #8]
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2180      	movs	r1, #128	@ 0x80
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 f884 	bl	8002c9c <I2C_WaitOnFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	80002000 	.word	0x80002000

08002bac <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	4608      	mov	r0, r1
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4603      	mov	r3, r0
 8002bbc:	817b      	strh	r3, [r7, #10]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	813b      	strh	r3, [r7, #8]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	8979      	ldrh	r1, [r7, #10]
 8002bcc:	4b20      	ldr	r3, [pc, #128]	@ (8002c50 <I2C_RequestMemoryRead+0xa4>)
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 fa1c 	bl	8003010 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bd8:	69fa      	ldr	r2, [r7, #28]
 8002bda:	69b9      	ldr	r1, [r7, #24]
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f8ac 	bl	8002d3a <I2C_WaitOnTXISFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e02c      	b.n	8002c46 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bec:	88fb      	ldrh	r3, [r7, #6]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d105      	bne.n	8002bfe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bf2:	893b      	ldrh	r3, [r7, #8]
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bfc:	e015      	b.n	8002c2a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bfe:	893b      	ldrh	r3, [r7, #8]
 8002c00:	0a1b      	lsrs	r3, r3, #8
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c0c:	69fa      	ldr	r2, [r7, #28]
 8002c0e:	69b9      	ldr	r1, [r7, #24]
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 f892 	bl	8002d3a <I2C_WaitOnTXISFlagUntilTimeout>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e012      	b.n	8002c46 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c20:	893b      	ldrh	r3, [r7, #8]
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	2200      	movs	r2, #0
 8002c32:	2140      	movs	r1, #64	@ 0x40
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f831 	bl	8002c9c <I2C_WaitOnFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	80002000 	.word	0x80002000

08002c54 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d103      	bne.n	8002c72 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d007      	beq.n	8002c90 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	619a      	str	r2, [r3, #24]
  }
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	603b      	str	r3, [r7, #0]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cac:	e031      	b.n	8002d12 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d02d      	beq.n	8002d12 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb6:	f7fe fd13 	bl	80016e0 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d302      	bcc.n	8002ccc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d122      	bne.n	8002d12 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699a      	ldr	r2, [r3, #24]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	bf0c      	ite	eq
 8002cdc:	2301      	moveq	r3, #1
 8002cde:	2300      	movne	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d113      	bne.n	8002d12 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	f043 0220 	orr.w	r2, r3, #32
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e00f      	b.n	8002d32 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699a      	ldr	r2, [r3, #24]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	bf0c      	ite	eq
 8002d22:	2301      	moveq	r3, #1
 8002d24:	2300      	movne	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d0be      	beq.n	8002cae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d46:	e033      	b.n	8002db0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	68b9      	ldr	r1, [r7, #8]
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f87f 	bl	8002e50 <I2C_IsErrorOccurred>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e031      	b.n	8002dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d62:	d025      	beq.n	8002db0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d64:	f7fe fcbc 	bl	80016e0 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d302      	bcc.n	8002d7a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d11a      	bne.n	8002db0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d013      	beq.n	8002db0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8c:	f043 0220 	orr.w	r2, r3, #32
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e007      	b.n	8002dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d1c4      	bne.n	8002d48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dd4:	e02f      	b.n	8002e36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	68b9      	ldr	r1, [r7, #8]
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 f838 	bl	8002e50 <I2C_IsErrorOccurred>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e02d      	b.n	8002e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dea:	f7fe fc79 	bl	80016e0 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d302      	bcc.n	8002e00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d11a      	bne.n	8002e36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b20      	cmp	r3, #32
 8002e0c:	d013      	beq.n	8002e36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e12:	f043 0220 	orr.w	r2, r3, #32
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e007      	b.n	8002e46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b20      	cmp	r3, #32
 8002e42:	d1c8      	bne.n	8002dd6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	@ 0x28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d068      	beq.n	8002f4e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2210      	movs	r2, #16
 8002e82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e84:	e049      	b.n	8002f1a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d045      	beq.n	8002f1a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e8e:	f7fe fc27 	bl	80016e0 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d302      	bcc.n	8002ea4 <I2C_IsErrorOccurred+0x54>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d13a      	bne.n	8002f1a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002eb6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ec2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ec6:	d121      	bne.n	8002f0c <I2C_IsErrorOccurred+0xbc>
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ece:	d01d      	beq.n	8002f0c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d01a      	beq.n	8002f0c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ee4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ee6:	f7fe fbfb 	bl	80016e0 <HAL_GetTick>
 8002eea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eec:	e00e      	b.n	8002f0c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002eee:	f7fe fbf7 	bl	80016e0 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b19      	cmp	r3, #25
 8002efa:	d907      	bls.n	8002f0c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	f043 0320 	orr.w	r3, r3, #32
 8002f02:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002f0a:	e006      	b.n	8002f1a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	d1e9      	bne.n	8002eee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f003 0320 	and.w	r3, r3, #32
 8002f24:	2b20      	cmp	r3, #32
 8002f26:	d003      	beq.n	8002f30 <I2C_IsErrorOccurred+0xe0>
 8002f28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0aa      	beq.n	8002e86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d103      	bne.n	8002f40 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	f043 0304 	orr.w	r3, r3, #4
 8002f46:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00b      	beq.n	8002f78 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	f043 0301 	orr.w	r3, r3, #1
 8002f66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00b      	beq.n	8002f9a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	f043 0308 	orr.w	r3, r3, #8
 8002f88:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00b      	beq.n	8002fbc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	f043 0302 	orr.w	r3, r3, #2
 8002faa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01c      	beq.n	8002ffe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f7ff fe45 	bl	8002c54 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6859      	ldr	r1, [r3, #4]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800300c <I2C_IsErrorOccurred+0x1bc>)
 8002fd6:	400b      	ands	r3, r1
 8002fd8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002ffe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003002:	4618      	mov	r0, r3
 8003004:	3728      	adds	r7, #40	@ 0x28
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	fe00e800 	.word	0xfe00e800

08003010 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	607b      	str	r3, [r7, #4]
 800301a:	460b      	mov	r3, r1
 800301c:	817b      	strh	r3, [r7, #10]
 800301e:	4613      	mov	r3, r2
 8003020:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003022:	897b      	ldrh	r3, [r7, #10]
 8003024:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003028:	7a7b      	ldrb	r3, [r7, #9]
 800302a:	041b      	lsls	r3, r3, #16
 800302c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003030:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	4313      	orrs	r3, r2
 800303a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800303e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	0d5b      	lsrs	r3, r3, #21
 800304a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800304e:	4b08      	ldr	r3, [pc, #32]	@ (8003070 <I2C_TransferConfig+0x60>)
 8003050:	430b      	orrs	r3, r1
 8003052:	43db      	mvns	r3, r3
 8003054:	ea02 0103 	and.w	r1, r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	430a      	orrs	r2, r1
 8003060:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003062:	bf00      	nop
 8003064:	371c      	adds	r7, #28
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	03ff63ff 	.word	0x03ff63ff

08003074 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b20      	cmp	r3, #32
 8003088:	d138      	bne.n	80030fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003094:	2302      	movs	r3, #2
 8003096:	e032      	b.n	80030fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2224      	movs	r2, #36	@ 0x24
 80030a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0201 	bic.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6819      	ldr	r1, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	e000      	b.n	80030fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030fc:	2302      	movs	r3, #2
  }
}
 80030fe:	4618      	mov	r0, r3
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800310a:	b480      	push	{r7}
 800310c:	b085      	sub	sp, #20
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b20      	cmp	r3, #32
 800311e:	d139      	bne.n	8003194 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800312a:	2302      	movs	r3, #2
 800312c:	e033      	b.n	8003196 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2224      	movs	r2, #36	@ 0x24
 800313a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0201 	bic.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800315c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	e000      	b.n	8003196 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003194:	2302      	movs	r3, #2
  }
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031a8:	4b0d      	ldr	r3, [pc, #52]	@ (80031e0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031b4:	d102      	bne.n	80031bc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80031b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031ba:	e00b      	b.n	80031d4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80031bc:	4b08      	ldr	r3, [pc, #32]	@ (80031e0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80031be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80031c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ca:	d102      	bne.n	80031d2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80031cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031d0:	e000      	b.n	80031d4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80031d2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40007000 	.word	0x40007000

080031e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d141      	bne.n	8003276 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031f2:	4b4b      	ldr	r3, [pc, #300]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031fe:	d131      	bne.n	8003264 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003200:	4b47      	ldr	r3, [pc, #284]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003206:	4a46      	ldr	r2, [pc, #280]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003208:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800320c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003210:	4b43      	ldr	r3, [pc, #268]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003218:	4a41      	ldr	r2, [pc, #260]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800321e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003220:	4b40      	ldr	r3, [pc, #256]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2232      	movs	r2, #50	@ 0x32
 8003226:	fb02 f303 	mul.w	r3, r2, r3
 800322a:	4a3f      	ldr	r2, [pc, #252]	@ (8003328 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	0c9b      	lsrs	r3, r3, #18
 8003232:	3301      	adds	r3, #1
 8003234:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003236:	e002      	b.n	800323e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3b01      	subs	r3, #1
 800323c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800323e:	4b38      	ldr	r3, [pc, #224]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003246:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800324a:	d102      	bne.n	8003252 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f2      	bne.n	8003238 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003252:	4b33      	ldr	r3, [pc, #204]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800325a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325e:	d158      	bne.n	8003312 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e057      	b.n	8003314 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003264:	4b2e      	ldr	r3, [pc, #184]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800326a:	4a2d      	ldr	r2, [pc, #180]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800326c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003270:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003274:	e04d      	b.n	8003312 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800327c:	d141      	bne.n	8003302 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800327e:	4b28      	ldr	r3, [pc, #160]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800328a:	d131      	bne.n	80032f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800328c:	4b24      	ldr	r3, [pc, #144]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800328e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003292:	4a23      	ldr	r2, [pc, #140]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003298:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800329c:	4b20      	ldr	r3, [pc, #128]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80032ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003324 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2232      	movs	r2, #50	@ 0x32
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003328 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	0c9b      	lsrs	r3, r3, #18
 80032be:	3301      	adds	r3, #1
 80032c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032c2:	e002      	b.n	80032ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ca:	4b15      	ldr	r3, [pc, #84]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d6:	d102      	bne.n	80032de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f2      	bne.n	80032c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032de:	4b10      	ldr	r3, [pc, #64]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ea:	d112      	bne.n	8003312 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e011      	b.n	8003314 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003300:	e007      	b.n	8003312 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003302:	4b07      	ldr	r3, [pc, #28]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800330a:	4a05      	ldr	r2, [pc, #20]	@ (8003320 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003310:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3714      	adds	r7, #20
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	40007000 	.word	0x40007000
 8003324:	20000084 	.word	0x20000084
 8003328:	431bde83 	.word	0x431bde83

0800332c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d102      	bne.n	8003340 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	f000 bc08 	b.w	8003b50 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003340:	4b96      	ldr	r3, [pc, #600]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 030c 	and.w	r3, r3, #12
 8003348:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800334a:	4b94      	ldr	r3, [pc, #592]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80e4 	beq.w	800352a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d007      	beq.n	8003378 <HAL_RCC_OscConfig+0x4c>
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	2b0c      	cmp	r3, #12
 800336c:	f040 808b 	bne.w	8003486 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2b01      	cmp	r3, #1
 8003374:	f040 8087 	bne.w	8003486 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003378:	4b88      	ldr	r3, [pc, #544]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_RCC_OscConfig+0x64>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e3df      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1a      	ldr	r2, [r3, #32]
 8003394:	4b81      	ldr	r3, [pc, #516]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b00      	cmp	r3, #0
 800339e:	d004      	beq.n	80033aa <HAL_RCC_OscConfig+0x7e>
 80033a0:	4b7e      	ldr	r3, [pc, #504]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033a8:	e005      	b.n	80033b6 <HAL_RCC_OscConfig+0x8a>
 80033aa:	4b7c      	ldr	r3, [pc, #496]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80033ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033b0:	091b      	lsrs	r3, r3, #4
 80033b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d223      	bcs.n	8003402 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fdcc 	bl	8003f5c <RCC_SetFlashLatencyFromMSIRange>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e3c0      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033ce:	4b73      	ldr	r3, [pc, #460]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a72      	ldr	r2, [pc, #456]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80033d4:	f043 0308 	orr.w	r3, r3, #8
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	4b70      	ldr	r3, [pc, #448]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	496d      	ldr	r1, [pc, #436]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ec:	4b6b      	ldr	r3, [pc, #428]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	021b      	lsls	r3, r3, #8
 80033fa:	4968      	ldr	r1, [pc, #416]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	604b      	str	r3, [r1, #4]
 8003400:	e025      	b.n	800344e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003402:	4b66      	ldr	r3, [pc, #408]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a65      	ldr	r2, [pc, #404]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003408:	f043 0308 	orr.w	r3, r3, #8
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	4b63      	ldr	r3, [pc, #396]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	4960      	ldr	r1, [pc, #384]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 800341c:	4313      	orrs	r3, r2
 800341e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003420:	4b5e      	ldr	r3, [pc, #376]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	021b      	lsls	r3, r3, #8
 800342e:	495b      	ldr	r1, [pc, #364]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003430:	4313      	orrs	r3, r2
 8003432:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fd8c 	bl	8003f5c <RCC_SetFlashLatencyFromMSIRange>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e380      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800344e:	f000 fcc1 	bl	8003dd4 <HAL_RCC_GetSysClockFreq>
 8003452:	4602      	mov	r2, r0
 8003454:	4b51      	ldr	r3, [pc, #324]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	4950      	ldr	r1, [pc, #320]	@ (80035a0 <HAL_RCC_OscConfig+0x274>)
 8003460:	5ccb      	ldrb	r3, [r1, r3]
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	fa22 f303 	lsr.w	r3, r2, r3
 800346a:	4a4e      	ldr	r2, [pc, #312]	@ (80035a4 <HAL_RCC_OscConfig+0x278>)
 800346c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800346e:	4b4e      	ldr	r3, [pc, #312]	@ (80035a8 <HAL_RCC_OscConfig+0x27c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fe f8e4 	bl	8001640 <HAL_InitTick>
 8003478:	4603      	mov	r3, r0
 800347a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d052      	beq.n	8003528 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	e364      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d032      	beq.n	80034f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800348e:	4b43      	ldr	r3, [pc, #268]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a42      	ldr	r2, [pc, #264]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800349a:	f7fe f921 	bl	80016e0 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034a2:	f7fe f91d 	bl	80016e0 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e34d      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034b4:	4b39      	ldr	r3, [pc, #228]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0f0      	beq.n	80034a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034c0:	4b36      	ldr	r3, [pc, #216]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a35      	ldr	r2, [pc, #212]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80034c6:	f043 0308 	orr.w	r3, r3, #8
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	4b33      	ldr	r3, [pc, #204]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	4930      	ldr	r1, [pc, #192]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034de:	4b2f      	ldr	r3, [pc, #188]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	021b      	lsls	r3, r3, #8
 80034ec:	492b      	ldr	r1, [pc, #172]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	604b      	str	r3, [r1, #4]
 80034f2:	e01a      	b.n	800352a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034f4:	4b29      	ldr	r3, [pc, #164]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a28      	ldr	r2, [pc, #160]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003500:	f7fe f8ee 	bl	80016e0 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003508:	f7fe f8ea 	bl	80016e0 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e31a      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800351a:	4b20      	ldr	r3, [pc, #128]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x1dc>
 8003526:	e000      	b.n	800352a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003528:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0301 	and.w	r3, r3, #1
 8003532:	2b00      	cmp	r3, #0
 8003534:	d073      	beq.n	800361e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2b08      	cmp	r3, #8
 800353a:	d005      	beq.n	8003548 <HAL_RCC_OscConfig+0x21c>
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	2b0c      	cmp	r3, #12
 8003540:	d10e      	bne.n	8003560 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b03      	cmp	r3, #3
 8003546:	d10b      	bne.n	8003560 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	4b14      	ldr	r3, [pc, #80]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d063      	beq.n	800361c <HAL_RCC_OscConfig+0x2f0>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d15f      	bne.n	800361c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e2f7      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003568:	d106      	bne.n	8003578 <HAL_RCC_OscConfig+0x24c>
 800356a:	4b0c      	ldr	r3, [pc, #48]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a0b      	ldr	r2, [pc, #44]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e025      	b.n	80035c4 <HAL_RCC_OscConfig+0x298>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003580:	d114      	bne.n	80035ac <HAL_RCC_OscConfig+0x280>
 8003582:	4b06      	ldr	r3, [pc, #24]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a05      	ldr	r2, [pc, #20]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003588:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	4b03      	ldr	r3, [pc, #12]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a02      	ldr	r2, [pc, #8]	@ (800359c <HAL_RCC_OscConfig+0x270>)
 8003594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	e013      	b.n	80035c4 <HAL_RCC_OscConfig+0x298>
 800359c:	40021000 	.word	0x40021000
 80035a0:	08007370 	.word	0x08007370
 80035a4:	20000084 	.word	0x20000084
 80035a8:	200000a4 	.word	0x200000a4
 80035ac:	4ba0      	ldr	r3, [pc, #640]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a9f      	ldr	r2, [pc, #636]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80035b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	4b9d      	ldr	r3, [pc, #628]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a9c      	ldr	r2, [pc, #624]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80035be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d013      	beq.n	80035f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035cc:	f7fe f888 	bl	80016e0 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d4:	f7fe f884 	bl	80016e0 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	@ 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e2b4      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035e6:	4b92      	ldr	r3, [pc, #584]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x2a8>
 80035f2:	e014      	b.n	800361e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f4:	f7fe f874 	bl	80016e0 <HAL_GetTick>
 80035f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035fc:	f7fe f870 	bl	80016e0 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	@ 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e2a0      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800360e:	4b88      	ldr	r3, [pc, #544]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x2d0>
 800361a:	e000      	b.n	800361e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d060      	beq.n	80036ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	2b04      	cmp	r3, #4
 800362e:	d005      	beq.n	800363c <HAL_RCC_OscConfig+0x310>
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	2b0c      	cmp	r3, #12
 8003634:	d119      	bne.n	800366a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d116      	bne.n	800366a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800363c:	4b7c      	ldr	r3, [pc, #496]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_RCC_OscConfig+0x328>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e27d      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003654:	4b76      	ldr	r3, [pc, #472]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	061b      	lsls	r3, r3, #24
 8003662:	4973      	ldr	r1, [pc, #460]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003664:	4313      	orrs	r3, r2
 8003666:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003668:	e040      	b.n	80036ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d023      	beq.n	80036ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003672:	4b6f      	ldr	r3, [pc, #444]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a6e      	ldr	r2, [pc, #440]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800367c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367e:	f7fe f82f 	bl	80016e0 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003686:	f7fe f82b 	bl	80016e0 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e25b      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003698:	4b65      	ldr	r3, [pc, #404]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a4:	4b62      	ldr	r3, [pc, #392]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	061b      	lsls	r3, r3, #24
 80036b2:	495f      	ldr	r1, [pc, #380]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	604b      	str	r3, [r1, #4]
 80036b8:	e018      	b.n	80036ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a5c      	ldr	r2, [pc, #368]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80036c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c6:	f7fe f80b 	bl	80016e0 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ce:	f7fe f807 	bl	80016e0 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e237      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036e0:	4b53      	ldr	r3, [pc, #332]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1f0      	bne.n	80036ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d03c      	beq.n	8003772 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01c      	beq.n	800373a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003700:	4b4b      	ldr	r3, [pc, #300]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003706:	4a4a      	ldr	r2, [pc, #296]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003710:	f7fd ffe6 	bl	80016e0 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003718:	f7fd ffe2 	bl	80016e0 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e212      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800372a:	4b41      	ldr	r3, [pc, #260]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 800372c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0ef      	beq.n	8003718 <HAL_RCC_OscConfig+0x3ec>
 8003738:	e01b      	b.n	8003772 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800373a:	4b3d      	ldr	r3, [pc, #244]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 800373c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003740:	4a3b      	ldr	r2, [pc, #236]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003742:	f023 0301 	bic.w	r3, r3, #1
 8003746:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374a:	f7fd ffc9 	bl	80016e0 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003752:	f7fd ffc5 	bl	80016e0 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e1f5      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003764:	4b32      	ldr	r3, [pc, #200]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1ef      	bne.n	8003752 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 80a6 	beq.w	80038cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003780:	2300      	movs	r3, #0
 8003782:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003784:	4b2a      	ldr	r3, [pc, #168]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10d      	bne.n	80037ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003790:	4b27      	ldr	r3, [pc, #156]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003794:	4a26      	ldr	r2, [pc, #152]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800379a:	6593      	str	r3, [r2, #88]	@ 0x58
 800379c:	4b24      	ldr	r3, [pc, #144]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 800379e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a8:	2301      	movs	r3, #1
 80037aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ac:	4b21      	ldr	r3, [pc, #132]	@ (8003834 <HAL_RCC_OscConfig+0x508>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d118      	bne.n	80037ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003834 <HAL_RCC_OscConfig+0x508>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003834 <HAL_RCC_OscConfig+0x508>)
 80037be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037c4:	f7fd ff8c 	bl	80016e0 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037cc:	f7fd ff88 	bl	80016e0 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e1b8      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037de:	4b15      	ldr	r3, [pc, #84]	@ (8003834 <HAL_RCC_OscConfig+0x508>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d108      	bne.n	8003804 <HAL_RCC_OscConfig+0x4d8>
 80037f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80037f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003802:	e029      	b.n	8003858 <HAL_RCC_OscConfig+0x52c>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b05      	cmp	r3, #5
 800380a:	d115      	bne.n	8003838 <HAL_RCC_OscConfig+0x50c>
 800380c:	4b08      	ldr	r3, [pc, #32]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003812:	4a07      	ldr	r2, [pc, #28]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003814:	f043 0304 	orr.w	r3, r3, #4
 8003818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800381c:	4b04      	ldr	r3, [pc, #16]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003822:	4a03      	ldr	r2, [pc, #12]	@ (8003830 <HAL_RCC_OscConfig+0x504>)
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800382c:	e014      	b.n	8003858 <HAL_RCC_OscConfig+0x52c>
 800382e:	bf00      	nop
 8003830:	40021000 	.word	0x40021000
 8003834:	40007000 	.word	0x40007000
 8003838:	4b9d      	ldr	r3, [pc, #628]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800383e:	4a9c      	ldr	r2, [pc, #624]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003848:	4b99      	ldr	r3, [pc, #612]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 800384a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384e:	4a98      	ldr	r2, [pc, #608]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 8003850:	f023 0304 	bic.w	r3, r3, #4
 8003854:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d016      	beq.n	800388e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003860:	f7fd ff3e 	bl	80016e0 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003866:	e00a      	b.n	800387e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003868:	f7fd ff3a 	bl	80016e0 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e168      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800387e:	4b8c      	ldr	r3, [pc, #560]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 8003880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0ed      	beq.n	8003868 <HAL_RCC_OscConfig+0x53c>
 800388c:	e015      	b.n	80038ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388e:	f7fd ff27 	bl	80016e0 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003894:	e00a      	b.n	80038ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003896:	f7fd ff23 	bl	80016e0 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e151      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038ac:	4b80      	ldr	r3, [pc, #512]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1ed      	bne.n	8003896 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ba:	7ffb      	ldrb	r3, [r7, #31]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d105      	bne.n	80038cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c0:	4b7b      	ldr	r3, [pc, #492]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 80038c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c4:	4a7a      	ldr	r2, [pc, #488]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 80038c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d03c      	beq.n	8003952 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01c      	beq.n	800391a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038e0:	4b73      	ldr	r3, [pc, #460]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 80038e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80038e6:	4a72      	ldr	r2, [pc, #456]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f0:	f7fd fef6 	bl	80016e0 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038f8:	f7fd fef2 	bl	80016e0 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e122      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800390a:	4b69      	ldr	r3, [pc, #420]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 800390c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0ef      	beq.n	80038f8 <HAL_RCC_OscConfig+0x5cc>
 8003918:	e01b      	b.n	8003952 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800391a:	4b65      	ldr	r3, [pc, #404]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 800391c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003920:	4a63      	ldr	r2, [pc, #396]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 8003922:	f023 0301 	bic.w	r3, r3, #1
 8003926:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392a:	f7fd fed9 	bl	80016e0 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003932:	f7fd fed5 	bl	80016e0 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e105      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003944:	4b5a      	ldr	r3, [pc, #360]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 8003946:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1ef      	bne.n	8003932 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 80f9 	beq.w	8003b4e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003960:	2b02      	cmp	r3, #2
 8003962:	f040 80cf 	bne.w	8003b04 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003966:	4b52      	ldr	r3, [pc, #328]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f003 0203 	and.w	r2, r3, #3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003976:	429a      	cmp	r2, r3
 8003978:	d12c      	bne.n	80039d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003984:	3b01      	subs	r3, #1
 8003986:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d123      	bne.n	80039d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003996:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d11b      	bne.n	80039d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d113      	bne.n	80039d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b6:	085b      	lsrs	r3, r3, #1
 80039b8:	3b01      	subs	r3, #1
 80039ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d109      	bne.n	80039d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ca:	085b      	lsrs	r3, r3, #1
 80039cc:	3b01      	subs	r3, #1
 80039ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d071      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	2b0c      	cmp	r3, #12
 80039d8:	d068      	beq.n	8003aac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039da:	4b35      	ldr	r3, [pc, #212]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d105      	bne.n	80039f2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80039e6:	4b32      	ldr	r3, [pc, #200]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e0ac      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039f6:	4b2e      	ldr	r3, [pc, #184]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a2d      	ldr	r2, [pc, #180]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 80039fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a02:	f7fd fe6d 	bl	80016e0 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a0a:	f7fd fe69 	bl	80016e0 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e099      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a1c:	4b24      	ldr	r3, [pc, #144]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f0      	bne.n	8003a0a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a28:	4b21      	ldr	r3, [pc, #132]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 8003a2a:	68da      	ldr	r2, [r3, #12]
 8003a2c:	4b21      	ldr	r3, [pc, #132]	@ (8003ab4 <HAL_RCC_OscConfig+0x788>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a38:	3a01      	subs	r2, #1
 8003a3a:	0112      	lsls	r2, r2, #4
 8003a3c:	4311      	orrs	r1, r2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a42:	0212      	lsls	r2, r2, #8
 8003a44:	4311      	orrs	r1, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a4a:	0852      	lsrs	r2, r2, #1
 8003a4c:	3a01      	subs	r2, #1
 8003a4e:	0552      	lsls	r2, r2, #21
 8003a50:	4311      	orrs	r1, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a56:	0852      	lsrs	r2, r2, #1
 8003a58:	3a01      	subs	r2, #1
 8003a5a:	0652      	lsls	r2, r2, #25
 8003a5c:	4311      	orrs	r1, r2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a62:	06d2      	lsls	r2, r2, #27
 8003a64:	430a      	orrs	r2, r1
 8003a66:	4912      	ldr	r1, [pc, #72]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a6c:	4b10      	ldr	r3, [pc, #64]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a0f      	ldr	r2, [pc, #60]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 8003a72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a78:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4a0c      	ldr	r2, [pc, #48]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 8003a7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a84:	f7fd fe2c 	bl	80016e0 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8c:	f7fd fe28 	bl	80016e0 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e058      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a9e:	4b04      	ldr	r3, [pc, #16]	@ (8003ab0 <HAL_RCC_OscConfig+0x784>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aaa:	e050      	b.n	8003b4e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e04f      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ab8:	4b27      	ldr	r3, [pc, #156]	@ (8003b58 <HAL_RCC_OscConfig+0x82c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d144      	bne.n	8003b4e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ac4:	4b24      	ldr	r3, [pc, #144]	@ (8003b58 <HAL_RCC_OscConfig+0x82c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a23      	ldr	r2, [pc, #140]	@ (8003b58 <HAL_RCC_OscConfig+0x82c>)
 8003aca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ace:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ad0:	4b21      	ldr	r3, [pc, #132]	@ (8003b58 <HAL_RCC_OscConfig+0x82c>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4a20      	ldr	r2, [pc, #128]	@ (8003b58 <HAL_RCC_OscConfig+0x82c>)
 8003ad6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ada:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003adc:	f7fd fe00 	bl	80016e0 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae4:	f7fd fdfc 	bl	80016e0 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e02c      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af6:	4b18      	ldr	r3, [pc, #96]	@ (8003b58 <HAL_RCC_OscConfig+0x82c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f0      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x7b8>
 8003b02:	e024      	b.n	8003b4e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2b0c      	cmp	r3, #12
 8003b08:	d01f      	beq.n	8003b4a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b0a:	4b13      	ldr	r3, [pc, #76]	@ (8003b58 <HAL_RCC_OscConfig+0x82c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a12      	ldr	r2, [pc, #72]	@ (8003b58 <HAL_RCC_OscConfig+0x82c>)
 8003b10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b16:	f7fd fde3 	bl	80016e0 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b1e:	f7fd fddf 	bl	80016e0 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e00f      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b30:	4b09      	ldr	r3, [pc, #36]	@ (8003b58 <HAL_RCC_OscConfig+0x82c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1f0      	bne.n	8003b1e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b3c:	4b06      	ldr	r3, [pc, #24]	@ (8003b58 <HAL_RCC_OscConfig+0x82c>)
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	4905      	ldr	r1, [pc, #20]	@ (8003b58 <HAL_RCC_OscConfig+0x82c>)
 8003b42:	4b06      	ldr	r3, [pc, #24]	@ (8003b5c <HAL_RCC_OscConfig+0x830>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	60cb      	str	r3, [r1, #12]
 8003b48:	e001      	b.n	8003b4e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3720      	adds	r7, #32
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	feeefffc 	.word	0xfeeefffc

08003b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e11d      	b.n	8003db4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b78:	4b90      	ldr	r3, [pc, #576]	@ (8003dbc <HAL_RCC_ClockConfig+0x25c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d910      	bls.n	8003ba8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b86:	4b8d      	ldr	r3, [pc, #564]	@ (8003dbc <HAL_RCC_ClockConfig+0x25c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f023 020f 	bic.w	r2, r3, #15
 8003b8e:	498b      	ldr	r1, [pc, #556]	@ (8003dbc <HAL_RCC_ClockConfig+0x25c>)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b89      	ldr	r3, [pc, #548]	@ (8003dbc <HAL_RCC_ClockConfig+0x25c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e105      	b.n	8003db4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d010      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	4b81      	ldr	r3, [pc, #516]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d908      	bls.n	8003bd6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc4:	4b7e      	ldr	r3, [pc, #504]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	497b      	ldr	r1, [pc, #492]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d079      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b03      	cmp	r3, #3
 8003be8:	d11e      	bne.n	8003c28 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bea:	4b75      	ldr	r3, [pc, #468]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e0dc      	b.n	8003db4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003bfa:	f000 fa09 	bl	8004010 <RCC_GetSysClockFreqFromPLLSource>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4a70      	ldr	r2, [pc, #448]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d946      	bls.n	8003c94 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003c06:	4b6e      	ldr	r3, [pc, #440]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d140      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c12:	4b6b      	ldr	r3, [pc, #428]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c1a:	4a69      	ldr	r2, [pc, #420]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003c1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c22:	2380      	movs	r3, #128	@ 0x80
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	e035      	b.n	8003c94 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c30:	4b63      	ldr	r3, [pc, #396]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d115      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0b9      	b.n	8003db4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d107      	bne.n	8003c58 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c48:	4b5d      	ldr	r3, [pc, #372]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d109      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0ad      	b.n	8003db4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c58:	4b59      	ldr	r3, [pc, #356]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0a5      	b.n	8003db4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003c68:	f000 f8b4 	bl	8003dd4 <HAL_RCC_GetSysClockFreq>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	4a55      	ldr	r2, [pc, #340]	@ (8003dc4 <HAL_RCC_ClockConfig+0x264>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d90f      	bls.n	8003c94 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003c74:	4b52      	ldr	r3, [pc, #328]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d109      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c80:	4b4f      	ldr	r3, [pc, #316]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c88:	4a4d      	ldr	r2, [pc, #308]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c8e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c90:	2380      	movs	r3, #128	@ 0x80
 8003c92:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c94:	4b4a      	ldr	r3, [pc, #296]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f023 0203 	bic.w	r2, r3, #3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4947      	ldr	r1, [pc, #284]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca6:	f7fd fd1b 	bl	80016e0 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cac:	e00a      	b.n	8003cc4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cae:	f7fd fd17 	bl	80016e0 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e077      	b.n	8003db4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc4:	4b3e      	ldr	r3, [pc, #248]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 020c 	and.w	r2, r3, #12
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d1eb      	bne.n	8003cae <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b80      	cmp	r3, #128	@ 0x80
 8003cda:	d105      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003cdc:	4b38      	ldr	r3, [pc, #224]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4a37      	ldr	r2, [pc, #220]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003ce2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ce6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d010      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	4b31      	ldr	r3, [pc, #196]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d208      	bcs.n	8003d16 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d04:	4b2e      	ldr	r3, [pc, #184]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	492b      	ldr	r1, [pc, #172]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d16:	4b29      	ldr	r3, [pc, #164]	@ (8003dbc <HAL_RCC_ClockConfig+0x25c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d210      	bcs.n	8003d46 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d24:	4b25      	ldr	r3, [pc, #148]	@ (8003dbc <HAL_RCC_ClockConfig+0x25c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f023 020f 	bic.w	r2, r3, #15
 8003d2c:	4923      	ldr	r1, [pc, #140]	@ (8003dbc <HAL_RCC_ClockConfig+0x25c>)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d34:	4b21      	ldr	r3, [pc, #132]	@ (8003dbc <HAL_RCC_ClockConfig+0x25c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e036      	b.n	8003db4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d008      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d52:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	4918      	ldr	r1, [pc, #96]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d009      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d70:	4b13      	ldr	r3, [pc, #76]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4910      	ldr	r1, [pc, #64]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d84:	f000 f826 	bl	8003dd4 <HAL_RCC_GetSysClockFreq>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc0 <HAL_RCC_ClockConfig+0x260>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	091b      	lsrs	r3, r3, #4
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	490c      	ldr	r1, [pc, #48]	@ (8003dc8 <HAL_RCC_ClockConfig+0x268>)
 8003d96:	5ccb      	ldrb	r3, [r1, r3]
 8003d98:	f003 031f 	and.w	r3, r3, #31
 8003d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003da0:	4a0a      	ldr	r2, [pc, #40]	@ (8003dcc <HAL_RCC_ClockConfig+0x26c>)
 8003da2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003da4:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd0 <HAL_RCC_ClockConfig+0x270>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fd fc49 	bl	8001640 <HAL_InitTick>
 8003dae:	4603      	mov	r3, r0
 8003db0:	73fb      	strb	r3, [r7, #15]

  return status;
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3718      	adds	r7, #24
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40022000 	.word	0x40022000
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	04c4b400 	.word	0x04c4b400
 8003dc8:	08007370 	.word	0x08007370
 8003dcc:	20000084 	.word	0x20000084
 8003dd0:	200000a4 	.word	0x200000a4

08003dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b089      	sub	sp, #36	@ 0x24
 8003dd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61fb      	str	r3, [r7, #28]
 8003dde:	2300      	movs	r3, #0
 8003de0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003de2:	4b3e      	ldr	r3, [pc, #248]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x108>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dec:	4b3b      	ldr	r3, [pc, #236]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x108>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0x34>
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	2b0c      	cmp	r3, #12
 8003e00:	d121      	bne.n	8003e46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d11e      	bne.n	8003e46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e08:	4b34      	ldr	r3, [pc, #208]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d107      	bne.n	8003e24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e14:	4b31      	ldr	r3, [pc, #196]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e1a:	0a1b      	lsrs	r3, r3, #8
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	61fb      	str	r3, [r7, #28]
 8003e22:	e005      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e24:	4b2d      	ldr	r3, [pc, #180]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e30:	4a2b      	ldr	r2, [pc, #172]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10d      	bne.n	8003e5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e44:	e00a      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d102      	bne.n	8003e52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e4c:	4b25      	ldr	r3, [pc, #148]	@ (8003ee4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	e004      	b.n	8003e5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d101      	bne.n	8003e5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e58:	4b23      	ldr	r3, [pc, #140]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	2b0c      	cmp	r3, #12
 8003e60:	d134      	bne.n	8003ecc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e62:	4b1e      	ldr	r3, [pc, #120]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d003      	beq.n	8003e7a <HAL_RCC_GetSysClockFreq+0xa6>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b03      	cmp	r3, #3
 8003e76:	d003      	beq.n	8003e80 <HAL_RCC_GetSysClockFreq+0xac>
 8003e78:	e005      	b.n	8003e86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e7c:	617b      	str	r3, [r7, #20]
      break;
 8003e7e:	e005      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e80:	4b19      	ldr	r3, [pc, #100]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e82:	617b      	str	r3, [r7, #20]
      break;
 8003e84:	e002      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	617b      	str	r3, [r7, #20]
      break;
 8003e8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e8c:	4b13      	ldr	r3, [pc, #76]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	091b      	lsrs	r3, r3, #4
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	3301      	adds	r3, #1
 8003e98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e9a:	4b10      	ldr	r3, [pc, #64]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x108>)
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	0a1b      	lsrs	r3, r3, #8
 8003ea0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	fb03 f202 	mul.w	r2, r3, r2
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x108>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	0e5b      	lsrs	r3, r3, #25
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ecc:	69bb      	ldr	r3, [r7, #24]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3724      	adds	r7, #36	@ 0x24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	08007388 	.word	0x08007388
 8003ee4:	00f42400 	.word	0x00f42400
 8003ee8:	007a1200 	.word	0x007a1200

08003eec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef0:	4b03      	ldr	r3, [pc, #12]	@ (8003f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	20000084 	.word	0x20000084

08003f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f08:	f7ff fff0 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b06      	ldr	r3, [pc, #24]	@ (8003f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	0a1b      	lsrs	r3, r3, #8
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4904      	ldr	r1, [pc, #16]	@ (8003f2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	08007380 	.word	0x08007380

08003f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f34:	f7ff ffda 	bl	8003eec <HAL_RCC_GetHCLKFreq>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	4b06      	ldr	r3, [pc, #24]	@ (8003f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	0adb      	lsrs	r3, r3, #11
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	4904      	ldr	r1, [pc, #16]	@ (8003f58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f46:	5ccb      	ldrb	r3, [r1, r3]
 8003f48:	f003 031f 	and.w	r3, r3, #31
 8003f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40021000 	.word	0x40021000
 8003f58:	08007380 	.word	0x08007380

08003f5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f64:	2300      	movs	r3, #0
 8003f66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f68:	4b27      	ldr	r3, [pc, #156]	@ (8004008 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f74:	f7ff f916 	bl	80031a4 <HAL_PWREx_GetVoltageRange>
 8003f78:	6178      	str	r0, [r7, #20]
 8003f7a:	e014      	b.n	8003fa6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f7c:	4b22      	ldr	r3, [pc, #136]	@ (8004008 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f80:	4a21      	ldr	r2, [pc, #132]	@ (8004008 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f86:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f88:	4b1f      	ldr	r3, [pc, #124]	@ (8004008 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f94:	f7ff f906 	bl	80031a4 <HAL_PWREx_GetVoltageRange>
 8003f98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004008 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9e:	4a1a      	ldr	r2, [pc, #104]	@ (8004008 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003fa0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fa4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fac:	d10b      	bne.n	8003fc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b80      	cmp	r3, #128	@ 0x80
 8003fb2:	d913      	bls.n	8003fdc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2ba0      	cmp	r3, #160	@ 0xa0
 8003fb8:	d902      	bls.n	8003fc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fba:	2302      	movs	r3, #2
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	e00d      	b.n	8003fdc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	e00a      	b.n	8003fdc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8003fca:	d902      	bls.n	8003fd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003fcc:	2302      	movs	r3, #2
 8003fce:	613b      	str	r3, [r7, #16]
 8003fd0:	e004      	b.n	8003fdc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b70      	cmp	r3, #112	@ 0x70
 8003fd6:	d101      	bne.n	8003fdc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fd8:	2301      	movs	r3, #1
 8003fda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800400c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f023 020f 	bic.w	r2, r3, #15
 8003fe4:	4909      	ldr	r1, [pc, #36]	@ (800400c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fec:	4b07      	ldr	r3, [pc, #28]	@ (800400c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 030f 	and.w	r3, r3, #15
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d001      	beq.n	8003ffe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e000      	b.n	8004000 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40021000 	.word	0x40021000
 800400c:	40022000 	.word	0x40022000

08004010 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004016:	4b2d      	ldr	r3, [pc, #180]	@ (80040cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b03      	cmp	r3, #3
 8004024:	d00b      	beq.n	800403e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b03      	cmp	r3, #3
 800402a:	d825      	bhi.n	8004078 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d008      	beq.n	8004044 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b02      	cmp	r3, #2
 8004036:	d11f      	bne.n	8004078 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004038:	4b25      	ldr	r3, [pc, #148]	@ (80040d0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800403a:	613b      	str	r3, [r7, #16]
    break;
 800403c:	e01f      	b.n	800407e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800403e:	4b25      	ldr	r3, [pc, #148]	@ (80040d4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004040:	613b      	str	r3, [r7, #16]
    break;
 8004042:	e01c      	b.n	800407e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004044:	4b21      	ldr	r3, [pc, #132]	@ (80040cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b00      	cmp	r3, #0
 800404e:	d107      	bne.n	8004060 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004050:	4b1e      	ldr	r3, [pc, #120]	@ (80040cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004056:	0a1b      	lsrs	r3, r3, #8
 8004058:	f003 030f 	and.w	r3, r3, #15
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	e005      	b.n	800406c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004060:	4b1a      	ldr	r3, [pc, #104]	@ (80040cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800406c:	4a1a      	ldr	r2, [pc, #104]	@ (80040d8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004074:	613b      	str	r3, [r7, #16]
    break;
 8004076:	e002      	b.n	800407e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004078:	2300      	movs	r3, #0
 800407a:	613b      	str	r3, [r7, #16]
    break;
 800407c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800407e:	4b13      	ldr	r3, [pc, #76]	@ (80040cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	091b      	lsrs	r3, r3, #4
 8004084:	f003 030f 	and.w	r3, r3, #15
 8004088:	3301      	adds	r3, #1
 800408a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800408c:	4b0f      	ldr	r3, [pc, #60]	@ (80040cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	0a1b      	lsrs	r3, r3, #8
 8004092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	fb03 f202 	mul.w	r2, r3, r2
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040a4:	4b09      	ldr	r3, [pc, #36]	@ (80040cc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	0e5b      	lsrs	r3, r3, #25
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	3301      	adds	r3, #1
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040bc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80040be:	683b      	ldr	r3, [r7, #0]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	40021000 	.word	0x40021000
 80040d0:	00f42400 	.word	0x00f42400
 80040d4:	007a1200 	.word	0x007a1200
 80040d8:	08007388 	.word	0x08007388

080040dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040e4:	2300      	movs	r3, #0
 80040e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040e8:	2300      	movs	r3, #0
 80040ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d040      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040fc:	2b80      	cmp	r3, #128	@ 0x80
 80040fe:	d02a      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004100:	2b80      	cmp	r3, #128	@ 0x80
 8004102:	d825      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004104:	2b60      	cmp	r3, #96	@ 0x60
 8004106:	d026      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004108:	2b60      	cmp	r3, #96	@ 0x60
 800410a:	d821      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800410c:	2b40      	cmp	r3, #64	@ 0x40
 800410e:	d006      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004110:	2b40      	cmp	r3, #64	@ 0x40
 8004112:	d81d      	bhi.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004114:	2b00      	cmp	r3, #0
 8004116:	d009      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004118:	2b20      	cmp	r3, #32
 800411a:	d010      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800411c:	e018      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800411e:	4b89      	ldr	r3, [pc, #548]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	4a88      	ldr	r2, [pc, #544]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004128:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800412a:	e015      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	2100      	movs	r1, #0
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fb02 	bl	800473c <RCCEx_PLLSAI1_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800413c:	e00c      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3320      	adds	r3, #32
 8004142:	2100      	movs	r1, #0
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fbed 	bl	8004924 <RCCEx_PLLSAI2_Config>
 800414a:	4603      	mov	r3, r0
 800414c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800414e:	e003      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	74fb      	strb	r3, [r7, #19]
      break;
 8004154:	e000      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004158:	7cfb      	ldrb	r3, [r7, #19]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10b      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800415e:	4b79      	ldr	r3, [pc, #484]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004160:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004164:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800416c:	4975      	ldr	r1, [pc, #468]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004174:	e001      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004176:	7cfb      	ldrb	r3, [r7, #19]
 8004178:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d047      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800418e:	d030      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004194:	d82a      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004196:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800419a:	d02a      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800419c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041a0:	d824      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 80041a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041a6:	d008      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xde>
 80041a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041ac:	d81e      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x110>
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80041b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041b6:	d010      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80041b8:	e018      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041ba:	4b62      	ldr	r3, [pc, #392]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	4a61      	ldr	r2, [pc, #388]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041c4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041c6:	e015      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3304      	adds	r3, #4
 80041cc:	2100      	movs	r1, #0
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fab4 	bl	800473c <RCCEx_PLLSAI1_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041d8:	e00c      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3320      	adds	r3, #32
 80041de:	2100      	movs	r1, #0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fb9f 	bl	8004924 <RCCEx_PLLSAI2_Config>
 80041e6:	4603      	mov	r3, r0
 80041e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041ea:	e003      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	74fb      	strb	r3, [r7, #19]
      break;
 80041f0:	e000      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80041f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041f4:	7cfb      	ldrb	r3, [r7, #19]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10b      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041fa:	4b52      	ldr	r3, [pc, #328]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004200:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004208:	494e      	ldr	r1, [pc, #312]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004210:	e001      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004212:	7cfb      	ldrb	r3, [r7, #19]
 8004214:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 809f 	beq.w	8004362 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004224:	2300      	movs	r3, #0
 8004226:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004228:	4b46      	ldr	r3, [pc, #280]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800422a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800422c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004238:	2300      	movs	r3, #0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00d      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800423e:	4b41      	ldr	r3, [pc, #260]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004242:	4a40      	ldr	r2, [pc, #256]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004244:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004248:	6593      	str	r3, [r2, #88]	@ 0x58
 800424a:	4b3e      	ldr	r3, [pc, #248]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800424c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800424e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004256:	2301      	movs	r3, #1
 8004258:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800425a:	4b3b      	ldr	r3, [pc, #236]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a3a      	ldr	r2, [pc, #232]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004260:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004264:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004266:	f7fd fa3b 	bl	80016e0 <HAL_GetTick>
 800426a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800426c:	e009      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426e:	f7fd fa37 	bl	80016e0 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d902      	bls.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	74fb      	strb	r3, [r7, #19]
        break;
 8004280:	e005      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004282:	4b31      	ldr	r3, [pc, #196]	@ (8004348 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0ef      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800428e:	7cfb      	ldrb	r3, [r7, #19]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d15b      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004294:	4b2b      	ldr	r3, [pc, #172]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800429a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800429e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d01f      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d019      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042b2:	4b24      	ldr	r3, [pc, #144]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042be:	4b21      	ldr	r3, [pc, #132]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042de:	4a19      	ldr	r2, [pc, #100]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d016      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f0:	f7fd f9f6 	bl	80016e0 <HAL_GetTick>
 80042f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042f6:	e00b      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f8:	f7fd f9f2 	bl	80016e0 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004306:	4293      	cmp	r3, r2
 8004308:	d902      	bls.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	74fb      	strb	r3, [r7, #19]
            break;
 800430e:	e006      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004310:	4b0c      	ldr	r3, [pc, #48]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0ec      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800431e:	7cfb      	ldrb	r3, [r7, #19]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10c      	bne.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004324:	4b07      	ldr	r3, [pc, #28]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800432a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004334:	4903      	ldr	r1, [pc, #12]	@ (8004344 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800433c:	e008      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800433e:	7cfb      	ldrb	r3, [r7, #19]
 8004340:	74bb      	strb	r3, [r7, #18]
 8004342:	e005      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004344:	40021000 	.word	0x40021000
 8004348:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434c:	7cfb      	ldrb	r3, [r7, #19]
 800434e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004350:	7c7b      	ldrb	r3, [r7, #17]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d105      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004356:	4ba0      	ldr	r3, [pc, #640]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800435a:	4a9f      	ldr	r2, [pc, #636]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800435c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004360:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800436e:	4b9a      	ldr	r3, [pc, #616]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004374:	f023 0203 	bic.w	r2, r3, #3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800437c:	4996      	ldr	r1, [pc, #600]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d00a      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004390:	4b91      	ldr	r3, [pc, #580]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004396:	f023 020c 	bic.w	r2, r3, #12
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439e:	498e      	ldr	r1, [pc, #568]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043b2:	4b89      	ldr	r3, [pc, #548]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c0:	4985      	ldr	r1, [pc, #532]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043d4:	4b80      	ldr	r3, [pc, #512]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043e2:	497d      	ldr	r1, [pc, #500]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0310 	and.w	r3, r3, #16
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043f6:	4b78      	ldr	r3, [pc, #480]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004404:	4974      	ldr	r1, [pc, #464]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004418:	4b6f      	ldr	r3, [pc, #444]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004426:	496c      	ldr	r1, [pc, #432]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800443a:	4b67      	ldr	r3, [pc, #412]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004440:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004448:	4963      	ldr	r1, [pc, #396]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800445c:	4b5e      	ldr	r3, [pc, #376]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004462:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800446a:	495b      	ldr	r1, [pc, #364]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800447e:	4b56      	ldr	r3, [pc, #344]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004484:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800448c:	4952      	ldr	r1, [pc, #328]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044a0:	4b4d      	ldr	r3, [pc, #308]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ae:	494a      	ldr	r1, [pc, #296]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044c2:	4b45      	ldr	r3, [pc, #276]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d0:	4941      	ldr	r1, [pc, #260]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044e4:	4b3c      	ldr	r3, [pc, #240]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044ea:	f023 0203 	bic.w	r2, r3, #3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044f2:	4939      	ldr	r1, [pc, #228]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d028      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004506:	4b34      	ldr	r3, [pc, #208]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004514:	4930      	ldr	r1, [pc, #192]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004520:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004524:	d106      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004526:	4b2c      	ldr	r3, [pc, #176]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	4a2b      	ldr	r2, [pc, #172]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800452c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004530:	60d3      	str	r3, [r2, #12]
 8004532:	e011      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004538:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800453c:	d10c      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3304      	adds	r3, #4
 8004542:	2101      	movs	r1, #1
 8004544:	4618      	mov	r0, r3
 8004546:	f000 f8f9 	bl	800473c <RCCEx_PLLSAI1_Config>
 800454a:	4603      	mov	r3, r0
 800454c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800454e:	7cfb      	ldrb	r3, [r7, #19]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004554:	7cfb      	ldrb	r3, [r7, #19]
 8004556:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d04d      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004568:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800456c:	d108      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800456e:	4b1a      	ldr	r3, [pc, #104]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004570:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004574:	4a18      	ldr	r2, [pc, #96]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004576:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800457a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800457e:	e012      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004580:	4b15      	ldr	r3, [pc, #84]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004582:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004586:	4a14      	ldr	r2, [pc, #80]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004588:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800458c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004590:	4b11      	ldr	r3, [pc, #68]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004596:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800459e:	490e      	ldr	r1, [pc, #56]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045ae:	d106      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045b0:	4b09      	ldr	r3, [pc, #36]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4a08      	ldr	r2, [pc, #32]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045ba:	60d3      	str	r3, [r2, #12]
 80045bc:	e020      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045c6:	d109      	bne.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045c8:	4b03      	ldr	r3, [pc, #12]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	4a02      	ldr	r2, [pc, #8]	@ (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d2:	60d3      	str	r3, [r2, #12]
 80045d4:	e014      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80045d6:	bf00      	nop
 80045d8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80045e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045e4:	d10c      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3304      	adds	r3, #4
 80045ea:	2101      	movs	r1, #1
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 f8a5 	bl	800473c <RCCEx_PLLSAI1_Config>
 80045f2:	4603      	mov	r3, r0
 80045f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045f6:	7cfb      	ldrb	r3, [r7, #19]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80045fc:	7cfb      	ldrb	r3, [r7, #19]
 80045fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d028      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800460c:	4b4a      	ldr	r3, [pc, #296]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004612:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800461a:	4947      	ldr	r1, [pc, #284]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004626:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800462a:	d106      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800462c:	4b42      	ldr	r3, [pc, #264]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4a41      	ldr	r2, [pc, #260]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004632:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004636:	60d3      	str	r3, [r2, #12]
 8004638:	e011      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800463e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004642:	d10c      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3304      	adds	r3, #4
 8004648:	2101      	movs	r1, #1
 800464a:	4618      	mov	r0, r3
 800464c:	f000 f876 	bl	800473c <RCCEx_PLLSAI1_Config>
 8004650:	4603      	mov	r3, r0
 8004652:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004654:	7cfb      	ldrb	r3, [r7, #19]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800465a:	7cfb      	ldrb	r3, [r7, #19]
 800465c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d01e      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800466a:	4b33      	ldr	r3, [pc, #204]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004670:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800467a:	492f      	ldr	r1, [pc, #188]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004688:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800468c:	d10c      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3304      	adds	r3, #4
 8004692:	2102      	movs	r1, #2
 8004694:	4618      	mov	r0, r3
 8004696:	f000 f851 	bl	800473c <RCCEx_PLLSAI1_Config>
 800469a:	4603      	mov	r3, r0
 800469c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800469e:	7cfb      	ldrb	r3, [r7, #19]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00b      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046b4:	4b20      	ldr	r3, [pc, #128]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046ba:	f023 0204 	bic.w	r2, r3, #4
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046c4:	491c      	ldr	r1, [pc, #112]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00b      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80046d8:	4b17      	ldr	r3, [pc, #92]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046de:	f023 0218 	bic.w	r2, r3, #24
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e8:	4913      	ldr	r1, [pc, #76]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d017      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80046fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004702:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800470c:	490a      	ldr	r1, [pc, #40]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800471a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800471e:	d105      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004720:	4b05      	ldr	r3, [pc, #20]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	4a04      	ldr	r2, [pc, #16]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004726:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800472a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800472c:	7cbb      	ldrb	r3, [r7, #18]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40021000 	.word	0x40021000

0800473c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800474a:	4b72      	ldr	r3, [pc, #456]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1d8>)
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00e      	beq.n	8004774 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004756:	4b6f      	ldr	r3, [pc, #444]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f003 0203 	and.w	r2, r3, #3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d103      	bne.n	800476e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
       ||
 800476a:	2b00      	cmp	r3, #0
 800476c:	d142      	bne.n	80047f4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	73fb      	strb	r3, [r7, #15]
 8004772:	e03f      	b.n	80047f4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b03      	cmp	r3, #3
 800477a:	d018      	beq.n	80047ae <RCCEx_PLLSAI1_Config+0x72>
 800477c:	2b03      	cmp	r3, #3
 800477e:	d825      	bhi.n	80047cc <RCCEx_PLLSAI1_Config+0x90>
 8004780:	2b01      	cmp	r3, #1
 8004782:	d002      	beq.n	800478a <RCCEx_PLLSAI1_Config+0x4e>
 8004784:	2b02      	cmp	r3, #2
 8004786:	d009      	beq.n	800479c <RCCEx_PLLSAI1_Config+0x60>
 8004788:	e020      	b.n	80047cc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800478a:	4b62      	ldr	r3, [pc, #392]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1d8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d11d      	bne.n	80047d2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800479a:	e01a      	b.n	80047d2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800479c:	4b5d      	ldr	r3, [pc, #372]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1d8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d116      	bne.n	80047d6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ac:	e013      	b.n	80047d6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047ae:	4b59      	ldr	r3, [pc, #356]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10f      	bne.n	80047da <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047ba:	4b56      	ldr	r3, [pc, #344]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d109      	bne.n	80047da <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047ca:	e006      	b.n	80047da <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	73fb      	strb	r3, [r7, #15]
      break;
 80047d0:	e004      	b.n	80047dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047d2:	bf00      	nop
 80047d4:	e002      	b.n	80047dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047d6:	bf00      	nop
 80047d8:	e000      	b.n	80047dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047da:	bf00      	nop
    }

    if(status == HAL_OK)
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d108      	bne.n	80047f4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80047e2:	4b4c      	ldr	r3, [pc, #304]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f023 0203 	bic.w	r2, r3, #3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4949      	ldr	r1, [pc, #292]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f040 8086 	bne.w	8004908 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047fc:	4b45      	ldr	r3, [pc, #276]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a44      	ldr	r2, [pc, #272]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004802:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004806:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004808:	f7fc ff6a 	bl	80016e0 <HAL_GetTick>
 800480c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800480e:	e009      	b.n	8004824 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004810:	f7fc ff66 	bl	80016e0 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d902      	bls.n	8004824 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	73fb      	strb	r3, [r7, #15]
        break;
 8004822:	e005      	b.n	8004830 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004824:	4b3b      	ldr	r3, [pc, #236]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1ef      	bne.n	8004810 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d168      	bne.n	8004908 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d113      	bne.n	8004864 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800483c:	4b35      	ldr	r3, [pc, #212]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1d8>)
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	4b35      	ldr	r3, [pc, #212]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004842:	4013      	ands	r3, r2
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6892      	ldr	r2, [r2, #8]
 8004848:	0211      	lsls	r1, r2, #8
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	68d2      	ldr	r2, [r2, #12]
 800484e:	06d2      	lsls	r2, r2, #27
 8004850:	4311      	orrs	r1, r2
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6852      	ldr	r2, [r2, #4]
 8004856:	3a01      	subs	r2, #1
 8004858:	0112      	lsls	r2, r2, #4
 800485a:	430a      	orrs	r2, r1
 800485c:	492d      	ldr	r1, [pc, #180]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1d8>)
 800485e:	4313      	orrs	r3, r2
 8004860:	610b      	str	r3, [r1, #16]
 8004862:	e02d      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d115      	bne.n	8004896 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800486a:	4b2a      	ldr	r3, [pc, #168]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1d8>)
 800486c:	691a      	ldr	r2, [r3, #16]
 800486e:	4b2b      	ldr	r3, [pc, #172]	@ (800491c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004870:	4013      	ands	r3, r2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6892      	ldr	r2, [r2, #8]
 8004876:	0211      	lsls	r1, r2, #8
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6912      	ldr	r2, [r2, #16]
 800487c:	0852      	lsrs	r2, r2, #1
 800487e:	3a01      	subs	r2, #1
 8004880:	0552      	lsls	r2, r2, #21
 8004882:	4311      	orrs	r1, r2
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6852      	ldr	r2, [r2, #4]
 8004888:	3a01      	subs	r2, #1
 800488a:	0112      	lsls	r2, r2, #4
 800488c:	430a      	orrs	r2, r1
 800488e:	4921      	ldr	r1, [pc, #132]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004890:	4313      	orrs	r3, r2
 8004892:	610b      	str	r3, [r1, #16]
 8004894:	e014      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004896:	4b1f      	ldr	r3, [pc, #124]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	4b21      	ldr	r3, [pc, #132]	@ (8004920 <RCCEx_PLLSAI1_Config+0x1e4>)
 800489c:	4013      	ands	r3, r2
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6892      	ldr	r2, [r2, #8]
 80048a2:	0211      	lsls	r1, r2, #8
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6952      	ldr	r2, [r2, #20]
 80048a8:	0852      	lsrs	r2, r2, #1
 80048aa:	3a01      	subs	r2, #1
 80048ac:	0652      	lsls	r2, r2, #25
 80048ae:	4311      	orrs	r1, r2
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6852      	ldr	r2, [r2, #4]
 80048b4:	3a01      	subs	r2, #1
 80048b6:	0112      	lsls	r2, r2, #4
 80048b8:	430a      	orrs	r2, r1
 80048ba:	4916      	ldr	r1, [pc, #88]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048c0:	4b14      	ldr	r3, [pc, #80]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a13      	ldr	r2, [pc, #76]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048cc:	f7fc ff08 	bl	80016e0 <HAL_GetTick>
 80048d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048d2:	e009      	b.n	80048e8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048d4:	f7fc ff04 	bl	80016e0 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d902      	bls.n	80048e8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	73fb      	strb	r3, [r7, #15]
          break;
 80048e6:	e005      	b.n	80048f4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0ef      	beq.n	80048d4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048fa:	4b06      	ldr	r3, [pc, #24]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	4904      	ldr	r1, [pc, #16]	@ (8004914 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004904:	4313      	orrs	r3, r2
 8004906:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004908:	7bfb      	ldrb	r3, [r7, #15]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40021000 	.word	0x40021000
 8004918:	07ff800f 	.word	0x07ff800f
 800491c:	ff9f800f 	.word	0xff9f800f
 8004920:	f9ff800f 	.word	0xf9ff800f

08004924 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004932:	4b72      	ldr	r3, [pc, #456]	@ (8004afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00e      	beq.n	800495c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800493e:	4b6f      	ldr	r3, [pc, #444]	@ (8004afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f003 0203 	and.w	r2, r3, #3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d103      	bne.n	8004956 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
       ||
 8004952:	2b00      	cmp	r3, #0
 8004954:	d142      	bne.n	80049dc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	73fb      	strb	r3, [r7, #15]
 800495a:	e03f      	b.n	80049dc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b03      	cmp	r3, #3
 8004962:	d018      	beq.n	8004996 <RCCEx_PLLSAI2_Config+0x72>
 8004964:	2b03      	cmp	r3, #3
 8004966:	d825      	bhi.n	80049b4 <RCCEx_PLLSAI2_Config+0x90>
 8004968:	2b01      	cmp	r3, #1
 800496a:	d002      	beq.n	8004972 <RCCEx_PLLSAI2_Config+0x4e>
 800496c:	2b02      	cmp	r3, #2
 800496e:	d009      	beq.n	8004984 <RCCEx_PLLSAI2_Config+0x60>
 8004970:	e020      	b.n	80049b4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004972:	4b62      	ldr	r3, [pc, #392]	@ (8004afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d11d      	bne.n	80049ba <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004982:	e01a      	b.n	80049ba <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004984:	4b5d      	ldr	r3, [pc, #372]	@ (8004afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800498c:	2b00      	cmp	r3, #0
 800498e:	d116      	bne.n	80049be <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004994:	e013      	b.n	80049be <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004996:	4b59      	ldr	r3, [pc, #356]	@ (8004afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10f      	bne.n	80049c2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049a2:	4b56      	ldr	r3, [pc, #344]	@ (8004afc <RCCEx_PLLSAI2_Config+0x1d8>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d109      	bne.n	80049c2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049b2:	e006      	b.n	80049c2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	73fb      	strb	r3, [r7, #15]
      break;
 80049b8:	e004      	b.n	80049c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80049ba:	bf00      	nop
 80049bc:	e002      	b.n	80049c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80049be:	bf00      	nop
 80049c0:	e000      	b.n	80049c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80049c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d108      	bne.n	80049dc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80049ca:	4b4c      	ldr	r3, [pc, #304]	@ (8004afc <RCCEx_PLLSAI2_Config+0x1d8>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f023 0203 	bic.w	r2, r3, #3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4949      	ldr	r1, [pc, #292]	@ (8004afc <RCCEx_PLLSAI2_Config+0x1d8>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f040 8086 	bne.w	8004af0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049e4:	4b45      	ldr	r3, [pc, #276]	@ (8004afc <RCCEx_PLLSAI2_Config+0x1d8>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a44      	ldr	r2, [pc, #272]	@ (8004afc <RCCEx_PLLSAI2_Config+0x1d8>)
 80049ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f0:	f7fc fe76 	bl	80016e0 <HAL_GetTick>
 80049f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049f6:	e009      	b.n	8004a0c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049f8:	f7fc fe72 	bl	80016e0 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d902      	bls.n	8004a0c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	73fb      	strb	r3, [r7, #15]
        break;
 8004a0a:	e005      	b.n	8004a18 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a0c:	4b3b      	ldr	r3, [pc, #236]	@ (8004afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1ef      	bne.n	80049f8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d168      	bne.n	8004af0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d113      	bne.n	8004a4c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a24:	4b35      	ldr	r3, [pc, #212]	@ (8004afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a26:	695a      	ldr	r2, [r3, #20]
 8004a28:	4b35      	ldr	r3, [pc, #212]	@ (8004b00 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6892      	ldr	r2, [r2, #8]
 8004a30:	0211      	lsls	r1, r2, #8
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	68d2      	ldr	r2, [r2, #12]
 8004a36:	06d2      	lsls	r2, r2, #27
 8004a38:	4311      	orrs	r1, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6852      	ldr	r2, [r2, #4]
 8004a3e:	3a01      	subs	r2, #1
 8004a40:	0112      	lsls	r2, r2, #4
 8004a42:	430a      	orrs	r2, r1
 8004a44:	492d      	ldr	r1, [pc, #180]	@ (8004afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	614b      	str	r3, [r1, #20]
 8004a4a:	e02d      	b.n	8004aa8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d115      	bne.n	8004a7e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a52:	4b2a      	ldr	r3, [pc, #168]	@ (8004afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a54:	695a      	ldr	r2, [r3, #20]
 8004a56:	4b2b      	ldr	r3, [pc, #172]	@ (8004b04 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6892      	ldr	r2, [r2, #8]
 8004a5e:	0211      	lsls	r1, r2, #8
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6912      	ldr	r2, [r2, #16]
 8004a64:	0852      	lsrs	r2, r2, #1
 8004a66:	3a01      	subs	r2, #1
 8004a68:	0552      	lsls	r2, r2, #21
 8004a6a:	4311      	orrs	r1, r2
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	6852      	ldr	r2, [r2, #4]
 8004a70:	3a01      	subs	r2, #1
 8004a72:	0112      	lsls	r2, r2, #4
 8004a74:	430a      	orrs	r2, r1
 8004a76:	4921      	ldr	r1, [pc, #132]	@ (8004afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	614b      	str	r3, [r1, #20]
 8004a7c:	e014      	b.n	8004aa8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8004afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a80:	695a      	ldr	r2, [r3, #20]
 8004a82:	4b21      	ldr	r3, [pc, #132]	@ (8004b08 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6892      	ldr	r2, [r2, #8]
 8004a8a:	0211      	lsls	r1, r2, #8
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6952      	ldr	r2, [r2, #20]
 8004a90:	0852      	lsrs	r2, r2, #1
 8004a92:	3a01      	subs	r2, #1
 8004a94:	0652      	lsls	r2, r2, #25
 8004a96:	4311      	orrs	r1, r2
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6852      	ldr	r2, [r2, #4]
 8004a9c:	3a01      	subs	r2, #1
 8004a9e:	0112      	lsls	r2, r2, #4
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	4916      	ldr	r1, [pc, #88]	@ (8004afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004aa8:	4b14      	ldr	r3, [pc, #80]	@ (8004afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a13      	ldr	r2, [pc, #76]	@ (8004afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ab2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab4:	f7fc fe14 	bl	80016e0 <HAL_GetTick>
 8004ab8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004aba:	e009      	b.n	8004ad0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004abc:	f7fc fe10 	bl	80016e0 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d902      	bls.n	8004ad0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	73fb      	strb	r3, [r7, #15]
          break;
 8004ace:	e005      	b.n	8004adc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8004afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0ef      	beq.n	8004abc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004adc:	7bfb      	ldrb	r3, [r7, #15]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ae2:	4b06      	ldr	r3, [pc, #24]	@ (8004afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ae4:	695a      	ldr	r2, [r3, #20]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	4904      	ldr	r1, [pc, #16]	@ (8004afc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40021000 	.word	0x40021000
 8004b00:	07ff800f 	.word	0x07ff800f
 8004b04:	ff9f800f 	.word	0xff9f800f
 8004b08:	f9ff800f 	.word	0xf9ff800f

08004b0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e042      	b.n	8004ba4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d106      	bne.n	8004b36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7fc f839 	bl	8000ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2224      	movs	r2, #36	@ 0x24
 8004b3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0201 	bic.w	r2, r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fefe 	bl	8005958 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fbff 	bl	8005360 <UART_SetConfig>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e01b      	b.n	8004ba4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 ff7d 	bl	8005a9c <UART_CheckIdleState>
 8004ba2:	4603      	mov	r3, r0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	@ 0x28
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	d17b      	bne.n	8004cbe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <HAL_UART_Transmit+0x26>
 8004bcc:	88fb      	ldrh	r3, [r7, #6]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e074      	b.n	8004cc0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2221      	movs	r2, #33	@ 0x21
 8004be2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004be6:	f7fc fd7b 	bl	80016e0 <HAL_GetTick>
 8004bea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	88fa      	ldrh	r2, [r7, #6]
 8004bf0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	88fa      	ldrh	r2, [r7, #6]
 8004bf8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c04:	d108      	bne.n	8004c18 <HAL_UART_Transmit+0x6c>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d104      	bne.n	8004c18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	e003      	b.n	8004c20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c20:	e030      	b.n	8004c84 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2180      	movs	r1, #128	@ 0x80
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 ffdf 	bl	8005bf0 <UART_WaitOnFlagUntilTimeout>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e03d      	b.n	8004cc0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10b      	bne.n	8004c62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	881a      	ldrh	r2, [r3, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c56:	b292      	uxth	r2, r2
 8004c58:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	3302      	adds	r3, #2
 8004c5e:	61bb      	str	r3, [r7, #24]
 8004c60:	e007      	b.n	8004c72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	781a      	ldrb	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1c8      	bne.n	8004c22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2200      	movs	r2, #0
 8004c98:	2140      	movs	r1, #64	@ 0x40
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 ffa8 	bl	8005bf0 <UART_WaitOnFlagUntilTimeout>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d005      	beq.n	8004cb2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e006      	b.n	8004cc0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	e000      	b.n	8004cc0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004cbe:	2302      	movs	r3, #2
  }
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3720      	adds	r7, #32
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b0ba      	sub	sp, #232	@ 0xe8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004cee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004cf2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004cfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d11b      	bne.n	8004d3c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d015      	beq.n	8004d3c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d14:	f003 0320 	and.w	r3, r3, #32
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d105      	bne.n	8004d28 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d009      	beq.n	8004d3c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 82e3 	beq.w	80052f8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	4798      	blx	r3
      }
      return;
 8004d3a:	e2dd      	b.n	80052f8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8004d3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 8123 	beq.w	8004f8c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004d46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004d4a:	4b8d      	ldr	r3, [pc, #564]	@ (8004f80 <HAL_UART_IRQHandler+0x2b8>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004d52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004d56:	4b8b      	ldr	r3, [pc, #556]	@ (8004f84 <HAL_UART_IRQHandler+0x2bc>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 8116 	beq.w	8004f8c <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d011      	beq.n	8004d90 <HAL_UART_IRQHandler+0xc8>
 8004d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00b      	beq.n	8004d90 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d86:	f043 0201 	orr.w	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d011      	beq.n	8004dc0 <HAL_UART_IRQHandler+0xf8>
 8004d9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00b      	beq.n	8004dc0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2202      	movs	r2, #2
 8004dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db6:	f043 0204 	orr.w	r2, r3, #4
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d011      	beq.n	8004df0 <HAL_UART_IRQHandler+0x128>
 8004dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00b      	beq.n	8004df0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2204      	movs	r2, #4
 8004dde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004de6:	f043 0202 	orr.w	r2, r3, #2
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004df4:	f003 0308 	and.w	r3, r3, #8
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d017      	beq.n	8004e2c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e00:	f003 0320 	and.w	r3, r3, #32
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d105      	bne.n	8004e14 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004e08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004e0c:	4b5c      	ldr	r3, [pc, #368]	@ (8004f80 <HAL_UART_IRQHandler+0x2b8>)
 8004e0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00b      	beq.n	8004e2c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2208      	movs	r2, #8
 8004e1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e22:	f043 0208 	orr.w	r2, r3, #8
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d012      	beq.n	8004e5e <HAL_UART_IRQHandler+0x196>
 8004e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00c      	beq.n	8004e5e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e54:	f043 0220 	orr.w	r2, r3, #32
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8249 	beq.w	80052fc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d013      	beq.n	8004e9e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d105      	bne.n	8004e8e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb2:	2b40      	cmp	r3, #64	@ 0x40
 8004eb4:	d005      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004eba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d054      	beq.n	8004f6c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 ffe3 	bl	8005e8e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed2:	2b40      	cmp	r3, #64	@ 0x40
 8004ed4:	d146      	bne.n	8004f64 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3308      	adds	r3, #8
 8004edc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ef0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3308      	adds	r3, #8
 8004efe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1d9      	bne.n	8004ed6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d017      	beq.n	8004f5c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f32:	4a15      	ldr	r2, [pc, #84]	@ (8004f88 <HAL_UART_IRQHandler+0x2c0>)
 8004f34:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fc fe6c 	bl	8001c1a <HAL_DMA_Abort_IT>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d019      	beq.n	8004f7c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004f56:	4610      	mov	r0, r2
 8004f58:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f5a:	e00f      	b.n	8004f7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f9f5 	bl	800534c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f62:	e00b      	b.n	8004f7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f9f1 	bl	800534c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f6a:	e007      	b.n	8004f7c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f9ed 	bl	800534c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004f7a:	e1bf      	b.n	80052fc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7c:	bf00      	nop
    return;
 8004f7e:	e1bd      	b.n	80052fc <HAL_UART_IRQHandler+0x634>
 8004f80:	10000001 	.word	0x10000001
 8004f84:	04000120 	.word	0x04000120
 8004f88:	08006145 	.word	0x08006145

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	f040 8153 	bne.w	800523c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f9a:	f003 0310 	and.w	r3, r3, #16
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 814c 	beq.w	800523c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 8145 	beq.w	800523c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2210      	movs	r2, #16
 8004fb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc4:	2b40      	cmp	r3, #64	@ 0x40
 8004fc6:	f040 80bb 	bne.w	8005140 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 818f 	beq.w	8005300 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004fe8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004fec:	429a      	cmp	r2, r3
 8004fee:	f080 8187 	bcs.w	8005300 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ff8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b00      	cmp	r3, #0
 800500c:	f040 8087 	bne.w	800511e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005018:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800501c:	e853 3f00 	ldrex	r3, [r3]
 8005020:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005024:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005028:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800502c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	461a      	mov	r2, r3
 8005036:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800503a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800503e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005042:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005046:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800504a:	e841 2300 	strex	r3, r2, [r1]
 800504e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005052:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1da      	bne.n	8005010 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3308      	adds	r3, #8
 8005060:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005062:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005064:	e853 3f00 	ldrex	r3, [r3]
 8005068:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800506a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800506c:	f023 0301 	bic.w	r3, r3, #1
 8005070:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3308      	adds	r3, #8
 800507a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800507e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005082:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005084:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005086:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800508a:	e841 2300 	strex	r3, r2, [r1]
 800508e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005090:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1e1      	bne.n	800505a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3308      	adds	r3, #8
 800509c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80050a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	3308      	adds	r3, #8
 80050b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80050ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80050bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80050c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80050c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1e3      	bne.n	8005096 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050e4:	e853 3f00 	ldrex	r3, [r3]
 80050e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050ec:	f023 0310 	bic.w	r3, r3, #16
 80050f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005100:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005102:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005104:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005106:	e841 2300 	strex	r3, r2, [r1]
 800510a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800510c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1e4      	bne.n	80050dc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005118:	4618      	mov	r0, r3
 800511a:	f7fc fd22 	bl	8001b62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2202      	movs	r2, #2
 8005122:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005130:	b29b      	uxth	r3, r3
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	b29b      	uxth	r3, r3
 8005136:	4619      	mov	r1, r3
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7fb fa3b 	bl	80005b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800513e:	e0df      	b.n	8005300 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800514c:	b29b      	uxth	r3, r3
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800515a:	b29b      	uxth	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 80d1 	beq.w	8005304 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005162:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 80cc 	beq.w	8005304 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005174:	e853 3f00 	ldrex	r3, [r3]
 8005178:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800517a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800517c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005180:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	461a      	mov	r2, r3
 800518a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800518e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005190:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005194:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800519c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e4      	bne.n	800516c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3308      	adds	r3, #8
 80051a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ac:	e853 3f00 	ldrex	r3, [r3]
 80051b0:	623b      	str	r3, [r7, #32]
   return(result);
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051b8:	f023 0301 	bic.w	r3, r3, #1
 80051bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3308      	adds	r3, #8
 80051c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80051ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80051cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e1      	bne.n	80051a2 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0310 	bic.w	r3, r3, #16
 8005206:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005214:	61fb      	str	r3, [r7, #28]
 8005216:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005218:	69b9      	ldr	r1, [r7, #24]
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	e841 2300 	strex	r3, r2, [r1]
 8005220:	617b      	str	r3, [r7, #20]
   return(result);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1e4      	bne.n	80051f2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800522e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7fb f9bd 	bl	80005b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800523a:	e063      	b.n	8005304 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800523c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005240:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00e      	beq.n	8005266 <HAL_UART_IRQHandler+0x59e>
 8005248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800524c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d008      	beq.n	8005266 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800525c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 ffb1 	bl	80061c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005264:	e051      	b.n	800530a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800526a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800526e:	2b00      	cmp	r3, #0
 8005270:	d014      	beq.n	800529c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800527a:	2b00      	cmp	r3, #0
 800527c:	d105      	bne.n	800528a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800527e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005282:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d008      	beq.n	800529c <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800528e:	2b00      	cmp	r3, #0
 8005290:	d03a      	beq.n	8005308 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	4798      	blx	r3
    }
    return;
 800529a:	e035      	b.n	8005308 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800529c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d009      	beq.n	80052bc <HAL_UART_IRQHandler+0x5f4>
 80052a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 ff5b 	bl	8006170 <UART_EndTransmit_IT>
    return;
 80052ba:	e026      	b.n	800530a <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80052bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d009      	beq.n	80052dc <HAL_UART_IRQHandler+0x614>
 80052c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 ff8a 	bl	80061ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052da:	e016      	b.n	800530a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80052dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d010      	beq.n	800530a <HAL_UART_IRQHandler+0x642>
 80052e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	da0c      	bge.n	800530a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 ff72 	bl	80061da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052f6:	e008      	b.n	800530a <HAL_UART_IRQHandler+0x642>
      return;
 80052f8:	bf00      	nop
 80052fa:	e006      	b.n	800530a <HAL_UART_IRQHandler+0x642>
    return;
 80052fc:	bf00      	nop
 80052fe:	e004      	b.n	800530a <HAL_UART_IRQHandler+0x642>
      return;
 8005300:	bf00      	nop
 8005302:	e002      	b.n	800530a <HAL_UART_IRQHandler+0x642>
      return;
 8005304:	bf00      	nop
 8005306:	e000      	b.n	800530a <HAL_UART_IRQHandler+0x642>
    return;
 8005308:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 800530a:	37e8      	adds	r7, #232	@ 0xe8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005364:	b08c      	sub	sp, #48	@ 0x30
 8005366:	af00      	add	r7, sp, #0
 8005368:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	431a      	orrs	r2, r3
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	431a      	orrs	r2, r3
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	4313      	orrs	r3, r2
 8005386:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	4baa      	ldr	r3, [pc, #680]	@ (8005638 <UART_SetConfig+0x2d8>)
 8005390:	4013      	ands	r3, r2
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	6812      	ldr	r2, [r2, #0]
 8005396:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005398:	430b      	orrs	r3, r1
 800539a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a9f      	ldr	r2, [pc, #636]	@ (800563c <UART_SetConfig+0x2dc>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d004      	beq.n	80053cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053c8:	4313      	orrs	r3, r2
 80053ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80053d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	6812      	ldr	r2, [r2, #0]
 80053de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053e0:	430b      	orrs	r3, r1
 80053e2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ea:	f023 010f 	bic.w	r1, r3, #15
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a90      	ldr	r2, [pc, #576]	@ (8005640 <UART_SetConfig+0x2e0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d125      	bne.n	8005450 <UART_SetConfig+0xf0>
 8005404:	4b8f      	ldr	r3, [pc, #572]	@ (8005644 <UART_SetConfig+0x2e4>)
 8005406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	2b03      	cmp	r3, #3
 8005410:	d81a      	bhi.n	8005448 <UART_SetConfig+0xe8>
 8005412:	a201      	add	r2, pc, #4	@ (adr r2, 8005418 <UART_SetConfig+0xb8>)
 8005414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005418:	08005429 	.word	0x08005429
 800541c:	08005439 	.word	0x08005439
 8005420:	08005431 	.word	0x08005431
 8005424:	08005441 	.word	0x08005441
 8005428:	2301      	movs	r3, #1
 800542a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800542e:	e116      	b.n	800565e <UART_SetConfig+0x2fe>
 8005430:	2302      	movs	r3, #2
 8005432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005436:	e112      	b.n	800565e <UART_SetConfig+0x2fe>
 8005438:	2304      	movs	r3, #4
 800543a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800543e:	e10e      	b.n	800565e <UART_SetConfig+0x2fe>
 8005440:	2308      	movs	r3, #8
 8005442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005446:	e10a      	b.n	800565e <UART_SetConfig+0x2fe>
 8005448:	2310      	movs	r3, #16
 800544a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800544e:	e106      	b.n	800565e <UART_SetConfig+0x2fe>
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a7c      	ldr	r2, [pc, #496]	@ (8005648 <UART_SetConfig+0x2e8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d138      	bne.n	80054cc <UART_SetConfig+0x16c>
 800545a:	4b7a      	ldr	r3, [pc, #488]	@ (8005644 <UART_SetConfig+0x2e4>)
 800545c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005460:	f003 030c 	and.w	r3, r3, #12
 8005464:	2b0c      	cmp	r3, #12
 8005466:	d82d      	bhi.n	80054c4 <UART_SetConfig+0x164>
 8005468:	a201      	add	r2, pc, #4	@ (adr r2, 8005470 <UART_SetConfig+0x110>)
 800546a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546e:	bf00      	nop
 8005470:	080054a5 	.word	0x080054a5
 8005474:	080054c5 	.word	0x080054c5
 8005478:	080054c5 	.word	0x080054c5
 800547c:	080054c5 	.word	0x080054c5
 8005480:	080054b5 	.word	0x080054b5
 8005484:	080054c5 	.word	0x080054c5
 8005488:	080054c5 	.word	0x080054c5
 800548c:	080054c5 	.word	0x080054c5
 8005490:	080054ad 	.word	0x080054ad
 8005494:	080054c5 	.word	0x080054c5
 8005498:	080054c5 	.word	0x080054c5
 800549c:	080054c5 	.word	0x080054c5
 80054a0:	080054bd 	.word	0x080054bd
 80054a4:	2300      	movs	r3, #0
 80054a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054aa:	e0d8      	b.n	800565e <UART_SetConfig+0x2fe>
 80054ac:	2302      	movs	r3, #2
 80054ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054b2:	e0d4      	b.n	800565e <UART_SetConfig+0x2fe>
 80054b4:	2304      	movs	r3, #4
 80054b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ba:	e0d0      	b.n	800565e <UART_SetConfig+0x2fe>
 80054bc:	2308      	movs	r3, #8
 80054be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054c2:	e0cc      	b.n	800565e <UART_SetConfig+0x2fe>
 80054c4:	2310      	movs	r3, #16
 80054c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ca:	e0c8      	b.n	800565e <UART_SetConfig+0x2fe>
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a5e      	ldr	r2, [pc, #376]	@ (800564c <UART_SetConfig+0x2ec>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d125      	bne.n	8005522 <UART_SetConfig+0x1c2>
 80054d6:	4b5b      	ldr	r3, [pc, #364]	@ (8005644 <UART_SetConfig+0x2e4>)
 80054d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80054e0:	2b30      	cmp	r3, #48	@ 0x30
 80054e2:	d016      	beq.n	8005512 <UART_SetConfig+0x1b2>
 80054e4:	2b30      	cmp	r3, #48	@ 0x30
 80054e6:	d818      	bhi.n	800551a <UART_SetConfig+0x1ba>
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	d00a      	beq.n	8005502 <UART_SetConfig+0x1a2>
 80054ec:	2b20      	cmp	r3, #32
 80054ee:	d814      	bhi.n	800551a <UART_SetConfig+0x1ba>
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <UART_SetConfig+0x19a>
 80054f4:	2b10      	cmp	r3, #16
 80054f6:	d008      	beq.n	800550a <UART_SetConfig+0x1aa>
 80054f8:	e00f      	b.n	800551a <UART_SetConfig+0x1ba>
 80054fa:	2300      	movs	r3, #0
 80054fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005500:	e0ad      	b.n	800565e <UART_SetConfig+0x2fe>
 8005502:	2302      	movs	r3, #2
 8005504:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005508:	e0a9      	b.n	800565e <UART_SetConfig+0x2fe>
 800550a:	2304      	movs	r3, #4
 800550c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005510:	e0a5      	b.n	800565e <UART_SetConfig+0x2fe>
 8005512:	2308      	movs	r3, #8
 8005514:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005518:	e0a1      	b.n	800565e <UART_SetConfig+0x2fe>
 800551a:	2310      	movs	r3, #16
 800551c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005520:	e09d      	b.n	800565e <UART_SetConfig+0x2fe>
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a4a      	ldr	r2, [pc, #296]	@ (8005650 <UART_SetConfig+0x2f0>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d125      	bne.n	8005578 <UART_SetConfig+0x218>
 800552c:	4b45      	ldr	r3, [pc, #276]	@ (8005644 <UART_SetConfig+0x2e4>)
 800552e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005532:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005536:	2bc0      	cmp	r3, #192	@ 0xc0
 8005538:	d016      	beq.n	8005568 <UART_SetConfig+0x208>
 800553a:	2bc0      	cmp	r3, #192	@ 0xc0
 800553c:	d818      	bhi.n	8005570 <UART_SetConfig+0x210>
 800553e:	2b80      	cmp	r3, #128	@ 0x80
 8005540:	d00a      	beq.n	8005558 <UART_SetConfig+0x1f8>
 8005542:	2b80      	cmp	r3, #128	@ 0x80
 8005544:	d814      	bhi.n	8005570 <UART_SetConfig+0x210>
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <UART_SetConfig+0x1f0>
 800554a:	2b40      	cmp	r3, #64	@ 0x40
 800554c:	d008      	beq.n	8005560 <UART_SetConfig+0x200>
 800554e:	e00f      	b.n	8005570 <UART_SetConfig+0x210>
 8005550:	2300      	movs	r3, #0
 8005552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005556:	e082      	b.n	800565e <UART_SetConfig+0x2fe>
 8005558:	2302      	movs	r3, #2
 800555a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800555e:	e07e      	b.n	800565e <UART_SetConfig+0x2fe>
 8005560:	2304      	movs	r3, #4
 8005562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005566:	e07a      	b.n	800565e <UART_SetConfig+0x2fe>
 8005568:	2308      	movs	r3, #8
 800556a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800556e:	e076      	b.n	800565e <UART_SetConfig+0x2fe>
 8005570:	2310      	movs	r3, #16
 8005572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005576:	e072      	b.n	800565e <UART_SetConfig+0x2fe>
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a35      	ldr	r2, [pc, #212]	@ (8005654 <UART_SetConfig+0x2f4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d12a      	bne.n	80055d8 <UART_SetConfig+0x278>
 8005582:	4b30      	ldr	r3, [pc, #192]	@ (8005644 <UART_SetConfig+0x2e4>)
 8005584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005588:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800558c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005590:	d01a      	beq.n	80055c8 <UART_SetConfig+0x268>
 8005592:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005596:	d81b      	bhi.n	80055d0 <UART_SetConfig+0x270>
 8005598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800559c:	d00c      	beq.n	80055b8 <UART_SetConfig+0x258>
 800559e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055a2:	d815      	bhi.n	80055d0 <UART_SetConfig+0x270>
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d003      	beq.n	80055b0 <UART_SetConfig+0x250>
 80055a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055ac:	d008      	beq.n	80055c0 <UART_SetConfig+0x260>
 80055ae:	e00f      	b.n	80055d0 <UART_SetConfig+0x270>
 80055b0:	2300      	movs	r3, #0
 80055b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055b6:	e052      	b.n	800565e <UART_SetConfig+0x2fe>
 80055b8:	2302      	movs	r3, #2
 80055ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055be:	e04e      	b.n	800565e <UART_SetConfig+0x2fe>
 80055c0:	2304      	movs	r3, #4
 80055c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055c6:	e04a      	b.n	800565e <UART_SetConfig+0x2fe>
 80055c8:	2308      	movs	r3, #8
 80055ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ce:	e046      	b.n	800565e <UART_SetConfig+0x2fe>
 80055d0:	2310      	movs	r3, #16
 80055d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055d6:	e042      	b.n	800565e <UART_SetConfig+0x2fe>
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a17      	ldr	r2, [pc, #92]	@ (800563c <UART_SetConfig+0x2dc>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d13a      	bne.n	8005658 <UART_SetConfig+0x2f8>
 80055e2:	4b18      	ldr	r3, [pc, #96]	@ (8005644 <UART_SetConfig+0x2e4>)
 80055e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055f0:	d01a      	beq.n	8005628 <UART_SetConfig+0x2c8>
 80055f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055f6:	d81b      	bhi.n	8005630 <UART_SetConfig+0x2d0>
 80055f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055fc:	d00c      	beq.n	8005618 <UART_SetConfig+0x2b8>
 80055fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005602:	d815      	bhi.n	8005630 <UART_SetConfig+0x2d0>
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <UART_SetConfig+0x2b0>
 8005608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800560c:	d008      	beq.n	8005620 <UART_SetConfig+0x2c0>
 800560e:	e00f      	b.n	8005630 <UART_SetConfig+0x2d0>
 8005610:	2300      	movs	r3, #0
 8005612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005616:	e022      	b.n	800565e <UART_SetConfig+0x2fe>
 8005618:	2302      	movs	r3, #2
 800561a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800561e:	e01e      	b.n	800565e <UART_SetConfig+0x2fe>
 8005620:	2304      	movs	r3, #4
 8005622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005626:	e01a      	b.n	800565e <UART_SetConfig+0x2fe>
 8005628:	2308      	movs	r3, #8
 800562a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800562e:	e016      	b.n	800565e <UART_SetConfig+0x2fe>
 8005630:	2310      	movs	r3, #16
 8005632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005636:	e012      	b.n	800565e <UART_SetConfig+0x2fe>
 8005638:	cfff69f3 	.word	0xcfff69f3
 800563c:	40008000 	.word	0x40008000
 8005640:	40013800 	.word	0x40013800
 8005644:	40021000 	.word	0x40021000
 8005648:	40004400 	.word	0x40004400
 800564c:	40004800 	.word	0x40004800
 8005650:	40004c00 	.word	0x40004c00
 8005654:	40005000 	.word	0x40005000
 8005658:	2310      	movs	r3, #16
 800565a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4aae      	ldr	r2, [pc, #696]	@ (800591c <UART_SetConfig+0x5bc>)
 8005664:	4293      	cmp	r3, r2
 8005666:	f040 8097 	bne.w	8005798 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800566a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800566e:	2b08      	cmp	r3, #8
 8005670:	d823      	bhi.n	80056ba <UART_SetConfig+0x35a>
 8005672:	a201      	add	r2, pc, #4	@ (adr r2, 8005678 <UART_SetConfig+0x318>)
 8005674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005678:	0800569d 	.word	0x0800569d
 800567c:	080056bb 	.word	0x080056bb
 8005680:	080056a5 	.word	0x080056a5
 8005684:	080056bb 	.word	0x080056bb
 8005688:	080056ab 	.word	0x080056ab
 800568c:	080056bb 	.word	0x080056bb
 8005690:	080056bb 	.word	0x080056bb
 8005694:	080056bb 	.word	0x080056bb
 8005698:	080056b3 	.word	0x080056b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800569c:	f7fe fc32 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 80056a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056a2:	e010      	b.n	80056c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056a4:	4b9e      	ldr	r3, [pc, #632]	@ (8005920 <UART_SetConfig+0x5c0>)
 80056a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056a8:	e00d      	b.n	80056c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056aa:	f7fe fb93 	bl	8003dd4 <HAL_RCC_GetSysClockFreq>
 80056ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80056b0:	e009      	b.n	80056c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80056b8:	e005      	b.n	80056c6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80056c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 8130 	beq.w	800592e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d2:	4a94      	ldr	r2, [pc, #592]	@ (8005924 <UART_SetConfig+0x5c4>)
 80056d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056d8:	461a      	mov	r2, r3
 80056da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80056e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	4613      	mov	r3, r2
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	4413      	add	r3, r2
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d305      	bcc.n	80056fe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d903      	bls.n	8005706 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005704:	e113      	b.n	800592e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005708:	2200      	movs	r2, #0
 800570a:	60bb      	str	r3, [r7, #8]
 800570c:	60fa      	str	r2, [r7, #12]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005712:	4a84      	ldr	r2, [pc, #528]	@ (8005924 <UART_SetConfig+0x5c4>)
 8005714:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005718:	b29b      	uxth	r3, r3
 800571a:	2200      	movs	r2, #0
 800571c:	603b      	str	r3, [r7, #0]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005724:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005728:	f7fa fdba 	bl	80002a0 <__aeabi_uldivmod>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4610      	mov	r0, r2
 8005732:	4619      	mov	r1, r3
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	f04f 0300 	mov.w	r3, #0
 800573c:	020b      	lsls	r3, r1, #8
 800573e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005742:	0202      	lsls	r2, r0, #8
 8005744:	6979      	ldr	r1, [r7, #20]
 8005746:	6849      	ldr	r1, [r1, #4]
 8005748:	0849      	lsrs	r1, r1, #1
 800574a:	2000      	movs	r0, #0
 800574c:	460c      	mov	r4, r1
 800574e:	4605      	mov	r5, r0
 8005750:	eb12 0804 	adds.w	r8, r2, r4
 8005754:	eb43 0905 	adc.w	r9, r3, r5
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	469a      	mov	sl, r3
 8005760:	4693      	mov	fp, r2
 8005762:	4652      	mov	r2, sl
 8005764:	465b      	mov	r3, fp
 8005766:	4640      	mov	r0, r8
 8005768:	4649      	mov	r1, r9
 800576a:	f7fa fd99 	bl	80002a0 <__aeabi_uldivmod>
 800576e:	4602      	mov	r2, r0
 8005770:	460b      	mov	r3, r1
 8005772:	4613      	mov	r3, r2
 8005774:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800577c:	d308      	bcc.n	8005790 <UART_SetConfig+0x430>
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005784:	d204      	bcs.n	8005790 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6a3a      	ldr	r2, [r7, #32]
 800578c:	60da      	str	r2, [r3, #12]
 800578e:	e0ce      	b.n	800592e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005796:	e0ca      	b.n	800592e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	69db      	ldr	r3, [r3, #28]
 800579c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057a0:	d166      	bne.n	8005870 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80057a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80057a6:	2b08      	cmp	r3, #8
 80057a8:	d827      	bhi.n	80057fa <UART_SetConfig+0x49a>
 80057aa:	a201      	add	r2, pc, #4	@ (adr r2, 80057b0 <UART_SetConfig+0x450>)
 80057ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b0:	080057d5 	.word	0x080057d5
 80057b4:	080057dd 	.word	0x080057dd
 80057b8:	080057e5 	.word	0x080057e5
 80057bc:	080057fb 	.word	0x080057fb
 80057c0:	080057eb 	.word	0x080057eb
 80057c4:	080057fb 	.word	0x080057fb
 80057c8:	080057fb 	.word	0x080057fb
 80057cc:	080057fb 	.word	0x080057fb
 80057d0:	080057f3 	.word	0x080057f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057d4:	f7fe fb96 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 80057d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057da:	e014      	b.n	8005806 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057dc:	f7fe fba8 	bl	8003f30 <HAL_RCC_GetPCLK2Freq>
 80057e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057e2:	e010      	b.n	8005806 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057e4:	4b4e      	ldr	r3, [pc, #312]	@ (8005920 <UART_SetConfig+0x5c0>)
 80057e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057e8:	e00d      	b.n	8005806 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ea:	f7fe faf3 	bl	8003dd4 <HAL_RCC_GetSysClockFreq>
 80057ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057f0:	e009      	b.n	8005806 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057f8:	e005      	b.n	8005806 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005804:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 8090 	beq.w	800592e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005812:	4a44      	ldr	r2, [pc, #272]	@ (8005924 <UART_SetConfig+0x5c4>)
 8005814:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005818:	461a      	mov	r2, r3
 800581a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005820:	005a      	lsls	r2, r3, #1
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	085b      	lsrs	r3, r3, #1
 8005828:	441a      	add	r2, r3
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005832:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	2b0f      	cmp	r3, #15
 8005838:	d916      	bls.n	8005868 <UART_SetConfig+0x508>
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005840:	d212      	bcs.n	8005868 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	b29b      	uxth	r3, r3
 8005846:	f023 030f 	bic.w	r3, r3, #15
 800584a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	085b      	lsrs	r3, r3, #1
 8005850:	b29b      	uxth	r3, r3
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	b29a      	uxth	r2, r3
 8005858:	8bfb      	ldrh	r3, [r7, #30]
 800585a:	4313      	orrs	r3, r2
 800585c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	8bfa      	ldrh	r2, [r7, #30]
 8005864:	60da      	str	r2, [r3, #12]
 8005866:	e062      	b.n	800592e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800586e:	e05e      	b.n	800592e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005870:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005874:	2b08      	cmp	r3, #8
 8005876:	d828      	bhi.n	80058ca <UART_SetConfig+0x56a>
 8005878:	a201      	add	r2, pc, #4	@ (adr r2, 8005880 <UART_SetConfig+0x520>)
 800587a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587e:	bf00      	nop
 8005880:	080058a5 	.word	0x080058a5
 8005884:	080058ad 	.word	0x080058ad
 8005888:	080058b5 	.word	0x080058b5
 800588c:	080058cb 	.word	0x080058cb
 8005890:	080058bb 	.word	0x080058bb
 8005894:	080058cb 	.word	0x080058cb
 8005898:	080058cb 	.word	0x080058cb
 800589c:	080058cb 	.word	0x080058cb
 80058a0:	080058c3 	.word	0x080058c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058a4:	f7fe fb2e 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 80058a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058aa:	e014      	b.n	80058d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058ac:	f7fe fb40 	bl	8003f30 <HAL_RCC_GetPCLK2Freq>
 80058b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058b2:	e010      	b.n	80058d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005920 <UART_SetConfig+0x5c0>)
 80058b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058b8:	e00d      	b.n	80058d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ba:	f7fe fa8b 	bl	8003dd4 <HAL_RCC_GetSysClockFreq>
 80058be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058c0:	e009      	b.n	80058d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058c8:	e005      	b.n	80058d6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80058ca:	2300      	movs	r3, #0
 80058cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80058d4:	bf00      	nop
    }

    if (pclk != 0U)
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d028      	beq.n	800592e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e0:	4a10      	ldr	r2, [pc, #64]	@ (8005924 <UART_SetConfig+0x5c4>)
 80058e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058e6:	461a      	mov	r2, r3
 80058e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	085b      	lsrs	r3, r3, #1
 80058f4:	441a      	add	r2, r3
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fe:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	2b0f      	cmp	r3, #15
 8005904:	d910      	bls.n	8005928 <UART_SetConfig+0x5c8>
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800590c:	d20c      	bcs.n	8005928 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	b29a      	uxth	r2, r3
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	60da      	str	r2, [r3, #12]
 8005918:	e009      	b.n	800592e <UART_SetConfig+0x5ce>
 800591a:	bf00      	nop
 800591c:	40008000 	.word	0x40008000
 8005920:	00f42400 	.word	0x00f42400
 8005924:	080073b8 	.word	0x080073b8
      }
      else
      {
        ret = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2201      	movs	r2, #1
 8005932:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2201      	movs	r2, #1
 800593a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2200      	movs	r2, #0
 8005942:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2200      	movs	r2, #0
 8005948:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800594a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800594e:	4618      	mov	r0, r3
 8005950:	3730      	adds	r7, #48	@ 0x30
 8005952:	46bd      	mov	sp, r7
 8005954:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005958 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005964:	f003 0308 	and.w	r3, r3, #8
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d01a      	beq.n	8005a6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a56:	d10a      	bne.n	8005a6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	605a      	str	r2, [r3, #4]
  }
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b098      	sub	sp, #96	@ 0x60
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005aac:	f7fb fe18 	bl	80016e0 <HAL_GetTick>
 8005ab0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0308 	and.w	r3, r3, #8
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d12f      	bne.n	8005b20 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ac0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f88e 	bl	8005bf0 <UART_WaitOnFlagUntilTimeout>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d022      	beq.n	8005b20 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae2:	e853 3f00 	ldrex	r3, [r3]
 8005ae6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aee:	653b      	str	r3, [r7, #80]	@ 0x50
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	461a      	mov	r2, r3
 8005af6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005af8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005afa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005afe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b00:	e841 2300 	strex	r3, r2, [r1]
 8005b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1e6      	bne.n	8005ada <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e063      	b.n	8005be8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0304 	and.w	r3, r3, #4
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	d149      	bne.n	8005bc2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b2e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b36:	2200      	movs	r2, #0
 8005b38:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f857 	bl	8005bf0 <UART_WaitOnFlagUntilTimeout>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d03c      	beq.n	8005bc2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b50:	e853 3f00 	ldrex	r3, [r3]
 8005b54:	623b      	str	r3, [r7, #32]
   return(result);
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	461a      	mov	r2, r3
 8005b64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b66:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b68:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b6e:	e841 2300 	strex	r3, r2, [r1]
 8005b72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1e6      	bne.n	8005b48 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	3308      	adds	r3, #8
 8005b80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	e853 3f00 	ldrex	r3, [r3]
 8005b88:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f023 0301 	bic.w	r3, r3, #1
 8005b90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3308      	adds	r3, #8
 8005b98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b9a:	61fa      	str	r2, [r7, #28]
 8005b9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9e:	69b9      	ldr	r1, [r7, #24]
 8005ba0:	69fa      	ldr	r2, [r7, #28]
 8005ba2:	e841 2300 	strex	r3, r2, [r1]
 8005ba6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1e5      	bne.n	8005b7a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e012      	b.n	8005be8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3758      	adds	r7, #88	@ 0x58
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	603b      	str	r3, [r7, #0]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c00:	e049      	b.n	8005c96 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c08:	d045      	beq.n	8005c96 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c0a:	f7fb fd69 	bl	80016e0 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d302      	bcc.n	8005c20 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e048      	b.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0304 	and.w	r3, r3, #4
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d031      	beq.n	8005c96 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	f003 0308 	and.w	r3, r3, #8
 8005c3c:	2b08      	cmp	r3, #8
 8005c3e:	d110      	bne.n	8005c62 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2208      	movs	r2, #8
 8005c46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 f920 	bl	8005e8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2208      	movs	r2, #8
 8005c52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e029      	b.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c70:	d111      	bne.n	8005c96 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005c7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 f906 	bl	8005e8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e00f      	b.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69da      	ldr	r2, [r3, #28]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	bf0c      	ite	eq
 8005ca6:	2301      	moveq	r3, #1
 8005ca8:	2300      	movne	r3, #0
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	461a      	mov	r2, r3
 8005cae:	79fb      	ldrb	r3, [r7, #7]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d0a6      	beq.n	8005c02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b096      	sub	sp, #88	@ 0x58
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	88fa      	ldrh	r2, [r7, #6]
 8005cd8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2222      	movs	r2, #34	@ 0x22
 8005ce8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d02d      	beq.n	8005d52 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cfc:	4a40      	ldr	r2, [pc, #256]	@ (8005e00 <UART_Start_Receive_DMA+0x140>)
 8005cfe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d06:	4a3f      	ldr	r2, [pc, #252]	@ (8005e04 <UART_Start_Receive_DMA+0x144>)
 8005d08:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d10:	4a3d      	ldr	r2, [pc, #244]	@ (8005e08 <UART_Start_Receive_DMA+0x148>)
 8005d12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	3324      	adds	r3, #36	@ 0x24
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d30:	461a      	mov	r2, r3
 8005d32:	88fb      	ldrh	r3, [r7, #6]
 8005d34:	f7fb fe9a 	bl	8001a6c <HAL_DMA_Start_IT>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d009      	beq.n	8005d52 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2210      	movs	r2, #16
 8005d42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e051      	b.n	8005df6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d018      	beq.n	8005d8c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d62:	e853 3f00 	ldrex	r3, [r3]
 8005d66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	461a      	mov	r2, r3
 8005d76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d7a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d80:	e841 2300 	strex	r3, r2, [r1]
 8005d84:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1e6      	bne.n	8005d5a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3308      	adds	r3, #8
 8005d92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d96:	e853 3f00 	ldrex	r3, [r3]
 8005d9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9e:	f043 0301 	orr.w	r3, r3, #1
 8005da2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3308      	adds	r3, #8
 8005daa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005dac:	637a      	str	r2, [r7, #52]	@ 0x34
 8005dae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005db2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e5      	bne.n	8005d8c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3308      	adds	r3, #8
 8005dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	e853 3f00 	ldrex	r3, [r3]
 8005dce:	613b      	str	r3, [r7, #16]
   return(result);
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3308      	adds	r3, #8
 8005dde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005de0:	623a      	str	r2, [r7, #32]
 8005de2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de4:	69f9      	ldr	r1, [r7, #28]
 8005de6:	6a3a      	ldr	r2, [r7, #32]
 8005de8:	e841 2300 	strex	r3, r2, [r1]
 8005dec:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1e5      	bne.n	8005dc0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3758      	adds	r7, #88	@ 0x58
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	08005f5b 	.word	0x08005f5b
 8005e04:	08006087 	.word	0x08006087
 8005e08:	080060c5 	.word	0x080060c5

08005e0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b08f      	sub	sp, #60	@ 0x3c
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	e853 3f00 	ldrex	r3, [r3]
 8005e20:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e34:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e3a:	e841 2300 	strex	r3, r2, [r1]
 8005e3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1e6      	bne.n	8005e14 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	e853 3f00 	ldrex	r3, [r3]
 8005e54:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005e5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3308      	adds	r3, #8
 8005e64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e66:	61ba      	str	r2, [r7, #24]
 8005e68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6a:	6979      	ldr	r1, [r7, #20]
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	e841 2300 	strex	r3, r2, [r1]
 8005e72:	613b      	str	r3, [r7, #16]
   return(result);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e5      	bne.n	8005e46 <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005e82:	bf00      	nop
 8005e84:	373c      	adds	r7, #60	@ 0x3c
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b095      	sub	sp, #84	@ 0x54
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e9e:	e853 3f00 	ldrex	r3, [r3]
 8005ea2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005eb6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005eba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ebc:	e841 2300 	strex	r3, r2, [r1]
 8005ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1e6      	bne.n	8005e96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3308      	adds	r3, #8
 8005ece:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	e853 3f00 	ldrex	r3, [r3]
 8005ed6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ede:	f023 0301 	bic.w	r3, r3, #1
 8005ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3308      	adds	r3, #8
 8005eea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005eec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005eee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ef2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ef4:	e841 2300 	strex	r3, r2, [r1]
 8005ef8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1e3      	bne.n	8005ec8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d118      	bne.n	8005f3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	e853 3f00 	ldrex	r3, [r3]
 8005f14:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	f023 0310 	bic.w	r3, r3, #16
 8005f1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f26:	61bb      	str	r3, [r7, #24]
 8005f28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2a:	6979      	ldr	r1, [r7, #20]
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	e841 2300 	strex	r3, r2, [r1]
 8005f32:	613b      	str	r3, [r7, #16]
   return(result);
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e6      	bne.n	8005f08 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005f4e:	bf00      	nop
 8005f50:	3754      	adds	r7, #84	@ 0x54
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b09c      	sub	sp, #112	@ 0x70
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f66:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0320 	and.w	r3, r3, #32
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d171      	bne.n	800605a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005f76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f86:	e853 3f00 	ldrex	r3, [r3]
 8005f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f92:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f9e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005fa2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005fa4:	e841 2300 	strex	r3, r2, [r1]
 8005fa8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005faa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e6      	bne.n	8005f7e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fc2:	f023 0301 	bic.w	r3, r3, #1
 8005fc6:	667b      	str	r3, [r7, #100]	@ 0x64
 8005fc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3308      	adds	r3, #8
 8005fce:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005fd0:	647a      	str	r2, [r7, #68]	@ 0x44
 8005fd2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e5      	bne.n	8005fb0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fe4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3308      	adds	r3, #8
 8005fea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fee:	e853 3f00 	ldrex	r3, [r3]
 8005ff2:	623b      	str	r3, [r7, #32]
   return(result);
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ffa:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ffc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3308      	adds	r3, #8
 8006002:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006004:	633a      	str	r2, [r7, #48]	@ 0x30
 8006006:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006008:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800600a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800600c:	e841 2300 	strex	r3, r2, [r1]
 8006010:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1e5      	bne.n	8005fe4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006018:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800601a:	2220      	movs	r2, #32
 800601c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006020:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006024:	2b01      	cmp	r3, #1
 8006026:	d118      	bne.n	800605a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006028:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	e853 3f00 	ldrex	r3, [r3]
 8006034:	60fb      	str	r3, [r7, #12]
   return(result);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f023 0310 	bic.w	r3, r3, #16
 800603c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800603e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006046:	61fb      	str	r3, [r7, #28]
 8006048:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604a:	69b9      	ldr	r1, [r7, #24]
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	e841 2300 	strex	r3, r2, [r1]
 8006052:	617b      	str	r3, [r7, #20]
   return(result);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1e6      	bne.n	8006028 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800605a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800605c:	2200      	movs	r2, #0
 800605e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006060:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006062:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006064:	2b01      	cmp	r3, #1
 8006066:	d107      	bne.n	8006078 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800606a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800606e:	4619      	mov	r1, r3
 8006070:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006072:	f7fa fa9f 	bl	80005b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006076:	e002      	b.n	800607e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006078:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800607a:	f7ff f953 	bl	8005324 <HAL_UART_RxCpltCallback>
}
 800607e:	bf00      	nop
 8006080:	3770      	adds	r7, #112	@ 0x70
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b084      	sub	sp, #16
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006092:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d109      	bne.n	80060b6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80060a8:	085b      	lsrs	r3, r3, #1
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	4619      	mov	r1, r3
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f7fa fa80 	bl	80005b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060b4:	e002      	b.n	80060bc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f7ff f93e 	bl	8005338 <HAL_UART_RxHalfCpltCallback>
}
 80060bc:	bf00      	nop
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060e0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ec:	2b80      	cmp	r3, #128	@ 0x80
 80060ee:	d109      	bne.n	8006104 <UART_DMAError+0x40>
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	2b21      	cmp	r3, #33	@ 0x21
 80060f4:	d106      	bne.n	8006104 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80060fe:	6978      	ldr	r0, [r7, #20]
 8006100:	f7ff fe84 	bl	8005e0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800610e:	2b40      	cmp	r3, #64	@ 0x40
 8006110:	d109      	bne.n	8006126 <UART_DMAError+0x62>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2b22      	cmp	r3, #34	@ 0x22
 8006116:	d106      	bne.n	8006126 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	2200      	movs	r2, #0
 800611c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006120:	6978      	ldr	r0, [r7, #20]
 8006122:	f7ff feb4 	bl	8005e8e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800612c:	f043 0210 	orr.w	r2, r3, #16
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006136:	6978      	ldr	r0, [r7, #20]
 8006138:	f7ff f908 	bl	800534c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800613c:	bf00      	nop
 800613e:	3718      	adds	r7, #24
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006150:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f7ff f8f2 	bl	800534c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006168:	bf00      	nop
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	e853 3f00 	ldrex	r3, [r3]
 8006184:	60bb      	str	r3, [r7, #8]
   return(result);
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800618c:	61fb      	str	r3, [r7, #28]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	61bb      	str	r3, [r7, #24]
 8006198:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619a:	6979      	ldr	r1, [r7, #20]
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	e841 2300 	strex	r3, r2, [r1]
 80061a2:	613b      	str	r3, [r7, #16]
   return(result);
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1e6      	bne.n	8006178 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2220      	movs	r2, #32
 80061ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff f8a9 	bl	8005310 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061be:	bf00      	nop
 80061c0:	3720      	adds	r7, #32
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80061f6:	bf00      	nop
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006202:	b480      	push	{r7}
 8006204:	b085      	sub	sp, #20
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_UARTEx_DisableFifoMode+0x16>
 8006214:	2302      	movs	r3, #2
 8006216:	e027      	b.n	8006268 <HAL_UARTEx_DisableFifoMode+0x66>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2224      	movs	r2, #36	@ 0x24
 8006224:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0201 	bic.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006246:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2220      	movs	r2, #32
 800625a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3714      	adds	r7, #20
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006288:	2302      	movs	r3, #2
 800628a:	e02d      	b.n	80062e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2224      	movs	r2, #36	@ 0x24
 8006298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0201 	bic.w	r2, r2, #1
 80062b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f8a3 	bl	8006414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2220      	movs	r2, #32
 80062da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006304:	2302      	movs	r3, #2
 8006306:	e02d      	b.n	8006364 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2224      	movs	r2, #36	@ 0x24
 8006314:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 0201 	bic.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f865 	bl	8006414 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2220      	movs	r2, #32
 8006356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b08c      	sub	sp, #48	@ 0x30
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	4613      	mov	r3, r2
 8006378:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006380:	2b20      	cmp	r3, #32
 8006382:	d142      	bne.n	800640a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d002      	beq.n	8006390 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800638a:	88fb      	ldrh	r3, [r7, #6]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e03b      	b.n	800640c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2201      	movs	r2, #1
 8006398:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80063a0:	88fb      	ldrh	r3, [r7, #6]
 80063a2:	461a      	mov	r2, r3
 80063a4:	68b9      	ldr	r1, [r7, #8]
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f7ff fc8a 	bl	8005cc0 <UART_Start_Receive_DMA>
 80063ac:	4603      	mov	r3, r0
 80063ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80063b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d124      	bne.n	8006404 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d11d      	bne.n	80063fe <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2210      	movs	r2, #16
 80063c8:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	617b      	str	r3, [r7, #20]
   return(result);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f043 0310 	orr.w	r3, r3, #16
 80063de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ea:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	6a39      	ldr	r1, [r7, #32]
 80063ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f0:	e841 2300 	strex	r3, r2, [r1]
 80063f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e6      	bne.n	80063ca <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80063fc:	e002      	b.n	8006404 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006404:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006408:	e000      	b.n	800640c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800640a:	2302      	movs	r3, #2
  }
}
 800640c:	4618      	mov	r0, r3
 800640e:	3730      	adds	r7, #48	@ 0x30
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006420:	2b00      	cmp	r3, #0
 8006422:	d108      	bne.n	8006436 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006434:	e031      	b.n	800649a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006436:	2308      	movs	r3, #8
 8006438:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800643a:	2308      	movs	r3, #8
 800643c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	0e5b      	lsrs	r3, r3, #25
 8006446:	b2db      	uxtb	r3, r3
 8006448:	f003 0307 	and.w	r3, r3, #7
 800644c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	0f5b      	lsrs	r3, r3, #29
 8006456:	b2db      	uxtb	r3, r3
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800645e:	7bbb      	ldrb	r3, [r7, #14]
 8006460:	7b3a      	ldrb	r2, [r7, #12]
 8006462:	4911      	ldr	r1, [pc, #68]	@ (80064a8 <UARTEx_SetNbDataToProcess+0x94>)
 8006464:	5c8a      	ldrb	r2, [r1, r2]
 8006466:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800646a:	7b3a      	ldrb	r2, [r7, #12]
 800646c:	490f      	ldr	r1, [pc, #60]	@ (80064ac <UARTEx_SetNbDataToProcess+0x98>)
 800646e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006470:	fb93 f3f2 	sdiv	r3, r3, r2
 8006474:	b29a      	uxth	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800647c:	7bfb      	ldrb	r3, [r7, #15]
 800647e:	7b7a      	ldrb	r2, [r7, #13]
 8006480:	4909      	ldr	r1, [pc, #36]	@ (80064a8 <UARTEx_SetNbDataToProcess+0x94>)
 8006482:	5c8a      	ldrb	r2, [r1, r2]
 8006484:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006488:	7b7a      	ldrb	r2, [r7, #13]
 800648a:	4908      	ldr	r1, [pc, #32]	@ (80064ac <UARTEx_SetNbDataToProcess+0x98>)
 800648c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800648e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006492:	b29a      	uxth	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800649a:	bf00      	nop
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	080073d0 	.word	0x080073d0
 80064ac:	080073d8 	.word	0x080073d8

080064b0 <std>:
 80064b0:	2300      	movs	r3, #0
 80064b2:	b510      	push	{r4, lr}
 80064b4:	4604      	mov	r4, r0
 80064b6:	e9c0 3300 	strd	r3, r3, [r0]
 80064ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064be:	6083      	str	r3, [r0, #8]
 80064c0:	8181      	strh	r1, [r0, #12]
 80064c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80064c4:	81c2      	strh	r2, [r0, #14]
 80064c6:	6183      	str	r3, [r0, #24]
 80064c8:	4619      	mov	r1, r3
 80064ca:	2208      	movs	r2, #8
 80064cc:	305c      	adds	r0, #92	@ 0x5c
 80064ce:	f000 f906 	bl	80066de <memset>
 80064d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006508 <std+0x58>)
 80064d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80064d6:	4b0d      	ldr	r3, [pc, #52]	@ (800650c <std+0x5c>)
 80064d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80064da:	4b0d      	ldr	r3, [pc, #52]	@ (8006510 <std+0x60>)
 80064dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80064de:	4b0d      	ldr	r3, [pc, #52]	@ (8006514 <std+0x64>)
 80064e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80064e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006518 <std+0x68>)
 80064e4:	6224      	str	r4, [r4, #32]
 80064e6:	429c      	cmp	r4, r3
 80064e8:	d006      	beq.n	80064f8 <std+0x48>
 80064ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80064ee:	4294      	cmp	r4, r2
 80064f0:	d002      	beq.n	80064f8 <std+0x48>
 80064f2:	33d0      	adds	r3, #208	@ 0xd0
 80064f4:	429c      	cmp	r4, r3
 80064f6:	d105      	bne.n	8006504 <std+0x54>
 80064f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80064fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006500:	f000 b966 	b.w	80067d0 <__retarget_lock_init_recursive>
 8006504:	bd10      	pop	{r4, pc}
 8006506:	bf00      	nop
 8006508:	08006659 	.word	0x08006659
 800650c:	0800667b 	.word	0x0800667b
 8006510:	080066b3 	.word	0x080066b3
 8006514:	080066d7 	.word	0x080066d7
 8006518:	2000044c 	.word	0x2000044c

0800651c <stdio_exit_handler>:
 800651c:	4a02      	ldr	r2, [pc, #8]	@ (8006528 <stdio_exit_handler+0xc>)
 800651e:	4903      	ldr	r1, [pc, #12]	@ (800652c <stdio_exit_handler+0x10>)
 8006520:	4803      	ldr	r0, [pc, #12]	@ (8006530 <stdio_exit_handler+0x14>)
 8006522:	f000 b869 	b.w	80065f8 <_fwalk_sglue>
 8006526:	bf00      	nop
 8006528:	200000ac 	.word	0x200000ac
 800652c:	08007071 	.word	0x08007071
 8006530:	200000bc 	.word	0x200000bc

08006534 <cleanup_stdio>:
 8006534:	6841      	ldr	r1, [r0, #4]
 8006536:	4b0c      	ldr	r3, [pc, #48]	@ (8006568 <cleanup_stdio+0x34>)
 8006538:	4299      	cmp	r1, r3
 800653a:	b510      	push	{r4, lr}
 800653c:	4604      	mov	r4, r0
 800653e:	d001      	beq.n	8006544 <cleanup_stdio+0x10>
 8006540:	f000 fd96 	bl	8007070 <_fflush_r>
 8006544:	68a1      	ldr	r1, [r4, #8]
 8006546:	4b09      	ldr	r3, [pc, #36]	@ (800656c <cleanup_stdio+0x38>)
 8006548:	4299      	cmp	r1, r3
 800654a:	d002      	beq.n	8006552 <cleanup_stdio+0x1e>
 800654c:	4620      	mov	r0, r4
 800654e:	f000 fd8f 	bl	8007070 <_fflush_r>
 8006552:	68e1      	ldr	r1, [r4, #12]
 8006554:	4b06      	ldr	r3, [pc, #24]	@ (8006570 <cleanup_stdio+0x3c>)
 8006556:	4299      	cmp	r1, r3
 8006558:	d004      	beq.n	8006564 <cleanup_stdio+0x30>
 800655a:	4620      	mov	r0, r4
 800655c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006560:	f000 bd86 	b.w	8007070 <_fflush_r>
 8006564:	bd10      	pop	{r4, pc}
 8006566:	bf00      	nop
 8006568:	2000044c 	.word	0x2000044c
 800656c:	200004b4 	.word	0x200004b4
 8006570:	2000051c 	.word	0x2000051c

08006574 <global_stdio_init.part.0>:
 8006574:	b510      	push	{r4, lr}
 8006576:	4b0b      	ldr	r3, [pc, #44]	@ (80065a4 <global_stdio_init.part.0+0x30>)
 8006578:	4c0b      	ldr	r4, [pc, #44]	@ (80065a8 <global_stdio_init.part.0+0x34>)
 800657a:	4a0c      	ldr	r2, [pc, #48]	@ (80065ac <global_stdio_init.part.0+0x38>)
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	4620      	mov	r0, r4
 8006580:	2200      	movs	r2, #0
 8006582:	2104      	movs	r1, #4
 8006584:	f7ff ff94 	bl	80064b0 <std>
 8006588:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800658c:	2201      	movs	r2, #1
 800658e:	2109      	movs	r1, #9
 8006590:	f7ff ff8e 	bl	80064b0 <std>
 8006594:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006598:	2202      	movs	r2, #2
 800659a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800659e:	2112      	movs	r1, #18
 80065a0:	f7ff bf86 	b.w	80064b0 <std>
 80065a4:	20000584 	.word	0x20000584
 80065a8:	2000044c 	.word	0x2000044c
 80065ac:	0800651d 	.word	0x0800651d

080065b0 <__sfp_lock_acquire>:
 80065b0:	4801      	ldr	r0, [pc, #4]	@ (80065b8 <__sfp_lock_acquire+0x8>)
 80065b2:	f000 b90e 	b.w	80067d2 <__retarget_lock_acquire_recursive>
 80065b6:	bf00      	nop
 80065b8:	2000058d 	.word	0x2000058d

080065bc <__sfp_lock_release>:
 80065bc:	4801      	ldr	r0, [pc, #4]	@ (80065c4 <__sfp_lock_release+0x8>)
 80065be:	f000 b909 	b.w	80067d4 <__retarget_lock_release_recursive>
 80065c2:	bf00      	nop
 80065c4:	2000058d 	.word	0x2000058d

080065c8 <__sinit>:
 80065c8:	b510      	push	{r4, lr}
 80065ca:	4604      	mov	r4, r0
 80065cc:	f7ff fff0 	bl	80065b0 <__sfp_lock_acquire>
 80065d0:	6a23      	ldr	r3, [r4, #32]
 80065d2:	b11b      	cbz	r3, 80065dc <__sinit+0x14>
 80065d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065d8:	f7ff bff0 	b.w	80065bc <__sfp_lock_release>
 80065dc:	4b04      	ldr	r3, [pc, #16]	@ (80065f0 <__sinit+0x28>)
 80065de:	6223      	str	r3, [r4, #32]
 80065e0:	4b04      	ldr	r3, [pc, #16]	@ (80065f4 <__sinit+0x2c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1f5      	bne.n	80065d4 <__sinit+0xc>
 80065e8:	f7ff ffc4 	bl	8006574 <global_stdio_init.part.0>
 80065ec:	e7f2      	b.n	80065d4 <__sinit+0xc>
 80065ee:	bf00      	nop
 80065f0:	08006535 	.word	0x08006535
 80065f4:	20000584 	.word	0x20000584

080065f8 <_fwalk_sglue>:
 80065f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065fc:	4607      	mov	r7, r0
 80065fe:	4688      	mov	r8, r1
 8006600:	4614      	mov	r4, r2
 8006602:	2600      	movs	r6, #0
 8006604:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006608:	f1b9 0901 	subs.w	r9, r9, #1
 800660c:	d505      	bpl.n	800661a <_fwalk_sglue+0x22>
 800660e:	6824      	ldr	r4, [r4, #0]
 8006610:	2c00      	cmp	r4, #0
 8006612:	d1f7      	bne.n	8006604 <_fwalk_sglue+0xc>
 8006614:	4630      	mov	r0, r6
 8006616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800661a:	89ab      	ldrh	r3, [r5, #12]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d907      	bls.n	8006630 <_fwalk_sglue+0x38>
 8006620:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006624:	3301      	adds	r3, #1
 8006626:	d003      	beq.n	8006630 <_fwalk_sglue+0x38>
 8006628:	4629      	mov	r1, r5
 800662a:	4638      	mov	r0, r7
 800662c:	47c0      	blx	r8
 800662e:	4306      	orrs	r6, r0
 8006630:	3568      	adds	r5, #104	@ 0x68
 8006632:	e7e9      	b.n	8006608 <_fwalk_sglue+0x10>

08006634 <iprintf>:
 8006634:	b40f      	push	{r0, r1, r2, r3}
 8006636:	b507      	push	{r0, r1, r2, lr}
 8006638:	4906      	ldr	r1, [pc, #24]	@ (8006654 <iprintf+0x20>)
 800663a:	ab04      	add	r3, sp, #16
 800663c:	6808      	ldr	r0, [r1, #0]
 800663e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006642:	6881      	ldr	r1, [r0, #8]
 8006644:	9301      	str	r3, [sp, #4]
 8006646:	f000 f9e9 	bl	8006a1c <_vfiprintf_r>
 800664a:	b003      	add	sp, #12
 800664c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006650:	b004      	add	sp, #16
 8006652:	4770      	bx	lr
 8006654:	200000b8 	.word	0x200000b8

08006658 <__sread>:
 8006658:	b510      	push	{r4, lr}
 800665a:	460c      	mov	r4, r1
 800665c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006660:	f000 f868 	bl	8006734 <_read_r>
 8006664:	2800      	cmp	r0, #0
 8006666:	bfab      	itete	ge
 8006668:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800666a:	89a3      	ldrhlt	r3, [r4, #12]
 800666c:	181b      	addge	r3, r3, r0
 800666e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006672:	bfac      	ite	ge
 8006674:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006676:	81a3      	strhlt	r3, [r4, #12]
 8006678:	bd10      	pop	{r4, pc}

0800667a <__swrite>:
 800667a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800667e:	461f      	mov	r7, r3
 8006680:	898b      	ldrh	r3, [r1, #12]
 8006682:	05db      	lsls	r3, r3, #23
 8006684:	4605      	mov	r5, r0
 8006686:	460c      	mov	r4, r1
 8006688:	4616      	mov	r6, r2
 800668a:	d505      	bpl.n	8006698 <__swrite+0x1e>
 800668c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006690:	2302      	movs	r3, #2
 8006692:	2200      	movs	r2, #0
 8006694:	f000 f83c 	bl	8006710 <_lseek_r>
 8006698:	89a3      	ldrh	r3, [r4, #12]
 800669a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800669e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066a2:	81a3      	strh	r3, [r4, #12]
 80066a4:	4632      	mov	r2, r6
 80066a6:	463b      	mov	r3, r7
 80066a8:	4628      	mov	r0, r5
 80066aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066ae:	f000 b853 	b.w	8006758 <_write_r>

080066b2 <__sseek>:
 80066b2:	b510      	push	{r4, lr}
 80066b4:	460c      	mov	r4, r1
 80066b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ba:	f000 f829 	bl	8006710 <_lseek_r>
 80066be:	1c43      	adds	r3, r0, #1
 80066c0:	89a3      	ldrh	r3, [r4, #12]
 80066c2:	bf15      	itete	ne
 80066c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066ce:	81a3      	strheq	r3, [r4, #12]
 80066d0:	bf18      	it	ne
 80066d2:	81a3      	strhne	r3, [r4, #12]
 80066d4:	bd10      	pop	{r4, pc}

080066d6 <__sclose>:
 80066d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066da:	f000 b809 	b.w	80066f0 <_close_r>

080066de <memset>:
 80066de:	4402      	add	r2, r0
 80066e0:	4603      	mov	r3, r0
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d100      	bne.n	80066e8 <memset+0xa>
 80066e6:	4770      	bx	lr
 80066e8:	f803 1b01 	strb.w	r1, [r3], #1
 80066ec:	e7f9      	b.n	80066e2 <memset+0x4>
	...

080066f0 <_close_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4d06      	ldr	r5, [pc, #24]	@ (800670c <_close_r+0x1c>)
 80066f4:	2300      	movs	r3, #0
 80066f6:	4604      	mov	r4, r0
 80066f8:	4608      	mov	r0, r1
 80066fa:	602b      	str	r3, [r5, #0]
 80066fc:	f7fa fba7 	bl	8000e4e <_close>
 8006700:	1c43      	adds	r3, r0, #1
 8006702:	d102      	bne.n	800670a <_close_r+0x1a>
 8006704:	682b      	ldr	r3, [r5, #0]
 8006706:	b103      	cbz	r3, 800670a <_close_r+0x1a>
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	bd38      	pop	{r3, r4, r5, pc}
 800670c:	20000588 	.word	0x20000588

08006710 <_lseek_r>:
 8006710:	b538      	push	{r3, r4, r5, lr}
 8006712:	4d07      	ldr	r5, [pc, #28]	@ (8006730 <_lseek_r+0x20>)
 8006714:	4604      	mov	r4, r0
 8006716:	4608      	mov	r0, r1
 8006718:	4611      	mov	r1, r2
 800671a:	2200      	movs	r2, #0
 800671c:	602a      	str	r2, [r5, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	f7fa fbbc 	bl	8000e9c <_lseek>
 8006724:	1c43      	adds	r3, r0, #1
 8006726:	d102      	bne.n	800672e <_lseek_r+0x1e>
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	b103      	cbz	r3, 800672e <_lseek_r+0x1e>
 800672c:	6023      	str	r3, [r4, #0]
 800672e:	bd38      	pop	{r3, r4, r5, pc}
 8006730:	20000588 	.word	0x20000588

08006734 <_read_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	4d07      	ldr	r5, [pc, #28]	@ (8006754 <_read_r+0x20>)
 8006738:	4604      	mov	r4, r0
 800673a:	4608      	mov	r0, r1
 800673c:	4611      	mov	r1, r2
 800673e:	2200      	movs	r2, #0
 8006740:	602a      	str	r2, [r5, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	f7fa fb4a 	bl	8000ddc <_read>
 8006748:	1c43      	adds	r3, r0, #1
 800674a:	d102      	bne.n	8006752 <_read_r+0x1e>
 800674c:	682b      	ldr	r3, [r5, #0]
 800674e:	b103      	cbz	r3, 8006752 <_read_r+0x1e>
 8006750:	6023      	str	r3, [r4, #0]
 8006752:	bd38      	pop	{r3, r4, r5, pc}
 8006754:	20000588 	.word	0x20000588

08006758 <_write_r>:
 8006758:	b538      	push	{r3, r4, r5, lr}
 800675a:	4d07      	ldr	r5, [pc, #28]	@ (8006778 <_write_r+0x20>)
 800675c:	4604      	mov	r4, r0
 800675e:	4608      	mov	r0, r1
 8006760:	4611      	mov	r1, r2
 8006762:	2200      	movs	r2, #0
 8006764:	602a      	str	r2, [r5, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	f7fa fb55 	bl	8000e16 <_write>
 800676c:	1c43      	adds	r3, r0, #1
 800676e:	d102      	bne.n	8006776 <_write_r+0x1e>
 8006770:	682b      	ldr	r3, [r5, #0]
 8006772:	b103      	cbz	r3, 8006776 <_write_r+0x1e>
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	bd38      	pop	{r3, r4, r5, pc}
 8006778:	20000588 	.word	0x20000588

0800677c <__errno>:
 800677c:	4b01      	ldr	r3, [pc, #4]	@ (8006784 <__errno+0x8>)
 800677e:	6818      	ldr	r0, [r3, #0]
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	200000b8 	.word	0x200000b8

08006788 <__libc_init_array>:
 8006788:	b570      	push	{r4, r5, r6, lr}
 800678a:	4d0d      	ldr	r5, [pc, #52]	@ (80067c0 <__libc_init_array+0x38>)
 800678c:	4c0d      	ldr	r4, [pc, #52]	@ (80067c4 <__libc_init_array+0x3c>)
 800678e:	1b64      	subs	r4, r4, r5
 8006790:	10a4      	asrs	r4, r4, #2
 8006792:	2600      	movs	r6, #0
 8006794:	42a6      	cmp	r6, r4
 8006796:	d109      	bne.n	80067ac <__libc_init_array+0x24>
 8006798:	4d0b      	ldr	r5, [pc, #44]	@ (80067c8 <__libc_init_array+0x40>)
 800679a:	4c0c      	ldr	r4, [pc, #48]	@ (80067cc <__libc_init_array+0x44>)
 800679c:	f000 fdb8 	bl	8007310 <_init>
 80067a0:	1b64      	subs	r4, r4, r5
 80067a2:	10a4      	asrs	r4, r4, #2
 80067a4:	2600      	movs	r6, #0
 80067a6:	42a6      	cmp	r6, r4
 80067a8:	d105      	bne.n	80067b6 <__libc_init_array+0x2e>
 80067aa:	bd70      	pop	{r4, r5, r6, pc}
 80067ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80067b0:	4798      	blx	r3
 80067b2:	3601      	adds	r6, #1
 80067b4:	e7ee      	b.n	8006794 <__libc_init_array+0xc>
 80067b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ba:	4798      	blx	r3
 80067bc:	3601      	adds	r6, #1
 80067be:	e7f2      	b.n	80067a6 <__libc_init_array+0x1e>
 80067c0:	0800741c 	.word	0x0800741c
 80067c4:	0800741c 	.word	0x0800741c
 80067c8:	0800741c 	.word	0x0800741c
 80067cc:	08007420 	.word	0x08007420

080067d0 <__retarget_lock_init_recursive>:
 80067d0:	4770      	bx	lr

080067d2 <__retarget_lock_acquire_recursive>:
 80067d2:	4770      	bx	lr

080067d4 <__retarget_lock_release_recursive>:
 80067d4:	4770      	bx	lr
	...

080067d8 <_free_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4605      	mov	r5, r0
 80067dc:	2900      	cmp	r1, #0
 80067de:	d041      	beq.n	8006864 <_free_r+0x8c>
 80067e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067e4:	1f0c      	subs	r4, r1, #4
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	bfb8      	it	lt
 80067ea:	18e4      	addlt	r4, r4, r3
 80067ec:	f000 f8e0 	bl	80069b0 <__malloc_lock>
 80067f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006868 <_free_r+0x90>)
 80067f2:	6813      	ldr	r3, [r2, #0]
 80067f4:	b933      	cbnz	r3, 8006804 <_free_r+0x2c>
 80067f6:	6063      	str	r3, [r4, #4]
 80067f8:	6014      	str	r4, [r2, #0]
 80067fa:	4628      	mov	r0, r5
 80067fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006800:	f000 b8dc 	b.w	80069bc <__malloc_unlock>
 8006804:	42a3      	cmp	r3, r4
 8006806:	d908      	bls.n	800681a <_free_r+0x42>
 8006808:	6820      	ldr	r0, [r4, #0]
 800680a:	1821      	adds	r1, r4, r0
 800680c:	428b      	cmp	r3, r1
 800680e:	bf01      	itttt	eq
 8006810:	6819      	ldreq	r1, [r3, #0]
 8006812:	685b      	ldreq	r3, [r3, #4]
 8006814:	1809      	addeq	r1, r1, r0
 8006816:	6021      	streq	r1, [r4, #0]
 8006818:	e7ed      	b.n	80067f6 <_free_r+0x1e>
 800681a:	461a      	mov	r2, r3
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	b10b      	cbz	r3, 8006824 <_free_r+0x4c>
 8006820:	42a3      	cmp	r3, r4
 8006822:	d9fa      	bls.n	800681a <_free_r+0x42>
 8006824:	6811      	ldr	r1, [r2, #0]
 8006826:	1850      	adds	r0, r2, r1
 8006828:	42a0      	cmp	r0, r4
 800682a:	d10b      	bne.n	8006844 <_free_r+0x6c>
 800682c:	6820      	ldr	r0, [r4, #0]
 800682e:	4401      	add	r1, r0
 8006830:	1850      	adds	r0, r2, r1
 8006832:	4283      	cmp	r3, r0
 8006834:	6011      	str	r1, [r2, #0]
 8006836:	d1e0      	bne.n	80067fa <_free_r+0x22>
 8006838:	6818      	ldr	r0, [r3, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	6053      	str	r3, [r2, #4]
 800683e:	4408      	add	r0, r1
 8006840:	6010      	str	r0, [r2, #0]
 8006842:	e7da      	b.n	80067fa <_free_r+0x22>
 8006844:	d902      	bls.n	800684c <_free_r+0x74>
 8006846:	230c      	movs	r3, #12
 8006848:	602b      	str	r3, [r5, #0]
 800684a:	e7d6      	b.n	80067fa <_free_r+0x22>
 800684c:	6820      	ldr	r0, [r4, #0]
 800684e:	1821      	adds	r1, r4, r0
 8006850:	428b      	cmp	r3, r1
 8006852:	bf04      	itt	eq
 8006854:	6819      	ldreq	r1, [r3, #0]
 8006856:	685b      	ldreq	r3, [r3, #4]
 8006858:	6063      	str	r3, [r4, #4]
 800685a:	bf04      	itt	eq
 800685c:	1809      	addeq	r1, r1, r0
 800685e:	6021      	streq	r1, [r4, #0]
 8006860:	6054      	str	r4, [r2, #4]
 8006862:	e7ca      	b.n	80067fa <_free_r+0x22>
 8006864:	bd38      	pop	{r3, r4, r5, pc}
 8006866:	bf00      	nop
 8006868:	20000594 	.word	0x20000594

0800686c <sbrk_aligned>:
 800686c:	b570      	push	{r4, r5, r6, lr}
 800686e:	4e0f      	ldr	r6, [pc, #60]	@ (80068ac <sbrk_aligned+0x40>)
 8006870:	460c      	mov	r4, r1
 8006872:	6831      	ldr	r1, [r6, #0]
 8006874:	4605      	mov	r5, r0
 8006876:	b911      	cbnz	r1, 800687e <sbrk_aligned+0x12>
 8006878:	f000 fcb6 	bl	80071e8 <_sbrk_r>
 800687c:	6030      	str	r0, [r6, #0]
 800687e:	4621      	mov	r1, r4
 8006880:	4628      	mov	r0, r5
 8006882:	f000 fcb1 	bl	80071e8 <_sbrk_r>
 8006886:	1c43      	adds	r3, r0, #1
 8006888:	d103      	bne.n	8006892 <sbrk_aligned+0x26>
 800688a:	f04f 34ff 	mov.w	r4, #4294967295
 800688e:	4620      	mov	r0, r4
 8006890:	bd70      	pop	{r4, r5, r6, pc}
 8006892:	1cc4      	adds	r4, r0, #3
 8006894:	f024 0403 	bic.w	r4, r4, #3
 8006898:	42a0      	cmp	r0, r4
 800689a:	d0f8      	beq.n	800688e <sbrk_aligned+0x22>
 800689c:	1a21      	subs	r1, r4, r0
 800689e:	4628      	mov	r0, r5
 80068a0:	f000 fca2 	bl	80071e8 <_sbrk_r>
 80068a4:	3001      	adds	r0, #1
 80068a6:	d1f2      	bne.n	800688e <sbrk_aligned+0x22>
 80068a8:	e7ef      	b.n	800688a <sbrk_aligned+0x1e>
 80068aa:	bf00      	nop
 80068ac:	20000590 	.word	0x20000590

080068b0 <_malloc_r>:
 80068b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068b4:	1ccd      	adds	r5, r1, #3
 80068b6:	f025 0503 	bic.w	r5, r5, #3
 80068ba:	3508      	adds	r5, #8
 80068bc:	2d0c      	cmp	r5, #12
 80068be:	bf38      	it	cc
 80068c0:	250c      	movcc	r5, #12
 80068c2:	2d00      	cmp	r5, #0
 80068c4:	4606      	mov	r6, r0
 80068c6:	db01      	blt.n	80068cc <_malloc_r+0x1c>
 80068c8:	42a9      	cmp	r1, r5
 80068ca:	d904      	bls.n	80068d6 <_malloc_r+0x26>
 80068cc:	230c      	movs	r3, #12
 80068ce:	6033      	str	r3, [r6, #0]
 80068d0:	2000      	movs	r0, #0
 80068d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069ac <_malloc_r+0xfc>
 80068da:	f000 f869 	bl	80069b0 <__malloc_lock>
 80068de:	f8d8 3000 	ldr.w	r3, [r8]
 80068e2:	461c      	mov	r4, r3
 80068e4:	bb44      	cbnz	r4, 8006938 <_malloc_r+0x88>
 80068e6:	4629      	mov	r1, r5
 80068e8:	4630      	mov	r0, r6
 80068ea:	f7ff ffbf 	bl	800686c <sbrk_aligned>
 80068ee:	1c43      	adds	r3, r0, #1
 80068f0:	4604      	mov	r4, r0
 80068f2:	d158      	bne.n	80069a6 <_malloc_r+0xf6>
 80068f4:	f8d8 4000 	ldr.w	r4, [r8]
 80068f8:	4627      	mov	r7, r4
 80068fa:	2f00      	cmp	r7, #0
 80068fc:	d143      	bne.n	8006986 <_malloc_r+0xd6>
 80068fe:	2c00      	cmp	r4, #0
 8006900:	d04b      	beq.n	800699a <_malloc_r+0xea>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	4639      	mov	r1, r7
 8006906:	4630      	mov	r0, r6
 8006908:	eb04 0903 	add.w	r9, r4, r3
 800690c:	f000 fc6c 	bl	80071e8 <_sbrk_r>
 8006910:	4581      	cmp	r9, r0
 8006912:	d142      	bne.n	800699a <_malloc_r+0xea>
 8006914:	6821      	ldr	r1, [r4, #0]
 8006916:	1a6d      	subs	r5, r5, r1
 8006918:	4629      	mov	r1, r5
 800691a:	4630      	mov	r0, r6
 800691c:	f7ff ffa6 	bl	800686c <sbrk_aligned>
 8006920:	3001      	adds	r0, #1
 8006922:	d03a      	beq.n	800699a <_malloc_r+0xea>
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	442b      	add	r3, r5
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	f8d8 3000 	ldr.w	r3, [r8]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	bb62      	cbnz	r2, 800698c <_malloc_r+0xdc>
 8006932:	f8c8 7000 	str.w	r7, [r8]
 8006936:	e00f      	b.n	8006958 <_malloc_r+0xa8>
 8006938:	6822      	ldr	r2, [r4, #0]
 800693a:	1b52      	subs	r2, r2, r5
 800693c:	d420      	bmi.n	8006980 <_malloc_r+0xd0>
 800693e:	2a0b      	cmp	r2, #11
 8006940:	d917      	bls.n	8006972 <_malloc_r+0xc2>
 8006942:	1961      	adds	r1, r4, r5
 8006944:	42a3      	cmp	r3, r4
 8006946:	6025      	str	r5, [r4, #0]
 8006948:	bf18      	it	ne
 800694a:	6059      	strne	r1, [r3, #4]
 800694c:	6863      	ldr	r3, [r4, #4]
 800694e:	bf08      	it	eq
 8006950:	f8c8 1000 	streq.w	r1, [r8]
 8006954:	5162      	str	r2, [r4, r5]
 8006956:	604b      	str	r3, [r1, #4]
 8006958:	4630      	mov	r0, r6
 800695a:	f000 f82f 	bl	80069bc <__malloc_unlock>
 800695e:	f104 000b 	add.w	r0, r4, #11
 8006962:	1d23      	adds	r3, r4, #4
 8006964:	f020 0007 	bic.w	r0, r0, #7
 8006968:	1ac2      	subs	r2, r0, r3
 800696a:	bf1c      	itt	ne
 800696c:	1a1b      	subne	r3, r3, r0
 800696e:	50a3      	strne	r3, [r4, r2]
 8006970:	e7af      	b.n	80068d2 <_malloc_r+0x22>
 8006972:	6862      	ldr	r2, [r4, #4]
 8006974:	42a3      	cmp	r3, r4
 8006976:	bf0c      	ite	eq
 8006978:	f8c8 2000 	streq.w	r2, [r8]
 800697c:	605a      	strne	r2, [r3, #4]
 800697e:	e7eb      	b.n	8006958 <_malloc_r+0xa8>
 8006980:	4623      	mov	r3, r4
 8006982:	6864      	ldr	r4, [r4, #4]
 8006984:	e7ae      	b.n	80068e4 <_malloc_r+0x34>
 8006986:	463c      	mov	r4, r7
 8006988:	687f      	ldr	r7, [r7, #4]
 800698a:	e7b6      	b.n	80068fa <_malloc_r+0x4a>
 800698c:	461a      	mov	r2, r3
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	42a3      	cmp	r3, r4
 8006992:	d1fb      	bne.n	800698c <_malloc_r+0xdc>
 8006994:	2300      	movs	r3, #0
 8006996:	6053      	str	r3, [r2, #4]
 8006998:	e7de      	b.n	8006958 <_malloc_r+0xa8>
 800699a:	230c      	movs	r3, #12
 800699c:	6033      	str	r3, [r6, #0]
 800699e:	4630      	mov	r0, r6
 80069a0:	f000 f80c 	bl	80069bc <__malloc_unlock>
 80069a4:	e794      	b.n	80068d0 <_malloc_r+0x20>
 80069a6:	6005      	str	r5, [r0, #0]
 80069a8:	e7d6      	b.n	8006958 <_malloc_r+0xa8>
 80069aa:	bf00      	nop
 80069ac:	20000594 	.word	0x20000594

080069b0 <__malloc_lock>:
 80069b0:	4801      	ldr	r0, [pc, #4]	@ (80069b8 <__malloc_lock+0x8>)
 80069b2:	f7ff bf0e 	b.w	80067d2 <__retarget_lock_acquire_recursive>
 80069b6:	bf00      	nop
 80069b8:	2000058c 	.word	0x2000058c

080069bc <__malloc_unlock>:
 80069bc:	4801      	ldr	r0, [pc, #4]	@ (80069c4 <__malloc_unlock+0x8>)
 80069be:	f7ff bf09 	b.w	80067d4 <__retarget_lock_release_recursive>
 80069c2:	bf00      	nop
 80069c4:	2000058c 	.word	0x2000058c

080069c8 <__sfputc_r>:
 80069c8:	6893      	ldr	r3, [r2, #8]
 80069ca:	3b01      	subs	r3, #1
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	b410      	push	{r4}
 80069d0:	6093      	str	r3, [r2, #8]
 80069d2:	da08      	bge.n	80069e6 <__sfputc_r+0x1e>
 80069d4:	6994      	ldr	r4, [r2, #24]
 80069d6:	42a3      	cmp	r3, r4
 80069d8:	db01      	blt.n	80069de <__sfputc_r+0x16>
 80069da:	290a      	cmp	r1, #10
 80069dc:	d103      	bne.n	80069e6 <__sfputc_r+0x1e>
 80069de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069e2:	f000 bb6d 	b.w	80070c0 <__swbuf_r>
 80069e6:	6813      	ldr	r3, [r2, #0]
 80069e8:	1c58      	adds	r0, r3, #1
 80069ea:	6010      	str	r0, [r2, #0]
 80069ec:	7019      	strb	r1, [r3, #0]
 80069ee:	4608      	mov	r0, r1
 80069f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <__sfputs_r>:
 80069f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f8:	4606      	mov	r6, r0
 80069fa:	460f      	mov	r7, r1
 80069fc:	4614      	mov	r4, r2
 80069fe:	18d5      	adds	r5, r2, r3
 8006a00:	42ac      	cmp	r4, r5
 8006a02:	d101      	bne.n	8006a08 <__sfputs_r+0x12>
 8006a04:	2000      	movs	r0, #0
 8006a06:	e007      	b.n	8006a18 <__sfputs_r+0x22>
 8006a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a0c:	463a      	mov	r2, r7
 8006a0e:	4630      	mov	r0, r6
 8006a10:	f7ff ffda 	bl	80069c8 <__sfputc_r>
 8006a14:	1c43      	adds	r3, r0, #1
 8006a16:	d1f3      	bne.n	8006a00 <__sfputs_r+0xa>
 8006a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a1c <_vfiprintf_r>:
 8006a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a20:	460d      	mov	r5, r1
 8006a22:	b09d      	sub	sp, #116	@ 0x74
 8006a24:	4614      	mov	r4, r2
 8006a26:	4698      	mov	r8, r3
 8006a28:	4606      	mov	r6, r0
 8006a2a:	b118      	cbz	r0, 8006a34 <_vfiprintf_r+0x18>
 8006a2c:	6a03      	ldr	r3, [r0, #32]
 8006a2e:	b90b      	cbnz	r3, 8006a34 <_vfiprintf_r+0x18>
 8006a30:	f7ff fdca 	bl	80065c8 <__sinit>
 8006a34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a36:	07d9      	lsls	r1, r3, #31
 8006a38:	d405      	bmi.n	8006a46 <_vfiprintf_r+0x2a>
 8006a3a:	89ab      	ldrh	r3, [r5, #12]
 8006a3c:	059a      	lsls	r2, r3, #22
 8006a3e:	d402      	bmi.n	8006a46 <_vfiprintf_r+0x2a>
 8006a40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a42:	f7ff fec6 	bl	80067d2 <__retarget_lock_acquire_recursive>
 8006a46:	89ab      	ldrh	r3, [r5, #12]
 8006a48:	071b      	lsls	r3, r3, #28
 8006a4a:	d501      	bpl.n	8006a50 <_vfiprintf_r+0x34>
 8006a4c:	692b      	ldr	r3, [r5, #16]
 8006a4e:	b99b      	cbnz	r3, 8006a78 <_vfiprintf_r+0x5c>
 8006a50:	4629      	mov	r1, r5
 8006a52:	4630      	mov	r0, r6
 8006a54:	f000 fb72 	bl	800713c <__swsetup_r>
 8006a58:	b170      	cbz	r0, 8006a78 <_vfiprintf_r+0x5c>
 8006a5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a5c:	07dc      	lsls	r4, r3, #31
 8006a5e:	d504      	bpl.n	8006a6a <_vfiprintf_r+0x4e>
 8006a60:	f04f 30ff 	mov.w	r0, #4294967295
 8006a64:	b01d      	add	sp, #116	@ 0x74
 8006a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a6a:	89ab      	ldrh	r3, [r5, #12]
 8006a6c:	0598      	lsls	r0, r3, #22
 8006a6e:	d4f7      	bmi.n	8006a60 <_vfiprintf_r+0x44>
 8006a70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a72:	f7ff feaf 	bl	80067d4 <__retarget_lock_release_recursive>
 8006a76:	e7f3      	b.n	8006a60 <_vfiprintf_r+0x44>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a7c:	2320      	movs	r3, #32
 8006a7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a82:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a86:	2330      	movs	r3, #48	@ 0x30
 8006a88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006c38 <_vfiprintf_r+0x21c>
 8006a8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a90:	f04f 0901 	mov.w	r9, #1
 8006a94:	4623      	mov	r3, r4
 8006a96:	469a      	mov	sl, r3
 8006a98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a9c:	b10a      	cbz	r2, 8006aa2 <_vfiprintf_r+0x86>
 8006a9e:	2a25      	cmp	r2, #37	@ 0x25
 8006aa0:	d1f9      	bne.n	8006a96 <_vfiprintf_r+0x7a>
 8006aa2:	ebba 0b04 	subs.w	fp, sl, r4
 8006aa6:	d00b      	beq.n	8006ac0 <_vfiprintf_r+0xa4>
 8006aa8:	465b      	mov	r3, fp
 8006aaa:	4622      	mov	r2, r4
 8006aac:	4629      	mov	r1, r5
 8006aae:	4630      	mov	r0, r6
 8006ab0:	f7ff ffa1 	bl	80069f6 <__sfputs_r>
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	f000 80a7 	beq.w	8006c08 <_vfiprintf_r+0x1ec>
 8006aba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006abc:	445a      	add	r2, fp
 8006abe:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 809f 	beq.w	8006c08 <_vfiprintf_r+0x1ec>
 8006aca:	2300      	movs	r3, #0
 8006acc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ad4:	f10a 0a01 	add.w	sl, sl, #1
 8006ad8:	9304      	str	r3, [sp, #16]
 8006ada:	9307      	str	r3, [sp, #28]
 8006adc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ae0:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ae2:	4654      	mov	r4, sl
 8006ae4:	2205      	movs	r2, #5
 8006ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aea:	4853      	ldr	r0, [pc, #332]	@ (8006c38 <_vfiprintf_r+0x21c>)
 8006aec:	f7f9 fb88 	bl	8000200 <memchr>
 8006af0:	9a04      	ldr	r2, [sp, #16]
 8006af2:	b9d8      	cbnz	r0, 8006b2c <_vfiprintf_r+0x110>
 8006af4:	06d1      	lsls	r1, r2, #27
 8006af6:	bf44      	itt	mi
 8006af8:	2320      	movmi	r3, #32
 8006afa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006afe:	0713      	lsls	r3, r2, #28
 8006b00:	bf44      	itt	mi
 8006b02:	232b      	movmi	r3, #43	@ 0x2b
 8006b04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b08:	f89a 3000 	ldrb.w	r3, [sl]
 8006b0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b0e:	d015      	beq.n	8006b3c <_vfiprintf_r+0x120>
 8006b10:	9a07      	ldr	r2, [sp, #28]
 8006b12:	4654      	mov	r4, sl
 8006b14:	2000      	movs	r0, #0
 8006b16:	f04f 0c0a 	mov.w	ip, #10
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b20:	3b30      	subs	r3, #48	@ 0x30
 8006b22:	2b09      	cmp	r3, #9
 8006b24:	d94b      	bls.n	8006bbe <_vfiprintf_r+0x1a2>
 8006b26:	b1b0      	cbz	r0, 8006b56 <_vfiprintf_r+0x13a>
 8006b28:	9207      	str	r2, [sp, #28]
 8006b2a:	e014      	b.n	8006b56 <_vfiprintf_r+0x13a>
 8006b2c:	eba0 0308 	sub.w	r3, r0, r8
 8006b30:	fa09 f303 	lsl.w	r3, r9, r3
 8006b34:	4313      	orrs	r3, r2
 8006b36:	9304      	str	r3, [sp, #16]
 8006b38:	46a2      	mov	sl, r4
 8006b3a:	e7d2      	b.n	8006ae2 <_vfiprintf_r+0xc6>
 8006b3c:	9b03      	ldr	r3, [sp, #12]
 8006b3e:	1d19      	adds	r1, r3, #4
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	9103      	str	r1, [sp, #12]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	bfbb      	ittet	lt
 8006b48:	425b      	neglt	r3, r3
 8006b4a:	f042 0202 	orrlt.w	r2, r2, #2
 8006b4e:	9307      	strge	r3, [sp, #28]
 8006b50:	9307      	strlt	r3, [sp, #28]
 8006b52:	bfb8      	it	lt
 8006b54:	9204      	strlt	r2, [sp, #16]
 8006b56:	7823      	ldrb	r3, [r4, #0]
 8006b58:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b5a:	d10a      	bne.n	8006b72 <_vfiprintf_r+0x156>
 8006b5c:	7863      	ldrb	r3, [r4, #1]
 8006b5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b60:	d132      	bne.n	8006bc8 <_vfiprintf_r+0x1ac>
 8006b62:	9b03      	ldr	r3, [sp, #12]
 8006b64:	1d1a      	adds	r2, r3, #4
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	9203      	str	r2, [sp, #12]
 8006b6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b6e:	3402      	adds	r4, #2
 8006b70:	9305      	str	r3, [sp, #20]
 8006b72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006c48 <_vfiprintf_r+0x22c>
 8006b76:	7821      	ldrb	r1, [r4, #0]
 8006b78:	2203      	movs	r2, #3
 8006b7a:	4650      	mov	r0, sl
 8006b7c:	f7f9 fb40 	bl	8000200 <memchr>
 8006b80:	b138      	cbz	r0, 8006b92 <_vfiprintf_r+0x176>
 8006b82:	9b04      	ldr	r3, [sp, #16]
 8006b84:	eba0 000a 	sub.w	r0, r0, sl
 8006b88:	2240      	movs	r2, #64	@ 0x40
 8006b8a:	4082      	lsls	r2, r0
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	3401      	adds	r4, #1
 8006b90:	9304      	str	r3, [sp, #16]
 8006b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b96:	4829      	ldr	r0, [pc, #164]	@ (8006c3c <_vfiprintf_r+0x220>)
 8006b98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b9c:	2206      	movs	r2, #6
 8006b9e:	f7f9 fb2f 	bl	8000200 <memchr>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d03f      	beq.n	8006c26 <_vfiprintf_r+0x20a>
 8006ba6:	4b26      	ldr	r3, [pc, #152]	@ (8006c40 <_vfiprintf_r+0x224>)
 8006ba8:	bb1b      	cbnz	r3, 8006bf2 <_vfiprintf_r+0x1d6>
 8006baa:	9b03      	ldr	r3, [sp, #12]
 8006bac:	3307      	adds	r3, #7
 8006bae:	f023 0307 	bic.w	r3, r3, #7
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	9303      	str	r3, [sp, #12]
 8006bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bb8:	443b      	add	r3, r7
 8006bba:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bbc:	e76a      	b.n	8006a94 <_vfiprintf_r+0x78>
 8006bbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bc2:	460c      	mov	r4, r1
 8006bc4:	2001      	movs	r0, #1
 8006bc6:	e7a8      	b.n	8006b1a <_vfiprintf_r+0xfe>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	3401      	adds	r4, #1
 8006bcc:	9305      	str	r3, [sp, #20]
 8006bce:	4619      	mov	r1, r3
 8006bd0:	f04f 0c0a 	mov.w	ip, #10
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bda:	3a30      	subs	r2, #48	@ 0x30
 8006bdc:	2a09      	cmp	r2, #9
 8006bde:	d903      	bls.n	8006be8 <_vfiprintf_r+0x1cc>
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0c6      	beq.n	8006b72 <_vfiprintf_r+0x156>
 8006be4:	9105      	str	r1, [sp, #20]
 8006be6:	e7c4      	b.n	8006b72 <_vfiprintf_r+0x156>
 8006be8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bec:	4604      	mov	r4, r0
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e7f0      	b.n	8006bd4 <_vfiprintf_r+0x1b8>
 8006bf2:	ab03      	add	r3, sp, #12
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	462a      	mov	r2, r5
 8006bf8:	4b12      	ldr	r3, [pc, #72]	@ (8006c44 <_vfiprintf_r+0x228>)
 8006bfa:	a904      	add	r1, sp, #16
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	f3af 8000 	nop.w
 8006c02:	4607      	mov	r7, r0
 8006c04:	1c78      	adds	r0, r7, #1
 8006c06:	d1d6      	bne.n	8006bb6 <_vfiprintf_r+0x19a>
 8006c08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c0a:	07d9      	lsls	r1, r3, #31
 8006c0c:	d405      	bmi.n	8006c1a <_vfiprintf_r+0x1fe>
 8006c0e:	89ab      	ldrh	r3, [r5, #12]
 8006c10:	059a      	lsls	r2, r3, #22
 8006c12:	d402      	bmi.n	8006c1a <_vfiprintf_r+0x1fe>
 8006c14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c16:	f7ff fddd 	bl	80067d4 <__retarget_lock_release_recursive>
 8006c1a:	89ab      	ldrh	r3, [r5, #12]
 8006c1c:	065b      	lsls	r3, r3, #25
 8006c1e:	f53f af1f 	bmi.w	8006a60 <_vfiprintf_r+0x44>
 8006c22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c24:	e71e      	b.n	8006a64 <_vfiprintf_r+0x48>
 8006c26:	ab03      	add	r3, sp, #12
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	462a      	mov	r2, r5
 8006c2c:	4b05      	ldr	r3, [pc, #20]	@ (8006c44 <_vfiprintf_r+0x228>)
 8006c2e:	a904      	add	r1, sp, #16
 8006c30:	4630      	mov	r0, r6
 8006c32:	f000 f879 	bl	8006d28 <_printf_i>
 8006c36:	e7e4      	b.n	8006c02 <_vfiprintf_r+0x1e6>
 8006c38:	080073e0 	.word	0x080073e0
 8006c3c:	080073ea 	.word	0x080073ea
 8006c40:	00000000 	.word	0x00000000
 8006c44:	080069f7 	.word	0x080069f7
 8006c48:	080073e6 	.word	0x080073e6

08006c4c <_printf_common>:
 8006c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c50:	4616      	mov	r6, r2
 8006c52:	4698      	mov	r8, r3
 8006c54:	688a      	ldr	r2, [r1, #8]
 8006c56:	690b      	ldr	r3, [r1, #16]
 8006c58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	bfb8      	it	lt
 8006c60:	4613      	movlt	r3, r2
 8006c62:	6033      	str	r3, [r6, #0]
 8006c64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c68:	4607      	mov	r7, r0
 8006c6a:	460c      	mov	r4, r1
 8006c6c:	b10a      	cbz	r2, 8006c72 <_printf_common+0x26>
 8006c6e:	3301      	adds	r3, #1
 8006c70:	6033      	str	r3, [r6, #0]
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	0699      	lsls	r1, r3, #26
 8006c76:	bf42      	ittt	mi
 8006c78:	6833      	ldrmi	r3, [r6, #0]
 8006c7a:	3302      	addmi	r3, #2
 8006c7c:	6033      	strmi	r3, [r6, #0]
 8006c7e:	6825      	ldr	r5, [r4, #0]
 8006c80:	f015 0506 	ands.w	r5, r5, #6
 8006c84:	d106      	bne.n	8006c94 <_printf_common+0x48>
 8006c86:	f104 0a19 	add.w	sl, r4, #25
 8006c8a:	68e3      	ldr	r3, [r4, #12]
 8006c8c:	6832      	ldr	r2, [r6, #0]
 8006c8e:	1a9b      	subs	r3, r3, r2
 8006c90:	42ab      	cmp	r3, r5
 8006c92:	dc26      	bgt.n	8006ce2 <_printf_common+0x96>
 8006c94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c98:	6822      	ldr	r2, [r4, #0]
 8006c9a:	3b00      	subs	r3, #0
 8006c9c:	bf18      	it	ne
 8006c9e:	2301      	movne	r3, #1
 8006ca0:	0692      	lsls	r2, r2, #26
 8006ca2:	d42b      	bmi.n	8006cfc <_printf_common+0xb0>
 8006ca4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ca8:	4641      	mov	r1, r8
 8006caa:	4638      	mov	r0, r7
 8006cac:	47c8      	blx	r9
 8006cae:	3001      	adds	r0, #1
 8006cb0:	d01e      	beq.n	8006cf0 <_printf_common+0xa4>
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	6922      	ldr	r2, [r4, #16]
 8006cb6:	f003 0306 	and.w	r3, r3, #6
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	bf02      	ittt	eq
 8006cbe:	68e5      	ldreq	r5, [r4, #12]
 8006cc0:	6833      	ldreq	r3, [r6, #0]
 8006cc2:	1aed      	subeq	r5, r5, r3
 8006cc4:	68a3      	ldr	r3, [r4, #8]
 8006cc6:	bf0c      	ite	eq
 8006cc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ccc:	2500      	movne	r5, #0
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	bfc4      	itt	gt
 8006cd2:	1a9b      	subgt	r3, r3, r2
 8006cd4:	18ed      	addgt	r5, r5, r3
 8006cd6:	2600      	movs	r6, #0
 8006cd8:	341a      	adds	r4, #26
 8006cda:	42b5      	cmp	r5, r6
 8006cdc:	d11a      	bne.n	8006d14 <_printf_common+0xc8>
 8006cde:	2000      	movs	r0, #0
 8006ce0:	e008      	b.n	8006cf4 <_printf_common+0xa8>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	4652      	mov	r2, sl
 8006ce6:	4641      	mov	r1, r8
 8006ce8:	4638      	mov	r0, r7
 8006cea:	47c8      	blx	r9
 8006cec:	3001      	adds	r0, #1
 8006cee:	d103      	bne.n	8006cf8 <_printf_common+0xac>
 8006cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf8:	3501      	adds	r5, #1
 8006cfa:	e7c6      	b.n	8006c8a <_printf_common+0x3e>
 8006cfc:	18e1      	adds	r1, r4, r3
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	2030      	movs	r0, #48	@ 0x30
 8006d02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d06:	4422      	add	r2, r4
 8006d08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d10:	3302      	adds	r3, #2
 8006d12:	e7c7      	b.n	8006ca4 <_printf_common+0x58>
 8006d14:	2301      	movs	r3, #1
 8006d16:	4622      	mov	r2, r4
 8006d18:	4641      	mov	r1, r8
 8006d1a:	4638      	mov	r0, r7
 8006d1c:	47c8      	blx	r9
 8006d1e:	3001      	adds	r0, #1
 8006d20:	d0e6      	beq.n	8006cf0 <_printf_common+0xa4>
 8006d22:	3601      	adds	r6, #1
 8006d24:	e7d9      	b.n	8006cda <_printf_common+0x8e>
	...

08006d28 <_printf_i>:
 8006d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d2c:	7e0f      	ldrb	r7, [r1, #24]
 8006d2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d30:	2f78      	cmp	r7, #120	@ 0x78
 8006d32:	4691      	mov	r9, r2
 8006d34:	4680      	mov	r8, r0
 8006d36:	460c      	mov	r4, r1
 8006d38:	469a      	mov	sl, r3
 8006d3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d3e:	d807      	bhi.n	8006d50 <_printf_i+0x28>
 8006d40:	2f62      	cmp	r7, #98	@ 0x62
 8006d42:	d80a      	bhi.n	8006d5a <_printf_i+0x32>
 8006d44:	2f00      	cmp	r7, #0
 8006d46:	f000 80d2 	beq.w	8006eee <_printf_i+0x1c6>
 8006d4a:	2f58      	cmp	r7, #88	@ 0x58
 8006d4c:	f000 80b9 	beq.w	8006ec2 <_printf_i+0x19a>
 8006d50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d58:	e03a      	b.n	8006dd0 <_printf_i+0xa8>
 8006d5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d5e:	2b15      	cmp	r3, #21
 8006d60:	d8f6      	bhi.n	8006d50 <_printf_i+0x28>
 8006d62:	a101      	add	r1, pc, #4	@ (adr r1, 8006d68 <_printf_i+0x40>)
 8006d64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d68:	08006dc1 	.word	0x08006dc1
 8006d6c:	08006dd5 	.word	0x08006dd5
 8006d70:	08006d51 	.word	0x08006d51
 8006d74:	08006d51 	.word	0x08006d51
 8006d78:	08006d51 	.word	0x08006d51
 8006d7c:	08006d51 	.word	0x08006d51
 8006d80:	08006dd5 	.word	0x08006dd5
 8006d84:	08006d51 	.word	0x08006d51
 8006d88:	08006d51 	.word	0x08006d51
 8006d8c:	08006d51 	.word	0x08006d51
 8006d90:	08006d51 	.word	0x08006d51
 8006d94:	08006ed5 	.word	0x08006ed5
 8006d98:	08006dff 	.word	0x08006dff
 8006d9c:	08006e8f 	.word	0x08006e8f
 8006da0:	08006d51 	.word	0x08006d51
 8006da4:	08006d51 	.word	0x08006d51
 8006da8:	08006ef7 	.word	0x08006ef7
 8006dac:	08006d51 	.word	0x08006d51
 8006db0:	08006dff 	.word	0x08006dff
 8006db4:	08006d51 	.word	0x08006d51
 8006db8:	08006d51 	.word	0x08006d51
 8006dbc:	08006e97 	.word	0x08006e97
 8006dc0:	6833      	ldr	r3, [r6, #0]
 8006dc2:	1d1a      	adds	r2, r3, #4
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6032      	str	r2, [r6, #0]
 8006dc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006dcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e09d      	b.n	8006f10 <_printf_i+0x1e8>
 8006dd4:	6833      	ldr	r3, [r6, #0]
 8006dd6:	6820      	ldr	r0, [r4, #0]
 8006dd8:	1d19      	adds	r1, r3, #4
 8006dda:	6031      	str	r1, [r6, #0]
 8006ddc:	0606      	lsls	r6, r0, #24
 8006dde:	d501      	bpl.n	8006de4 <_printf_i+0xbc>
 8006de0:	681d      	ldr	r5, [r3, #0]
 8006de2:	e003      	b.n	8006dec <_printf_i+0xc4>
 8006de4:	0645      	lsls	r5, r0, #25
 8006de6:	d5fb      	bpl.n	8006de0 <_printf_i+0xb8>
 8006de8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006dec:	2d00      	cmp	r5, #0
 8006dee:	da03      	bge.n	8006df8 <_printf_i+0xd0>
 8006df0:	232d      	movs	r3, #45	@ 0x2d
 8006df2:	426d      	negs	r5, r5
 8006df4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006df8:	4859      	ldr	r0, [pc, #356]	@ (8006f60 <_printf_i+0x238>)
 8006dfa:	230a      	movs	r3, #10
 8006dfc:	e011      	b.n	8006e22 <_printf_i+0xfa>
 8006dfe:	6821      	ldr	r1, [r4, #0]
 8006e00:	6833      	ldr	r3, [r6, #0]
 8006e02:	0608      	lsls	r0, r1, #24
 8006e04:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e08:	d402      	bmi.n	8006e10 <_printf_i+0xe8>
 8006e0a:	0649      	lsls	r1, r1, #25
 8006e0c:	bf48      	it	mi
 8006e0e:	b2ad      	uxthmi	r5, r5
 8006e10:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e12:	4853      	ldr	r0, [pc, #332]	@ (8006f60 <_printf_i+0x238>)
 8006e14:	6033      	str	r3, [r6, #0]
 8006e16:	bf14      	ite	ne
 8006e18:	230a      	movne	r3, #10
 8006e1a:	2308      	moveq	r3, #8
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e22:	6866      	ldr	r6, [r4, #4]
 8006e24:	60a6      	str	r6, [r4, #8]
 8006e26:	2e00      	cmp	r6, #0
 8006e28:	bfa2      	ittt	ge
 8006e2a:	6821      	ldrge	r1, [r4, #0]
 8006e2c:	f021 0104 	bicge.w	r1, r1, #4
 8006e30:	6021      	strge	r1, [r4, #0]
 8006e32:	b90d      	cbnz	r5, 8006e38 <_printf_i+0x110>
 8006e34:	2e00      	cmp	r6, #0
 8006e36:	d04b      	beq.n	8006ed0 <_printf_i+0x1a8>
 8006e38:	4616      	mov	r6, r2
 8006e3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e3e:	fb03 5711 	mls	r7, r3, r1, r5
 8006e42:	5dc7      	ldrb	r7, [r0, r7]
 8006e44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e48:	462f      	mov	r7, r5
 8006e4a:	42bb      	cmp	r3, r7
 8006e4c:	460d      	mov	r5, r1
 8006e4e:	d9f4      	bls.n	8006e3a <_printf_i+0x112>
 8006e50:	2b08      	cmp	r3, #8
 8006e52:	d10b      	bne.n	8006e6c <_printf_i+0x144>
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	07df      	lsls	r7, r3, #31
 8006e58:	d508      	bpl.n	8006e6c <_printf_i+0x144>
 8006e5a:	6923      	ldr	r3, [r4, #16]
 8006e5c:	6861      	ldr	r1, [r4, #4]
 8006e5e:	4299      	cmp	r1, r3
 8006e60:	bfde      	ittt	le
 8006e62:	2330      	movle	r3, #48	@ 0x30
 8006e64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e6c:	1b92      	subs	r2, r2, r6
 8006e6e:	6122      	str	r2, [r4, #16]
 8006e70:	f8cd a000 	str.w	sl, [sp]
 8006e74:	464b      	mov	r3, r9
 8006e76:	aa03      	add	r2, sp, #12
 8006e78:	4621      	mov	r1, r4
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	f7ff fee6 	bl	8006c4c <_printf_common>
 8006e80:	3001      	adds	r0, #1
 8006e82:	d14a      	bne.n	8006f1a <_printf_i+0x1f2>
 8006e84:	f04f 30ff 	mov.w	r0, #4294967295
 8006e88:	b004      	add	sp, #16
 8006e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	f043 0320 	orr.w	r3, r3, #32
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	4833      	ldr	r0, [pc, #204]	@ (8006f64 <_printf_i+0x23c>)
 8006e98:	2778      	movs	r7, #120	@ 0x78
 8006e9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	6831      	ldr	r1, [r6, #0]
 8006ea2:	061f      	lsls	r7, r3, #24
 8006ea4:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ea8:	d402      	bmi.n	8006eb0 <_printf_i+0x188>
 8006eaa:	065f      	lsls	r7, r3, #25
 8006eac:	bf48      	it	mi
 8006eae:	b2ad      	uxthmi	r5, r5
 8006eb0:	6031      	str	r1, [r6, #0]
 8006eb2:	07d9      	lsls	r1, r3, #31
 8006eb4:	bf44      	itt	mi
 8006eb6:	f043 0320 	orrmi.w	r3, r3, #32
 8006eba:	6023      	strmi	r3, [r4, #0]
 8006ebc:	b11d      	cbz	r5, 8006ec6 <_printf_i+0x19e>
 8006ebe:	2310      	movs	r3, #16
 8006ec0:	e7ac      	b.n	8006e1c <_printf_i+0xf4>
 8006ec2:	4827      	ldr	r0, [pc, #156]	@ (8006f60 <_printf_i+0x238>)
 8006ec4:	e7e9      	b.n	8006e9a <_printf_i+0x172>
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	f023 0320 	bic.w	r3, r3, #32
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	e7f6      	b.n	8006ebe <_printf_i+0x196>
 8006ed0:	4616      	mov	r6, r2
 8006ed2:	e7bd      	b.n	8006e50 <_printf_i+0x128>
 8006ed4:	6833      	ldr	r3, [r6, #0]
 8006ed6:	6825      	ldr	r5, [r4, #0]
 8006ed8:	6961      	ldr	r1, [r4, #20]
 8006eda:	1d18      	adds	r0, r3, #4
 8006edc:	6030      	str	r0, [r6, #0]
 8006ede:	062e      	lsls	r6, r5, #24
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	d501      	bpl.n	8006ee8 <_printf_i+0x1c0>
 8006ee4:	6019      	str	r1, [r3, #0]
 8006ee6:	e002      	b.n	8006eee <_printf_i+0x1c6>
 8006ee8:	0668      	lsls	r0, r5, #25
 8006eea:	d5fb      	bpl.n	8006ee4 <_printf_i+0x1bc>
 8006eec:	8019      	strh	r1, [r3, #0]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	6123      	str	r3, [r4, #16]
 8006ef2:	4616      	mov	r6, r2
 8006ef4:	e7bc      	b.n	8006e70 <_printf_i+0x148>
 8006ef6:	6833      	ldr	r3, [r6, #0]
 8006ef8:	1d1a      	adds	r2, r3, #4
 8006efa:	6032      	str	r2, [r6, #0]
 8006efc:	681e      	ldr	r6, [r3, #0]
 8006efe:	6862      	ldr	r2, [r4, #4]
 8006f00:	2100      	movs	r1, #0
 8006f02:	4630      	mov	r0, r6
 8006f04:	f7f9 f97c 	bl	8000200 <memchr>
 8006f08:	b108      	cbz	r0, 8006f0e <_printf_i+0x1e6>
 8006f0a:	1b80      	subs	r0, r0, r6
 8006f0c:	6060      	str	r0, [r4, #4]
 8006f0e:	6863      	ldr	r3, [r4, #4]
 8006f10:	6123      	str	r3, [r4, #16]
 8006f12:	2300      	movs	r3, #0
 8006f14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f18:	e7aa      	b.n	8006e70 <_printf_i+0x148>
 8006f1a:	6923      	ldr	r3, [r4, #16]
 8006f1c:	4632      	mov	r2, r6
 8006f1e:	4649      	mov	r1, r9
 8006f20:	4640      	mov	r0, r8
 8006f22:	47d0      	blx	sl
 8006f24:	3001      	adds	r0, #1
 8006f26:	d0ad      	beq.n	8006e84 <_printf_i+0x15c>
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	079b      	lsls	r3, r3, #30
 8006f2c:	d413      	bmi.n	8006f56 <_printf_i+0x22e>
 8006f2e:	68e0      	ldr	r0, [r4, #12]
 8006f30:	9b03      	ldr	r3, [sp, #12]
 8006f32:	4298      	cmp	r0, r3
 8006f34:	bfb8      	it	lt
 8006f36:	4618      	movlt	r0, r3
 8006f38:	e7a6      	b.n	8006e88 <_printf_i+0x160>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	4632      	mov	r2, r6
 8006f3e:	4649      	mov	r1, r9
 8006f40:	4640      	mov	r0, r8
 8006f42:	47d0      	blx	sl
 8006f44:	3001      	adds	r0, #1
 8006f46:	d09d      	beq.n	8006e84 <_printf_i+0x15c>
 8006f48:	3501      	adds	r5, #1
 8006f4a:	68e3      	ldr	r3, [r4, #12]
 8006f4c:	9903      	ldr	r1, [sp, #12]
 8006f4e:	1a5b      	subs	r3, r3, r1
 8006f50:	42ab      	cmp	r3, r5
 8006f52:	dcf2      	bgt.n	8006f3a <_printf_i+0x212>
 8006f54:	e7eb      	b.n	8006f2e <_printf_i+0x206>
 8006f56:	2500      	movs	r5, #0
 8006f58:	f104 0619 	add.w	r6, r4, #25
 8006f5c:	e7f5      	b.n	8006f4a <_printf_i+0x222>
 8006f5e:	bf00      	nop
 8006f60:	080073f1 	.word	0x080073f1
 8006f64:	08007402 	.word	0x08007402

08006f68 <__sflush_r>:
 8006f68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f70:	0716      	lsls	r6, r2, #28
 8006f72:	4605      	mov	r5, r0
 8006f74:	460c      	mov	r4, r1
 8006f76:	d454      	bmi.n	8007022 <__sflush_r+0xba>
 8006f78:	684b      	ldr	r3, [r1, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	dc02      	bgt.n	8006f84 <__sflush_r+0x1c>
 8006f7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	dd48      	ble.n	8007016 <__sflush_r+0xae>
 8006f84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f86:	2e00      	cmp	r6, #0
 8006f88:	d045      	beq.n	8007016 <__sflush_r+0xae>
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f90:	682f      	ldr	r7, [r5, #0]
 8006f92:	6a21      	ldr	r1, [r4, #32]
 8006f94:	602b      	str	r3, [r5, #0]
 8006f96:	d030      	beq.n	8006ffa <__sflush_r+0x92>
 8006f98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	0759      	lsls	r1, r3, #29
 8006f9e:	d505      	bpl.n	8006fac <__sflush_r+0x44>
 8006fa0:	6863      	ldr	r3, [r4, #4]
 8006fa2:	1ad2      	subs	r2, r2, r3
 8006fa4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006fa6:	b10b      	cbz	r3, 8006fac <__sflush_r+0x44>
 8006fa8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006faa:	1ad2      	subs	r2, r2, r3
 8006fac:	2300      	movs	r3, #0
 8006fae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006fb0:	6a21      	ldr	r1, [r4, #32]
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	47b0      	blx	r6
 8006fb6:	1c43      	adds	r3, r0, #1
 8006fb8:	89a3      	ldrh	r3, [r4, #12]
 8006fba:	d106      	bne.n	8006fca <__sflush_r+0x62>
 8006fbc:	6829      	ldr	r1, [r5, #0]
 8006fbe:	291d      	cmp	r1, #29
 8006fc0:	d82b      	bhi.n	800701a <__sflush_r+0xb2>
 8006fc2:	4a2a      	ldr	r2, [pc, #168]	@ (800706c <__sflush_r+0x104>)
 8006fc4:	410a      	asrs	r2, r1
 8006fc6:	07d6      	lsls	r6, r2, #31
 8006fc8:	d427      	bmi.n	800701a <__sflush_r+0xb2>
 8006fca:	2200      	movs	r2, #0
 8006fcc:	6062      	str	r2, [r4, #4]
 8006fce:	04d9      	lsls	r1, r3, #19
 8006fd0:	6922      	ldr	r2, [r4, #16]
 8006fd2:	6022      	str	r2, [r4, #0]
 8006fd4:	d504      	bpl.n	8006fe0 <__sflush_r+0x78>
 8006fd6:	1c42      	adds	r2, r0, #1
 8006fd8:	d101      	bne.n	8006fde <__sflush_r+0x76>
 8006fda:	682b      	ldr	r3, [r5, #0]
 8006fdc:	b903      	cbnz	r3, 8006fe0 <__sflush_r+0x78>
 8006fde:	6560      	str	r0, [r4, #84]	@ 0x54
 8006fe0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fe2:	602f      	str	r7, [r5, #0]
 8006fe4:	b1b9      	cbz	r1, 8007016 <__sflush_r+0xae>
 8006fe6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fea:	4299      	cmp	r1, r3
 8006fec:	d002      	beq.n	8006ff4 <__sflush_r+0x8c>
 8006fee:	4628      	mov	r0, r5
 8006ff0:	f7ff fbf2 	bl	80067d8 <_free_r>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ff8:	e00d      	b.n	8007016 <__sflush_r+0xae>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	4628      	mov	r0, r5
 8006ffe:	47b0      	blx	r6
 8007000:	4602      	mov	r2, r0
 8007002:	1c50      	adds	r0, r2, #1
 8007004:	d1c9      	bne.n	8006f9a <__sflush_r+0x32>
 8007006:	682b      	ldr	r3, [r5, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d0c6      	beq.n	8006f9a <__sflush_r+0x32>
 800700c:	2b1d      	cmp	r3, #29
 800700e:	d001      	beq.n	8007014 <__sflush_r+0xac>
 8007010:	2b16      	cmp	r3, #22
 8007012:	d11e      	bne.n	8007052 <__sflush_r+0xea>
 8007014:	602f      	str	r7, [r5, #0]
 8007016:	2000      	movs	r0, #0
 8007018:	e022      	b.n	8007060 <__sflush_r+0xf8>
 800701a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800701e:	b21b      	sxth	r3, r3
 8007020:	e01b      	b.n	800705a <__sflush_r+0xf2>
 8007022:	690f      	ldr	r7, [r1, #16]
 8007024:	2f00      	cmp	r7, #0
 8007026:	d0f6      	beq.n	8007016 <__sflush_r+0xae>
 8007028:	0793      	lsls	r3, r2, #30
 800702a:	680e      	ldr	r6, [r1, #0]
 800702c:	bf08      	it	eq
 800702e:	694b      	ldreq	r3, [r1, #20]
 8007030:	600f      	str	r7, [r1, #0]
 8007032:	bf18      	it	ne
 8007034:	2300      	movne	r3, #0
 8007036:	eba6 0807 	sub.w	r8, r6, r7
 800703a:	608b      	str	r3, [r1, #8]
 800703c:	f1b8 0f00 	cmp.w	r8, #0
 8007040:	dde9      	ble.n	8007016 <__sflush_r+0xae>
 8007042:	6a21      	ldr	r1, [r4, #32]
 8007044:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007046:	4643      	mov	r3, r8
 8007048:	463a      	mov	r2, r7
 800704a:	4628      	mov	r0, r5
 800704c:	47b0      	blx	r6
 800704e:	2800      	cmp	r0, #0
 8007050:	dc08      	bgt.n	8007064 <__sflush_r+0xfc>
 8007052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007056:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800705a:	81a3      	strh	r3, [r4, #12]
 800705c:	f04f 30ff 	mov.w	r0, #4294967295
 8007060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007064:	4407      	add	r7, r0
 8007066:	eba8 0800 	sub.w	r8, r8, r0
 800706a:	e7e7      	b.n	800703c <__sflush_r+0xd4>
 800706c:	dfbffffe 	.word	0xdfbffffe

08007070 <_fflush_r>:
 8007070:	b538      	push	{r3, r4, r5, lr}
 8007072:	690b      	ldr	r3, [r1, #16]
 8007074:	4605      	mov	r5, r0
 8007076:	460c      	mov	r4, r1
 8007078:	b913      	cbnz	r3, 8007080 <_fflush_r+0x10>
 800707a:	2500      	movs	r5, #0
 800707c:	4628      	mov	r0, r5
 800707e:	bd38      	pop	{r3, r4, r5, pc}
 8007080:	b118      	cbz	r0, 800708a <_fflush_r+0x1a>
 8007082:	6a03      	ldr	r3, [r0, #32]
 8007084:	b90b      	cbnz	r3, 800708a <_fflush_r+0x1a>
 8007086:	f7ff fa9f 	bl	80065c8 <__sinit>
 800708a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d0f3      	beq.n	800707a <_fflush_r+0xa>
 8007092:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007094:	07d0      	lsls	r0, r2, #31
 8007096:	d404      	bmi.n	80070a2 <_fflush_r+0x32>
 8007098:	0599      	lsls	r1, r3, #22
 800709a:	d402      	bmi.n	80070a2 <_fflush_r+0x32>
 800709c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800709e:	f7ff fb98 	bl	80067d2 <__retarget_lock_acquire_recursive>
 80070a2:	4628      	mov	r0, r5
 80070a4:	4621      	mov	r1, r4
 80070a6:	f7ff ff5f 	bl	8006f68 <__sflush_r>
 80070aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80070ac:	07da      	lsls	r2, r3, #31
 80070ae:	4605      	mov	r5, r0
 80070b0:	d4e4      	bmi.n	800707c <_fflush_r+0xc>
 80070b2:	89a3      	ldrh	r3, [r4, #12]
 80070b4:	059b      	lsls	r3, r3, #22
 80070b6:	d4e1      	bmi.n	800707c <_fflush_r+0xc>
 80070b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070ba:	f7ff fb8b 	bl	80067d4 <__retarget_lock_release_recursive>
 80070be:	e7dd      	b.n	800707c <_fflush_r+0xc>

080070c0 <__swbuf_r>:
 80070c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c2:	460e      	mov	r6, r1
 80070c4:	4614      	mov	r4, r2
 80070c6:	4605      	mov	r5, r0
 80070c8:	b118      	cbz	r0, 80070d2 <__swbuf_r+0x12>
 80070ca:	6a03      	ldr	r3, [r0, #32]
 80070cc:	b90b      	cbnz	r3, 80070d2 <__swbuf_r+0x12>
 80070ce:	f7ff fa7b 	bl	80065c8 <__sinit>
 80070d2:	69a3      	ldr	r3, [r4, #24]
 80070d4:	60a3      	str	r3, [r4, #8]
 80070d6:	89a3      	ldrh	r3, [r4, #12]
 80070d8:	071a      	lsls	r2, r3, #28
 80070da:	d501      	bpl.n	80070e0 <__swbuf_r+0x20>
 80070dc:	6923      	ldr	r3, [r4, #16]
 80070de:	b943      	cbnz	r3, 80070f2 <__swbuf_r+0x32>
 80070e0:	4621      	mov	r1, r4
 80070e2:	4628      	mov	r0, r5
 80070e4:	f000 f82a 	bl	800713c <__swsetup_r>
 80070e8:	b118      	cbz	r0, 80070f2 <__swbuf_r+0x32>
 80070ea:	f04f 37ff 	mov.w	r7, #4294967295
 80070ee:	4638      	mov	r0, r7
 80070f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070f2:	6823      	ldr	r3, [r4, #0]
 80070f4:	6922      	ldr	r2, [r4, #16]
 80070f6:	1a98      	subs	r0, r3, r2
 80070f8:	6963      	ldr	r3, [r4, #20]
 80070fa:	b2f6      	uxtb	r6, r6
 80070fc:	4283      	cmp	r3, r0
 80070fe:	4637      	mov	r7, r6
 8007100:	dc05      	bgt.n	800710e <__swbuf_r+0x4e>
 8007102:	4621      	mov	r1, r4
 8007104:	4628      	mov	r0, r5
 8007106:	f7ff ffb3 	bl	8007070 <_fflush_r>
 800710a:	2800      	cmp	r0, #0
 800710c:	d1ed      	bne.n	80070ea <__swbuf_r+0x2a>
 800710e:	68a3      	ldr	r3, [r4, #8]
 8007110:	3b01      	subs	r3, #1
 8007112:	60a3      	str	r3, [r4, #8]
 8007114:	6823      	ldr	r3, [r4, #0]
 8007116:	1c5a      	adds	r2, r3, #1
 8007118:	6022      	str	r2, [r4, #0]
 800711a:	701e      	strb	r6, [r3, #0]
 800711c:	6962      	ldr	r2, [r4, #20]
 800711e:	1c43      	adds	r3, r0, #1
 8007120:	429a      	cmp	r2, r3
 8007122:	d004      	beq.n	800712e <__swbuf_r+0x6e>
 8007124:	89a3      	ldrh	r3, [r4, #12]
 8007126:	07db      	lsls	r3, r3, #31
 8007128:	d5e1      	bpl.n	80070ee <__swbuf_r+0x2e>
 800712a:	2e0a      	cmp	r6, #10
 800712c:	d1df      	bne.n	80070ee <__swbuf_r+0x2e>
 800712e:	4621      	mov	r1, r4
 8007130:	4628      	mov	r0, r5
 8007132:	f7ff ff9d 	bl	8007070 <_fflush_r>
 8007136:	2800      	cmp	r0, #0
 8007138:	d0d9      	beq.n	80070ee <__swbuf_r+0x2e>
 800713a:	e7d6      	b.n	80070ea <__swbuf_r+0x2a>

0800713c <__swsetup_r>:
 800713c:	b538      	push	{r3, r4, r5, lr}
 800713e:	4b29      	ldr	r3, [pc, #164]	@ (80071e4 <__swsetup_r+0xa8>)
 8007140:	4605      	mov	r5, r0
 8007142:	6818      	ldr	r0, [r3, #0]
 8007144:	460c      	mov	r4, r1
 8007146:	b118      	cbz	r0, 8007150 <__swsetup_r+0x14>
 8007148:	6a03      	ldr	r3, [r0, #32]
 800714a:	b90b      	cbnz	r3, 8007150 <__swsetup_r+0x14>
 800714c:	f7ff fa3c 	bl	80065c8 <__sinit>
 8007150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007154:	0719      	lsls	r1, r3, #28
 8007156:	d422      	bmi.n	800719e <__swsetup_r+0x62>
 8007158:	06da      	lsls	r2, r3, #27
 800715a:	d407      	bmi.n	800716c <__swsetup_r+0x30>
 800715c:	2209      	movs	r2, #9
 800715e:	602a      	str	r2, [r5, #0]
 8007160:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007164:	81a3      	strh	r3, [r4, #12]
 8007166:	f04f 30ff 	mov.w	r0, #4294967295
 800716a:	e033      	b.n	80071d4 <__swsetup_r+0x98>
 800716c:	0758      	lsls	r0, r3, #29
 800716e:	d512      	bpl.n	8007196 <__swsetup_r+0x5a>
 8007170:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007172:	b141      	cbz	r1, 8007186 <__swsetup_r+0x4a>
 8007174:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007178:	4299      	cmp	r1, r3
 800717a:	d002      	beq.n	8007182 <__swsetup_r+0x46>
 800717c:	4628      	mov	r0, r5
 800717e:	f7ff fb2b 	bl	80067d8 <_free_r>
 8007182:	2300      	movs	r3, #0
 8007184:	6363      	str	r3, [r4, #52]	@ 0x34
 8007186:	89a3      	ldrh	r3, [r4, #12]
 8007188:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800718c:	81a3      	strh	r3, [r4, #12]
 800718e:	2300      	movs	r3, #0
 8007190:	6063      	str	r3, [r4, #4]
 8007192:	6923      	ldr	r3, [r4, #16]
 8007194:	6023      	str	r3, [r4, #0]
 8007196:	89a3      	ldrh	r3, [r4, #12]
 8007198:	f043 0308 	orr.w	r3, r3, #8
 800719c:	81a3      	strh	r3, [r4, #12]
 800719e:	6923      	ldr	r3, [r4, #16]
 80071a0:	b94b      	cbnz	r3, 80071b6 <__swsetup_r+0x7a>
 80071a2:	89a3      	ldrh	r3, [r4, #12]
 80071a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80071a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071ac:	d003      	beq.n	80071b6 <__swsetup_r+0x7a>
 80071ae:	4621      	mov	r1, r4
 80071b0:	4628      	mov	r0, r5
 80071b2:	f000 f84f 	bl	8007254 <__smakebuf_r>
 80071b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071ba:	f013 0201 	ands.w	r2, r3, #1
 80071be:	d00a      	beq.n	80071d6 <__swsetup_r+0x9a>
 80071c0:	2200      	movs	r2, #0
 80071c2:	60a2      	str	r2, [r4, #8]
 80071c4:	6962      	ldr	r2, [r4, #20]
 80071c6:	4252      	negs	r2, r2
 80071c8:	61a2      	str	r2, [r4, #24]
 80071ca:	6922      	ldr	r2, [r4, #16]
 80071cc:	b942      	cbnz	r2, 80071e0 <__swsetup_r+0xa4>
 80071ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80071d2:	d1c5      	bne.n	8007160 <__swsetup_r+0x24>
 80071d4:	bd38      	pop	{r3, r4, r5, pc}
 80071d6:	0799      	lsls	r1, r3, #30
 80071d8:	bf58      	it	pl
 80071da:	6962      	ldrpl	r2, [r4, #20]
 80071dc:	60a2      	str	r2, [r4, #8]
 80071de:	e7f4      	b.n	80071ca <__swsetup_r+0x8e>
 80071e0:	2000      	movs	r0, #0
 80071e2:	e7f7      	b.n	80071d4 <__swsetup_r+0x98>
 80071e4:	200000b8 	.word	0x200000b8

080071e8 <_sbrk_r>:
 80071e8:	b538      	push	{r3, r4, r5, lr}
 80071ea:	4d06      	ldr	r5, [pc, #24]	@ (8007204 <_sbrk_r+0x1c>)
 80071ec:	2300      	movs	r3, #0
 80071ee:	4604      	mov	r4, r0
 80071f0:	4608      	mov	r0, r1
 80071f2:	602b      	str	r3, [r5, #0]
 80071f4:	f7f9 fe60 	bl	8000eb8 <_sbrk>
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	d102      	bne.n	8007202 <_sbrk_r+0x1a>
 80071fc:	682b      	ldr	r3, [r5, #0]
 80071fe:	b103      	cbz	r3, 8007202 <_sbrk_r+0x1a>
 8007200:	6023      	str	r3, [r4, #0]
 8007202:	bd38      	pop	{r3, r4, r5, pc}
 8007204:	20000588 	.word	0x20000588

08007208 <__swhatbuf_r>:
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	460c      	mov	r4, r1
 800720c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007210:	2900      	cmp	r1, #0
 8007212:	b096      	sub	sp, #88	@ 0x58
 8007214:	4615      	mov	r5, r2
 8007216:	461e      	mov	r6, r3
 8007218:	da0d      	bge.n	8007236 <__swhatbuf_r+0x2e>
 800721a:	89a3      	ldrh	r3, [r4, #12]
 800721c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007220:	f04f 0100 	mov.w	r1, #0
 8007224:	bf14      	ite	ne
 8007226:	2340      	movne	r3, #64	@ 0x40
 8007228:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800722c:	2000      	movs	r0, #0
 800722e:	6031      	str	r1, [r6, #0]
 8007230:	602b      	str	r3, [r5, #0]
 8007232:	b016      	add	sp, #88	@ 0x58
 8007234:	bd70      	pop	{r4, r5, r6, pc}
 8007236:	466a      	mov	r2, sp
 8007238:	f000 f848 	bl	80072cc <_fstat_r>
 800723c:	2800      	cmp	r0, #0
 800723e:	dbec      	blt.n	800721a <__swhatbuf_r+0x12>
 8007240:	9901      	ldr	r1, [sp, #4]
 8007242:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007246:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800724a:	4259      	negs	r1, r3
 800724c:	4159      	adcs	r1, r3
 800724e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007252:	e7eb      	b.n	800722c <__swhatbuf_r+0x24>

08007254 <__smakebuf_r>:
 8007254:	898b      	ldrh	r3, [r1, #12]
 8007256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007258:	079d      	lsls	r5, r3, #30
 800725a:	4606      	mov	r6, r0
 800725c:	460c      	mov	r4, r1
 800725e:	d507      	bpl.n	8007270 <__smakebuf_r+0x1c>
 8007260:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007264:	6023      	str	r3, [r4, #0]
 8007266:	6123      	str	r3, [r4, #16]
 8007268:	2301      	movs	r3, #1
 800726a:	6163      	str	r3, [r4, #20]
 800726c:	b003      	add	sp, #12
 800726e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007270:	ab01      	add	r3, sp, #4
 8007272:	466a      	mov	r2, sp
 8007274:	f7ff ffc8 	bl	8007208 <__swhatbuf_r>
 8007278:	9f00      	ldr	r7, [sp, #0]
 800727a:	4605      	mov	r5, r0
 800727c:	4639      	mov	r1, r7
 800727e:	4630      	mov	r0, r6
 8007280:	f7ff fb16 	bl	80068b0 <_malloc_r>
 8007284:	b948      	cbnz	r0, 800729a <__smakebuf_r+0x46>
 8007286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800728a:	059a      	lsls	r2, r3, #22
 800728c:	d4ee      	bmi.n	800726c <__smakebuf_r+0x18>
 800728e:	f023 0303 	bic.w	r3, r3, #3
 8007292:	f043 0302 	orr.w	r3, r3, #2
 8007296:	81a3      	strh	r3, [r4, #12]
 8007298:	e7e2      	b.n	8007260 <__smakebuf_r+0xc>
 800729a:	89a3      	ldrh	r3, [r4, #12]
 800729c:	6020      	str	r0, [r4, #0]
 800729e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072a2:	81a3      	strh	r3, [r4, #12]
 80072a4:	9b01      	ldr	r3, [sp, #4]
 80072a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80072aa:	b15b      	cbz	r3, 80072c4 <__smakebuf_r+0x70>
 80072ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072b0:	4630      	mov	r0, r6
 80072b2:	f000 f81d 	bl	80072f0 <_isatty_r>
 80072b6:	b128      	cbz	r0, 80072c4 <__smakebuf_r+0x70>
 80072b8:	89a3      	ldrh	r3, [r4, #12]
 80072ba:	f023 0303 	bic.w	r3, r3, #3
 80072be:	f043 0301 	orr.w	r3, r3, #1
 80072c2:	81a3      	strh	r3, [r4, #12]
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	431d      	orrs	r5, r3
 80072c8:	81a5      	strh	r5, [r4, #12]
 80072ca:	e7cf      	b.n	800726c <__smakebuf_r+0x18>

080072cc <_fstat_r>:
 80072cc:	b538      	push	{r3, r4, r5, lr}
 80072ce:	4d07      	ldr	r5, [pc, #28]	@ (80072ec <_fstat_r+0x20>)
 80072d0:	2300      	movs	r3, #0
 80072d2:	4604      	mov	r4, r0
 80072d4:	4608      	mov	r0, r1
 80072d6:	4611      	mov	r1, r2
 80072d8:	602b      	str	r3, [r5, #0]
 80072da:	f7f9 fdc4 	bl	8000e66 <_fstat>
 80072de:	1c43      	adds	r3, r0, #1
 80072e0:	d102      	bne.n	80072e8 <_fstat_r+0x1c>
 80072e2:	682b      	ldr	r3, [r5, #0]
 80072e4:	b103      	cbz	r3, 80072e8 <_fstat_r+0x1c>
 80072e6:	6023      	str	r3, [r4, #0]
 80072e8:	bd38      	pop	{r3, r4, r5, pc}
 80072ea:	bf00      	nop
 80072ec:	20000588 	.word	0x20000588

080072f0 <_isatty_r>:
 80072f0:	b538      	push	{r3, r4, r5, lr}
 80072f2:	4d06      	ldr	r5, [pc, #24]	@ (800730c <_isatty_r+0x1c>)
 80072f4:	2300      	movs	r3, #0
 80072f6:	4604      	mov	r4, r0
 80072f8:	4608      	mov	r0, r1
 80072fa:	602b      	str	r3, [r5, #0]
 80072fc:	f7f9 fdc3 	bl	8000e86 <_isatty>
 8007300:	1c43      	adds	r3, r0, #1
 8007302:	d102      	bne.n	800730a <_isatty_r+0x1a>
 8007304:	682b      	ldr	r3, [r5, #0]
 8007306:	b103      	cbz	r3, 800730a <_isatty_r+0x1a>
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	bd38      	pop	{r3, r4, r5, pc}
 800730c:	20000588 	.word	0x20000588

08007310 <_init>:
 8007310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007312:	bf00      	nop
 8007314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007316:	bc08      	pop	{r3}
 8007318:	469e      	mov	lr, r3
 800731a:	4770      	bx	lr

0800731c <_fini>:
 800731c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731e:	bf00      	nop
 8007320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007322:	bc08      	pop	{r3}
 8007324:	469e      	mov	lr, r3
 8007326:	4770      	bx	lr
