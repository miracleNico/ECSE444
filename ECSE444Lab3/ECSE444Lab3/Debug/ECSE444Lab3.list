
ECSE444Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005058  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08005218  08005218  00015218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005430  08005430  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005430  08005430  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005430  08005430  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005430  08005430  00015430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005434  08005434  00015434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08005444  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08005444  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d3a0  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ffb  00000000  00000000  0002d41f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  0002f420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a61  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029b47  00000000  00000000  00030c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb10  00000000  00000000  0005a750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001052a8  00000000  00000000  00069260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003bd8  00000000  00000000  0016e508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  001720e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005200 	.word	0x08005200

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	08005200 	.word	0x08005200

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2iz>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d215      	bcs.n	8000ae2 <__aeabi_d2iz+0x36>
 8000ab6:	d511      	bpl.n	8000adc <__aeabi_d2iz+0x30>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d912      	bls.n	8000ae8 <__aeabi_d2iz+0x3c>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d105      	bne.n	8000af4 <__aeabi_d2iz+0x48>
 8000ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	bf08      	it	eq
 8000aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_d2uiz>:
 8000afc:	004a      	lsls	r2, r1, #1
 8000afe:	d211      	bcs.n	8000b24 <__aeabi_d2uiz+0x28>
 8000b00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b04:	d211      	bcs.n	8000b2a <__aeabi_d2uiz+0x2e>
 8000b06:	d50d      	bpl.n	8000b24 <__aeabi_d2uiz+0x28>
 8000b08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b10:	d40e      	bmi.n	8000b30 <__aeabi_d2uiz+0x34>
 8000b12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	4770      	bx	lr
 8000b24:	f04f 0000 	mov.w	r0, #0
 8000b28:	4770      	bx	lr
 8000b2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2e:	d102      	bne.n	8000b36 <__aeabi_d2uiz+0x3a>
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	4770      	bx	lr
 8000b36:	f04f 0000 	mov.w	r0, #0
 8000b3a:	4770      	bx	lr

08000b3c <wave_initializer>:
uint32_t* sinewave_C4;
uint32_t* sinewave_E4;
uint32_t* sinewave_G4;
uint32_t* sinewave_1k;

void wave_initializer(){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
	uint32_t* sinewave_C4 = getSineWave(262);
 8000b42:	f44f 7083 	mov.w	r0, #262	; 0x106
 8000b46:	f000 fb5f 	bl	8001208 <getSineWave>
 8000b4a:	60f8      	str	r0, [r7, #12]
	uint32_t* sinewave_E4 = getSineWave(330);
 8000b4c:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8000b50:	f000 fb5a 	bl	8001208 <getSineWave>
 8000b54:	60b8      	str	r0, [r7, #8]
	uint32_t* sinewave_G4 = getSineWave(392);
 8000b56:	f44f 70c4 	mov.w	r0, #392	; 0x188
 8000b5a:	f000 fb55 	bl	8001208 <getSineWave>
 8000b5e:	6078      	str	r0, [r7, #4]
	uint32_t* sinewave_1k = getSineWave(1000);
 8000b60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b64:	f000 fb50 	bl	8001208 <getSineWave>
 8000b68:	6038      	str	r0, [r7, #0]
}
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	wave_initializer();
 8000b78:	f7ff ffe0 	bl	8000b3c <wave_initializer>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b7c:	f000 fc03 	bl	8001386 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b80:	f000 f814 	bl	8000bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b84:	f000 f910 	bl	8000da8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b88:	f000 f8e4 	bl	8000d54 <MX_DMA_Init>
  MX_DAC1_Init();
 8000b8c:	f000 f860 	bl	8000c50 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000b90:	f000 f892 	bl	8000cb8 <MX_TIM2_Init>


  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <main+0x30>)
 8000b96:	f002 fe89 	bl	80038ac <HAL_TIM_Base_Start_IT>
  //HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
  //HAL_Delay(100);
  //DMA single tone part end

  //HAL_Delay tone part start
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <main+0x34>)
 8000b9e:	f000 fdbe 	bl	800171e <HAL_DAC_Start>
  //HAL_Delay tone part end
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <main+0x2e>
 8000ba4:	200000b4 	.word	0x200000b4
 8000ba8:	20000040 	.word	0x20000040

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b096      	sub	sp, #88	; 0x58
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	2244      	movs	r2, #68	; 0x44
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f003 fab4 	bl	8004128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f001 fe5c 	bl	800288c <HAL_PWREx_ControlVoltageScaling>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000bda:	f000 f9ef 	bl	8000fbc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000bde:	2310      	movs	r3, #16
 8000be0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000be2:	2301      	movs	r3, #1
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bea:	2360      	movs	r3, #96	; 0x60
 8000bec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000bfa:	233c      	movs	r3, #60	; 0x3c
 8000bfc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c02:	2302      	movs	r3, #2
 8000c04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c06:	2302      	movs	r3, #2
 8000c08:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f001 fee0 	bl	80029d4 <HAL_RCC_OscConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c1a:	f000 f9cf 	bl	8000fbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1e:	230f      	movs	r3, #15
 8000c20:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c22:	2303      	movs	r3, #3
 8000c24:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c32:	463b      	mov	r3, r7
 8000c34:	2105      	movs	r1, #5
 8000c36:	4618      	mov	r0, r3
 8000c38:	f002 fae6 	bl	8003208 <HAL_RCC_ClockConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c42:	f000 f9bb 	bl	8000fbc <Error_Handler>
  }
}
 8000c46:	bf00      	nop
 8000c48:	3758      	adds	r7, #88	; 0x58
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c56:	463b      	mov	r3, r7
 8000c58:	2228      	movs	r2, #40	; 0x28
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f003 fa63 	bl	8004128 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <MX_DAC1_Init+0x60>)
 8000c64:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <MX_DAC1_Init+0x64>)
 8000c66:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c68:	4811      	ldr	r0, [pc, #68]	; (8000cb0 <MX_DAC1_Init+0x60>)
 8000c6a:	f000 fd36 	bl	80016da <HAL_DAC_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000c74:	f000 f9a2 	bl	8000fbc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000c7c:	230a      	movs	r3, #10
 8000c7e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000c80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c84:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c92:	463b      	mov	r3, r7
 8000c94:	2200      	movs	r2, #0
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_DAC1_Init+0x60>)
 8000c9a:	f000 ff67 	bl	8001b6c <HAL_DAC_ConfigChannel>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000ca4:	f000 f98a 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	; 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000040 	.word	0x20000040
 8000cb4:	40007400 	.word	0x40007400

08000cb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b088      	sub	sp, #32
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cbe:	f107 0310 	add.w	r3, r7, #16
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <MX_TIM2_Init+0x98>)
 8000cd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cdc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cde:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <MX_TIM2_Init+0x98>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_TIM2_Init+0x98>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 8000cea:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <MX_TIM2_Init+0x98>)
 8000cec:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000cf0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_TIM2_Init+0x98>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <MX_TIM2_Init+0x98>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cfe:	4814      	ldr	r0, [pc, #80]	; (8000d50 <MX_TIM2_Init+0x98>)
 8000d00:	f002 fd14 	bl	800372c <HAL_TIM_Base_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d0a:	f000 f957 	bl	8000fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480d      	ldr	r0, [pc, #52]	; (8000d50 <MX_TIM2_Init+0x98>)
 8000d1c:	f002 ff38 	bl	8003b90 <HAL_TIM_ConfigClockSource>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d26:	f000 f949 	bl	8000fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d2a:	2320      	movs	r3, #32
 8000d2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	4619      	mov	r1, r3
 8000d36:	4806      	ldr	r0, [pc, #24]	; (8000d50 <MX_TIM2_Init+0x98>)
 8000d38:	f003 f950 	bl	8003fdc <HAL_TIMEx_MasterConfigSynchronization>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d42:	f000 f93b 	bl	8000fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	3720      	adds	r7, #32
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200000b4 	.word	0x200000b4

08000d54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <MX_DMA_Init+0x50>)
 8000d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d5e:	4a11      	ldr	r2, [pc, #68]	; (8000da4 <MX_DMA_Init+0x50>)
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	6493      	str	r3, [r2, #72]	; 0x48
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_DMA_Init+0x50>)
 8000d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_DMA_Init+0x50>)
 8000d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <MX_DMA_Init+0x50>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6493      	str	r3, [r2, #72]	; 0x48
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_DMA_Init+0x50>)
 8000d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	200d      	movs	r0, #13
 8000d90:	f000 fc6d 	bl	800166e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d94:	200d      	movs	r0, #13
 8000d96:	f000 fc86 	bl	80016a6 <HAL_NVIC_EnableIRQ>

}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000

08000da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbe:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <MX_GPIO_Init+0xa8>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a23      	ldr	r2, [pc, #140]	; (8000e50 <MX_GPIO_Init+0xa8>)
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <MX_GPIO_Init+0xa8>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0304 	and.w	r3, r3, #4
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <MX_GPIO_Init+0xa8>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a1d      	ldr	r2, [pc, #116]	; (8000e50 <MX_GPIO_Init+0xa8>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <MX_GPIO_Init+0xa8>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df8:	f001 fcf8 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	4619      	mov	r1, r3
 8000e12:	4810      	ldr	r0, [pc, #64]	; (8000e54 <MX_GPIO_Init+0xac>)
 8000e14:	f001 fb58 	bl	80024c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 8000e18:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000e1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e34:	f001 fb48 	bl	80024c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2028      	movs	r0, #40	; 0x28
 8000e3e:	f000 fc16 	bl	800166e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e42:	2028      	movs	r0, #40	; 0x28
 8000e44:	f000 fc2f 	bl	80016a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e48:	bf00      	nop
 8000e4a:	3720      	adds	r7, #32
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40021000 	.word	0x40021000
 8000e54:	48000800 	.word	0x48000800

08000e58 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d120      	bne.n	8000eaa <HAL_TIM_PeriodElapsedCallback+0x52>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_8B_R, sinewave_1k[counter++%40]);
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e6a:	6818      	ldr	r0, [r3, #0]
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	1c53      	adds	r3, r2, #1
 8000e72:	4912      	ldr	r1, [pc, #72]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000e74:	600b      	str	r3, [r1, #0]
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000e78:	fb83 1302 	smull	r1, r3, r3, r2
 8000e7c:	1119      	asrs	r1, r3, #4
 8000e7e:	17d3      	asrs	r3, r2, #31
 8000e80:	1ac9      	subs	r1, r1, r3
 8000e82:	460b      	mov	r3, r1
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	440b      	add	r3, r1
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	1ad1      	subs	r1, r2, r3
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4403      	add	r3, r0
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2208      	movs	r2, #8
 8000e96:	2100      	movs	r1, #0
 8000e98:	480a      	ldr	r0, [pc, #40]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000e9a:	f000 fe1a 	bl	8001ad2 <HAL_DAC_SetValue>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2120      	movs	r1, #32
 8000ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea6:	f001 fca1 	bl	80027ec <HAL_GPIO_WritePin>
	}
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200000b4 	.word	0x200000b4
 8000eb8:	2000003c 	.word	0x2000003c
 8000ebc:	20000028 	.word	0x20000028
 8000ec0:	66666667 	.word	0x66666667
 8000ec4:	20000040 	.word	0x20000040

08000ec8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af02      	add	r7, sp, #8
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ed8:	d160      	bne.n	8000f9c <HAL_GPIO_EXTI_Callback+0xd4>
		//stop all before restarts
		HAL_DAC_Stop_DMA(&hdac1,DAC_CHANNEL_1);
 8000eda:	2100      	movs	r1, #0
 8000edc:	4831      	ldr	r0, [pc, #196]	; (8000fa4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000ede:	f000 fd59 	bl	8001994 <HAL_DAC_Stop_DMA>
		HAL_DAC_Stop(&hdac1,DAC_CHANNEL_1);
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	482f      	ldr	r0, [pc, #188]	; (8000fa4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000ee6:	f000 fc6c 	bl	80017c2 <HAL_DAC_Stop>
		HAL_TIM_Base_Start(&htim2);
 8000eea:	482f      	ldr	r0, [pc, #188]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000eec:	f002 fc76 	bl	80037dc <HAL_TIM_Base_Start>
    	if(DAC_operation_flag == 0){
 8000ef0:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <HAL_GPIO_EXTI_Callback+0xe4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d112      	bne.n	8000f1e <HAL_GPIO_EXTI_Callback+0x56>
        	//HAL_TIM_Base_Start(&htim2);
        	//HAL_DAC_Stop_DMA(&hdac1,DAC_CHANNEL_1);
        	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sinewave_C4, 80, DAC_ALIGN_8B_R);
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0xe8>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	2308      	movs	r3, #8
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2350      	movs	r3, #80	; 0x50
 8000f02:	2100      	movs	r1, #0
 8000f04:	4827      	ldr	r0, [pc, #156]	; (8000fa4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000f06:	f000 fc79 	bl	80017fc <HAL_DAC_Start_DMA>
        	DAC_operation_flag = 1;
 8000f0a:	4b28      	ldr	r3, [pc, #160]	; (8000fac <HAL_GPIO_EXTI_Callback+0xe4>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
        	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	2120      	movs	r1, #32
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f18:	f001 fc68 	bl	80027ec <HAL_GPIO_WritePin>
    		HAL_DAC_Stop_DMA(&hdac1,DAC_CHANNEL_1);
    		DAC_operation_flag = 0;
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
    		}
	}
}
 8000f1c:	e03e      	b.n	8000f9c <HAL_GPIO_EXTI_Callback+0xd4>
    	}else if(DAC_operation_flag == 1){
 8000f1e:	4b23      	ldr	r3, [pc, #140]	; (8000fac <HAL_GPIO_EXTI_Callback+0xe4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d112      	bne.n	8000f4c <HAL_GPIO_EXTI_Callback+0x84>
    		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sinewave_E4, 40, DAC_ALIGN_8B_R);
 8000f26:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0xec>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	2308      	movs	r3, #8
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2328      	movs	r3, #40	; 0x28
 8000f30:	2100      	movs	r1, #0
 8000f32:	481c      	ldr	r0, [pc, #112]	; (8000fa4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000f34:	f000 fc62 	bl	80017fc <HAL_DAC_Start_DMA>
    		DAC_operation_flag = 2;
 8000f38:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <HAL_GPIO_EXTI_Callback+0xe4>)
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	601a      	str	r2, [r3, #0]
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2120      	movs	r1, #32
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f46:	f001 fc51 	bl	80027ec <HAL_GPIO_WritePin>
}
 8000f4a:	e027      	b.n	8000f9c <HAL_GPIO_EXTI_Callback+0xd4>
    	}else if(DAC_operation_flag == 2){
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <HAL_GPIO_EXTI_Callback+0xe4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d112      	bne.n	8000f7a <HAL_GPIO_EXTI_Callback+0xb2>
    		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sinewave_G4, 20, DAC_ALIGN_8B_R);
 8000f54:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	2308      	movs	r3, #8
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2314      	movs	r3, #20
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4810      	ldr	r0, [pc, #64]	; (8000fa4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000f62:	f000 fc4b 	bl	80017fc <HAL_DAC_Start_DMA>
    		DAC_operation_flag = 3;
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <HAL_GPIO_EXTI_Callback+0xe4>)
 8000f68:	2203      	movs	r2, #3
 8000f6a:	601a      	str	r2, [r3, #0]
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2120      	movs	r1, #32
 8000f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f74:	f001 fc3a 	bl	80027ec <HAL_GPIO_WritePin>
}
 8000f78:	e010      	b.n	8000f9c <HAL_GPIO_EXTI_Callback+0xd4>
    	}else if(DAC_operation_flag == 3){
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <HAL_GPIO_EXTI_Callback+0xe4>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d10c      	bne.n	8000f9c <HAL_GPIO_EXTI_Callback+0xd4>
    		HAL_DAC_Stop_DMA(&hdac1,DAC_CHANNEL_1);
 8000f82:	2100      	movs	r1, #0
 8000f84:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000f86:	f000 fd05 	bl	8001994 <HAL_DAC_Stop_DMA>
    		DAC_operation_flag = 0;
 8000f8a:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_GPIO_EXTI_Callback+0xe4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2120      	movs	r1, #32
 8000f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f98:	f001 fc28 	bl	80027ec <HAL_GPIO_WritePin>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000040 	.word	0x20000040
 8000fa8:	200000b4 	.word	0x200000b4
 8000fac:	2000002c 	.word	0x2000002c
 8000fb0:	20000030 	.word	0x20000030
 8000fb4:	20000034 	.word	0x20000034
 8000fb8:	20000038 	.word	0x20000038

08000fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc0:	b672      	cpsid	i
}
 8000fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <Error_Handler+0x8>
	...

08000fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <HAL_MspInit+0x44>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	; (800100c <HAL_MspInit+0x44>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <HAL_MspInit+0x44>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_MspInit+0x44>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fea:	4a08      	ldr	r2, [pc, #32]	; (800100c <HAL_MspInit+0x44>)
 8000fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_MspInit+0x44>)
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40021000 	.word	0x40021000

08001010 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a2f      	ldr	r2, [pc, #188]	; (80010ec <HAL_DAC_MspInit+0xdc>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d158      	bne.n	80010e4 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001032:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <HAL_DAC_MspInit+0xe0>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	4a2e      	ldr	r2, [pc, #184]	; (80010f0 <HAL_DAC_MspInit+0xe0>)
 8001038:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800103c:	6593      	str	r3, [r2, #88]	; 0x58
 800103e:	4b2c      	ldr	r3, [pc, #176]	; (80010f0 <HAL_DAC_MspInit+0xe0>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	4b29      	ldr	r3, [pc, #164]	; (80010f0 <HAL_DAC_MspInit+0xe0>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	4a28      	ldr	r2, [pc, #160]	; (80010f0 <HAL_DAC_MspInit+0xe0>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001056:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <HAL_DAC_MspInit+0xe0>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001062:	2310      	movs	r3, #16
 8001064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001066:	2303      	movs	r3, #3
 8001068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001078:	f001 fa26 	bl	80024c8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <HAL_DAC_MspInit+0xe4>)
 800107e:	4a1e      	ldr	r2, [pc, #120]	; (80010f8 <HAL_DAC_MspInit+0xe8>)
 8001080:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8001082:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <HAL_DAC_MspInit+0xe4>)
 8001084:	2206      	movs	r2, #6
 8001086:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001088:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <HAL_DAC_MspInit+0xe4>)
 800108a:	2210      	movs	r2, #16
 800108c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800108e:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <HAL_DAC_MspInit+0xe4>)
 8001090:	2200      	movs	r2, #0
 8001092:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <HAL_DAC_MspInit+0xe4>)
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800109a:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <HAL_DAC_MspInit+0xe4>)
 800109c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <HAL_DAC_MspInit+0xe4>)
 80010a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010a8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_DAC_MspInit+0xe4>)
 80010ac:	2220      	movs	r2, #32
 80010ae:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_DAC_MspInit+0xe4>)
 80010b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80010b8:	480e      	ldr	r0, [pc, #56]	; (80010f4 <HAL_DAC_MspInit+0xe4>)
 80010ba:	f000 ff37 	bl	8001f2c <HAL_DMA_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 80010c4:	f7ff ff7a 	bl	8000fbc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <HAL_DAC_MspInit+0xe4>)
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	4a09      	ldr	r2, [pc, #36]	; (80010f4 <HAL_DAC_MspInit+0xe4>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	2036      	movs	r0, #54	; 0x36
 80010da:	f000 fac8 	bl	800166e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010de:	2036      	movs	r0, #54	; 0x36
 80010e0:	f000 fae1 	bl	80016a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40007400 	.word	0x40007400
 80010f0:	40021000 	.word	0x40021000
 80010f4:	20000054 	.word	0x20000054
 80010f8:	40020030 	.word	0x40020030

080010fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800110c:	d113      	bne.n	8001136 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_TIM_Base_MspInit+0x44>)
 8001110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001112:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <HAL_TIM_Base_MspInit+0x44>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6593      	str	r3, [r2, #88]	; 0x58
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <HAL_TIM_Base_MspInit+0x44>)
 800111c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	201c      	movs	r0, #28
 800112c:	f000 fa9f 	bl	800166e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001130:	201c      	movs	r0, #28
 8001132:	f000 fab8 	bl	80016a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40021000 	.word	0x40021000

08001144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001148:	e7fe      	b.n	8001148 <NMI_Handler+0x4>

0800114a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <HardFault_Handler+0x4>

08001150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <MemManage_Handler+0x4>

08001156 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <BusFault_Handler+0x4>

0800115c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <UsageFault_Handler+0x4>

08001162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001190:	f000 f94e 	bl	8001430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <DMA1_Channel3_IRQHandler+0x10>)
 800119e:	f001 f844 	bl	800222a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000054 	.word	0x20000054

080011ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <TIM2_IRQHandler+0x10>)
 80011b2:	f002 fbeb 	bl	800398c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200000b4 	.word	0x200000b4

080011c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80011c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011c8:	f001 fb28 	bl	800281c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80011d4:	4802      	ldr	r0, [pc, #8]	; (80011e0 <TIM6_DAC_IRQHandler+0x10>)
 80011d6:	f000 fc22 	bl	8001a1e <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000040 	.word	0x20000040

080011e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <SystemInit+0x20>)
 80011ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <SystemInit+0x20>)
 80011f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <getSineWave>:
		case 8: return 64;
		case 9: return 96;
	}
}

uint32_t* getSineWave(int freq) {
 8001208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800120c:	b089      	sub	sp, #36	; 0x24
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	466b      	mov	r3, sp
 8001214:	461e      	mov	r6, r3
    int size = 40000/freq;
 8001216:	f649 4240 	movw	r2, #40000	; 0x9c40
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001220:	61bb      	str	r3, [r7, #24]
    uint8_t sineWave[size];
 8001222:	69b9      	ldr	r1, [r7, #24]
 8001224:	1e4b      	subs	r3, r1, #1
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	460a      	mov	r2, r1
 800122a:	2300      	movs	r3, #0
 800122c:	4690      	mov	r8, r2
 800122e:	4699      	mov	r9, r3
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800123c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001240:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001244:	460a      	mov	r2, r1
 8001246:	2300      	movs	r3, #0
 8001248:	4614      	mov	r4, r2
 800124a:	461d      	mov	r5, r3
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	00eb      	lsls	r3, r5, #3
 8001256:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800125a:	00e2      	lsls	r2, r4, #3
 800125c:	460b      	mov	r3, r1
 800125e:	3307      	adds	r3, #7
 8001260:	08db      	lsrs	r3, r3, #3
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	ebad 0d03 	sub.w	sp, sp, r3
 8001268:	466b      	mov	r3, sp
 800126a:	3300      	adds	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
    double step = (2.0 * M_PI) / size;
 800126e:	69b8      	ldr	r0, [r7, #24]
 8001270:	f7ff f918 	bl	80004a4 <__aeabi_i2d>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	a12c      	add	r1, pc, #176	; (adr r1, 800132c <getSineWave+0x124>)
 800127a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800127e:	f7ff faa5 	bl	80007cc <__aeabi_ddiv>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	e9c7 2302 	strd	r2, r3, [r7, #8]

    for (int i = 0; i < size; i++) {
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
 800128e:	e03a      	b.n	8001306 <getSineWave+0xfe>
        sineWave[i] = (uint8_t)(((sin(i * step) + 1.0) / 2.0) * 255); // Scale sine values to range 0-255
 8001290:	69f8      	ldr	r0, [r7, #28]
 8001292:	f7ff f907 	bl	80004a4 <__aeabi_i2d>
 8001296:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800129a:	f7ff f96d 	bl	8000578 <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	ec43 2b17 	vmov	d7, r2, r3
 80012a6:	eeb0 0a47 	vmov.f32	s0, s14
 80012aa:	eef0 0a67 	vmov.f32	s1, s15
 80012ae:	f002 ff67 	bl	8004180 <sin>
 80012b2:	ec51 0b10 	vmov	r0, r1, d0
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <getSineWave+0x120>)
 80012bc:	f7fe ffa6 	bl	800020c <__adddf3>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012d0:	f7ff fa7c 	bl	80007cc <__aeabi_ddiv>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	a310      	add	r3, pc, #64	; (adr r3, 8001320 <getSineWave+0x118>)
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	f7ff f949 	bl	8000578 <__aeabi_dmul>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff fc05 	bl	8000afc <__aeabi_d2uiz>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b2d9      	uxtb	r1, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	4413      	add	r3, r2
 80012fc:	460a      	mov	r2, r1
 80012fe:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	3301      	adds	r3, #1
 8001304:	61fb      	str	r3, [r7, #28]
 8001306:	69fa      	ldr	r2, [r7, #28]
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	429a      	cmp	r2, r3
 800130c:	dbc0      	blt.n	8001290 <getSineWave+0x88>
    }

    return sineWave;
 800130e:	2300      	movs	r3, #0
 8001310:	46b5      	mov	sp, r6
}
 8001312:	4618      	mov	r0, r3
 8001314:	3724      	adds	r7, #36	; 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800131c:	f3af 8000 	nop.w
 8001320:	00000000 	.word	0x00000000
 8001324:	406fe000 	.word	0x406fe000
 8001328:	3ff00000 	.word	0x3ff00000
 800132c:	54442d18 	.word	0x54442d18
 8001330:	401921fb 	.word	0x401921fb

08001334 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001334:	f8df d034 	ldr.w	sp, [pc, #52]	; 800136c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001338:	f7ff ff54 	bl	80011e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800133c:	480c      	ldr	r0, [pc, #48]	; (8001370 <LoopForever+0x6>)
  ldr r1, =_edata
 800133e:	490d      	ldr	r1, [pc, #52]	; (8001374 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001340:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <LoopForever+0xe>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001344:	e002      	b.n	800134c <LoopCopyDataInit>

08001346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800134a:	3304      	adds	r3, #4

0800134c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800134c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001350:	d3f9      	bcc.n	8001346 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001354:	4c0a      	ldr	r4, [pc, #40]	; (8001380 <LoopForever+0x16>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001358:	e001      	b.n	800135e <LoopFillZerobss>

0800135a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800135a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800135c:	3204      	adds	r2, #4

0800135e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001360:	d3fb      	bcc.n	800135a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001362:	f002 fee9 	bl	8004138 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001366:	f7ff fc05 	bl	8000b74 <main>

0800136a <LoopForever>:

LoopForever:
    b LoopForever
 800136a:	e7fe      	b.n	800136a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800136c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001374:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001378:	08005438 	.word	0x08005438
  ldr r2, =_sbss
 800137c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001380:	20000104 	.word	0x20000104

08001384 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001384:	e7fe      	b.n	8001384 <ADC1_IRQHandler>

08001386 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001390:	2003      	movs	r0, #3
 8001392:	f000 f961 	bl	8001658 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001396:	2000      	movs	r0, #0
 8001398:	f000 f80e 	bl	80013b8 <HAL_InitTick>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d002      	beq.n	80013a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	71fb      	strb	r3, [r7, #7]
 80013a6:	e001      	b.n	80013ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013a8:	f7ff fe0e 	bl	8000fc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013ac:	79fb      	ldrb	r3, [r7, #7]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013c4:	4b17      	ldr	r3, [pc, #92]	; (8001424 <HAL_InitTick+0x6c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d023      	beq.n	8001414 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <HAL_InitTick+0x70>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <HAL_InitTick+0x6c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013da:	fbb3 f3f1 	udiv	r3, r3, r1
 80013de:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f96d 	bl	80016c2 <HAL_SYSTICK_Config>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10f      	bne.n	800140e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d809      	bhi.n	8001408 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f000 f937 	bl	800166e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001400:	4a0a      	ldr	r2, [pc, #40]	; (800142c <HAL_InitTick+0x74>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e007      	b.n	8001418 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
 800140c:	e004      	b.n	8001418 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	73fb      	strb	r3, [r7, #15]
 8001412:	e001      	b.n	8001418 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000008 	.word	0x20000008
 8001428:	20000000 	.word	0x20000000
 800142c:	20000004 	.word	0x20000004

08001430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_IncTick+0x20>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_IncTick+0x24>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4413      	add	r3, r2
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <HAL_IncTick+0x24>)
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000008 	.word	0x20000008
 8001454:	20000100 	.word	0x20000100

08001458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return uwTick;
 800145c:	4b03      	ldr	r3, [pc, #12]	; (800146c <HAL_GetTick+0x14>)
 800145e:	681b      	ldr	r3, [r3, #0]
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000100 	.word	0x20000100

08001470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001478:	f7ff ffee 	bl	8001458 <HAL_GetTick>
 800147c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001488:	d005      	beq.n	8001496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_Delay+0x44>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4413      	add	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001496:	bf00      	nop
 8001498:	f7ff ffde 	bl	8001458 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d8f7      	bhi.n	8001498 <HAL_Delay+0x28>
  {
  }
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000008 	.word	0x20000008

080014b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d4:	4013      	ands	r3, r2
 80014d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ea:	4a04      	ldr	r2, [pc, #16]	; (80014fc <__NVIC_SetPriorityGrouping+0x44>)
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	60d3      	str	r3, [r2, #12]
}
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <__NVIC_GetPriorityGrouping+0x18>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	f003 0307 	and.w	r3, r3, #7
}
 800150e:	4618      	mov	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152a:	2b00      	cmp	r3, #0
 800152c:	db0b      	blt.n	8001546 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	f003 021f 	and.w	r2, r3, #31
 8001534:	4907      	ldr	r1, [pc, #28]	; (8001554 <__NVIC_EnableIRQ+0x38>)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	095b      	lsrs	r3, r3, #5
 800153c:	2001      	movs	r0, #1
 800153e:	fa00 f202 	lsl.w	r2, r0, r2
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000e100 	.word	0xe000e100

08001558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	6039      	str	r1, [r7, #0]
 8001562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	2b00      	cmp	r3, #0
 800156a:	db0a      	blt.n	8001582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	490c      	ldr	r1, [pc, #48]	; (80015a4 <__NVIC_SetPriority+0x4c>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	0112      	lsls	r2, r2, #4
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	440b      	add	r3, r1
 800157c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001580:	e00a      	b.n	8001598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4908      	ldr	r1, [pc, #32]	; (80015a8 <__NVIC_SetPriority+0x50>)
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	3b04      	subs	r3, #4
 8001590:	0112      	lsls	r2, r2, #4
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	440b      	add	r3, r1
 8001596:	761a      	strb	r2, [r3, #24]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000e100 	.word	0xe000e100
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b089      	sub	sp, #36	; 0x24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f1c3 0307 	rsb	r3, r3, #7
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	bf28      	it	cs
 80015ca:	2304      	movcs	r3, #4
 80015cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3304      	adds	r3, #4
 80015d2:	2b06      	cmp	r3, #6
 80015d4:	d902      	bls.n	80015dc <NVIC_EncodePriority+0x30>
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3b03      	subs	r3, #3
 80015da:	e000      	b.n	80015de <NVIC_EncodePriority+0x32>
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	f04f 32ff 	mov.w	r2, #4294967295
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43da      	mvns	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	401a      	ands	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f4:	f04f 31ff 	mov.w	r1, #4294967295
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	43d9      	mvns	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	4313      	orrs	r3, r2
         );
}
 8001606:	4618      	mov	r0, r3
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001624:	d301      	bcc.n	800162a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001626:	2301      	movs	r3, #1
 8001628:	e00f      	b.n	800164a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <SysTick_Config+0x40>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001632:	210f      	movs	r1, #15
 8001634:	f04f 30ff 	mov.w	r0, #4294967295
 8001638:	f7ff ff8e 	bl	8001558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <SysTick_Config+0x40>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <SysTick_Config+0x40>)
 8001644:	2207      	movs	r2, #7
 8001646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	e000e010 	.word	0xe000e010

08001658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ff29 	bl	80014b8 <__NVIC_SetPriorityGrouping>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001680:	f7ff ff3e 	bl	8001500 <__NVIC_GetPriorityGrouping>
 8001684:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	6978      	ldr	r0, [r7, #20]
 800168c:	f7ff ff8e 	bl	80015ac <NVIC_EncodePriority>
 8001690:	4602      	mov	r2, r0
 8001692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff5d 	bl	8001558 <__NVIC_SetPriority>
}
 800169e:	bf00      	nop
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff31 	bl	800151c <__NVIC_EnableIRQ>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ffa2 	bl	8001614 <SysTick_Config>
 80016d0:	4603      	mov	r3, r0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e014      	b.n	8001716 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	791b      	ldrb	r3, [r3, #4]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d105      	bne.n	8001702 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff fc87 	bl	8001010 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2202      	movs	r2, #2
 8001706:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	795b      	ldrb	r3, [r3, #5]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d101      	bne.n	8001734 <HAL_DAC_Start+0x16>
 8001730:	2302      	movs	r3, #2
 8001732:	e040      	b.n	80017b6 <HAL_DAC_Start+0x98>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2202      	movs	r2, #2
 800173e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6819      	ldr	r1, [r3, #0]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	2201      	movs	r2, #1
 800174e:	409a      	lsls	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10f      	bne.n	800177e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001768:	2b02      	cmp	r3, #2
 800176a:	d11d      	bne.n	80017a8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0201 	orr.w	r2, r2, #1
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	e014      	b.n	80017a8 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	f003 0310 	and.w	r3, r3, #16
 800178e:	2102      	movs	r1, #2
 8001790:	fa01 f303 	lsl.w	r3, r1, r3
 8001794:	429a      	cmp	r2, r3
 8001796:	d107      	bne.n	80017a8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0202 	orr.w	r2, r2, #2
 80017a6:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6819      	ldr	r1, [r3, #0]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	f003 0310 	and.w	r3, r3, #16
 80017d8:	2201      	movs	r2, #1
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	400a      	ands	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	795b      	ldrb	r3, [r3, #5]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d101      	bne.n	800181a <HAL_DAC_Start_DMA+0x1e>
 8001816:	2302      	movs	r3, #2
 8001818:	e0ab      	b.n	8001972 <HAL_DAC_Start_DMA+0x176>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2201      	movs	r2, #1
 800181e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2202      	movs	r2, #2
 8001824:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d12f      	bne.n	800188c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4a52      	ldr	r2, [pc, #328]	; (800197c <HAL_DAC_Start_DMA+0x180>)
 8001832:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	4a51      	ldr	r2, [pc, #324]	; (8001980 <HAL_DAC_Start_DMA+0x184>)
 800183a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4a50      	ldr	r2, [pc, #320]	; (8001984 <HAL_DAC_Start_DMA+0x188>)
 8001842:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001852:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	2b08      	cmp	r3, #8
 8001858:	d013      	beq.n	8001882 <HAL_DAC_Start_DMA+0x86>
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	2b08      	cmp	r3, #8
 800185e:	d845      	bhi.n	80018ec <HAL_DAC_Start_DMA+0xf0>
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_DAC_Start_DMA+0x72>
 8001866:	6a3b      	ldr	r3, [r7, #32]
 8001868:	2b04      	cmp	r3, #4
 800186a:	d005      	beq.n	8001878 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800186c:	e03e      	b.n	80018ec <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	3308      	adds	r3, #8
 8001874:	613b      	str	r3, [r7, #16]
        break;
 8001876:	e03c      	b.n	80018f2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	330c      	adds	r3, #12
 800187e:	613b      	str	r3, [r7, #16]
        break;
 8001880:	e037      	b.n	80018f2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	3310      	adds	r3, #16
 8001888:	613b      	str	r3, [r7, #16]
        break;
 800188a:	e032      	b.n	80018f2 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4a3d      	ldr	r2, [pc, #244]	; (8001988 <HAL_DAC_Start_DMA+0x18c>)
 8001892:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4a3c      	ldr	r2, [pc, #240]	; (800198c <HAL_DAC_Start_DMA+0x190>)
 800189a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4a3b      	ldr	r2, [pc, #236]	; (8001990 <HAL_DAC_Start_DMA+0x194>)
 80018a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018b2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d013      	beq.n	80018e2 <HAL_DAC_Start_DMA+0xe6>
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	2b08      	cmp	r3, #8
 80018be:	d817      	bhi.n	80018f0 <HAL_DAC_Start_DMA+0xf4>
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_DAC_Start_DMA+0xd2>
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d005      	beq.n	80018d8 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80018cc:	e010      	b.n	80018f0 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	3314      	adds	r3, #20
 80018d4:	613b      	str	r3, [r7, #16]
        break;
 80018d6:	e00c      	b.n	80018f2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	3318      	adds	r3, #24
 80018de:	613b      	str	r3, [r7, #16]
        break;
 80018e0:	e007      	b.n	80018f2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	331c      	adds	r3, #28
 80018e8:	613b      	str	r3, [r7, #16]
        break;
 80018ea:	e002      	b.n	80018f2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80018ec:	bf00      	nop
 80018ee:	e000      	b.n	80018f2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80018f0:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d111      	bne.n	800191c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001906:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6898      	ldr	r0, [r3, #8]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	f000 fbb3 	bl	800207c <HAL_DMA_Start_IT>
 8001916:	4603      	mov	r3, r0
 8001918:	75fb      	strb	r3, [r7, #23]
 800191a:	e010      	b.n	800193e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800192a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	68d8      	ldr	r0, [r3, #12]
 8001930:	6879      	ldr	r1, [r7, #4]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	f000 fba1 	bl	800207c <HAL_DMA_Start_IT>
 800193a:	4603      	mov	r3, r0
 800193c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2200      	movs	r2, #0
 8001942:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001944:	7dfb      	ldrb	r3, [r7, #23]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10c      	bne.n	8001964 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6819      	ldr	r1, [r3, #0]
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	2201      	movs	r2, #1
 8001958:	409a      	lsls	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	e005      	b.n	8001970 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	f043 0204 	orr.w	r2, r3, #4
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001970:	7dfb      	ldrb	r3, [r7, #23]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	08001e05 	.word	0x08001e05
 8001980:	08001e27 	.word	0x08001e27
 8001984:	08001e43 	.word	0x08001e43
 8001988:	08001ec1 	.word	0x08001ec1
 800198c:	08001ee3 	.word	0x08001ee3
 8001990:	08001eff 	.word	0x08001eff

08001994 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6819      	ldr	r1, [r3, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	400a      	ands	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6819      	ldr	r1, [r3, #0]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	2201      	movs	r2, #1
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43da      	mvns	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	400a      	ands	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10d      	bne.n	80019fa <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 fbc5 	bl	8002172 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	e00c      	b.n	8001a14 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 fbb7 	bl	8002172 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001a12:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a34:	d120      	bne.n	8001a78 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a44:	d118      	bne.n	8001a78 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2204      	movs	r2, #4
 8001a4a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	f043 0201 	orr.w	r2, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a70:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f870 	bl	8001b58 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a86:	d120      	bne.n	8001aca <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a96:	d118      	bne.n	8001aca <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	f043 0202 	orr.w	r2, r3, #2
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ab2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001ac2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f9f1 	bl	8001eac <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b087      	sub	sp, #28
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
 8001ade:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d105      	bne.n	8001afc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	3308      	adds	r3, #8
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	e004      	b.n	8001b06 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	3314      	adds	r3, #20
 8001b04:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	371c      	adds	r7, #28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	795b      	ldrb	r3, [r3, #5]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <HAL_DAC_ConfigChannel+0x1c>
 8001b84:	2302      	movs	r3, #2
 8001b86:	e137      	b.n	8001df8 <HAL_DAC_ConfigChannel+0x28c>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2202      	movs	r2, #2
 8001b92:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	f040 8081 	bne.w	8001ca0 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001b9e:	f7ff fc5b 	bl	8001458 <HAL_GetTick>
 8001ba2:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d140      	bne.n	8001c2c <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001baa:	e018      	b.n	8001bde <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001bac:	f7ff fc54 	bl	8001458 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d911      	bls.n	8001bde <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00a      	beq.n	8001bde <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	f043 0208 	orr.w	r2, r3, #8
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e10c      	b.n	8001df8 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1df      	bne.n	8001bac <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8001bec:	2001      	movs	r0, #1
 8001bee:	f7ff fc3f 	bl	8001470 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	69d2      	ldr	r2, [r2, #28]
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40
 8001bfc:	e023      	b.n	8001c46 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001bfe:	f7ff fc2b 	bl	8001458 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d90f      	bls.n	8001c2c <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	da0a      	bge.n	8001c2c <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	f043 0208 	orr.w	r2, r3, #8
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2203      	movs	r2, #3
 8001c26:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e0e5      	b.n	8001df8 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	dbe3      	blt.n	8001bfe <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8001c36:	2001      	movs	r0, #1
 8001c38:	f7ff fc1a 	bl	8001470 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68ba      	ldr	r2, [r7, #8]
 8001c42:	69d2      	ldr	r2, [r2, #28]
 8001c44:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	ea02 0103 	and.w	r1, r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	6a1a      	ldr	r2, [r3, #32]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0310 	and.w	r3, r3, #16
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	21ff      	movs	r1, #255	; 0xff
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	ea02 0103 	and.w	r1, r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	409a      	lsls	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d11d      	bne.n	8001ce4 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cae:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	221f      	movs	r2, #31
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	69fa      	ldr	r2, [r7, #28]
 8001ce2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cea:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	2207      	movs	r2, #7
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	69fa      	ldr	r2, [r7, #28]
 8001d2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6819      	ldr	r1, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f003 0310 	and.w	r3, r3, #16
 8001d38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43da      	mvns	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	400a      	ands	r2, r1
 8001d48:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	69fa      	ldr	r2, [r7, #28]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d88:	d104      	bne.n	8001d94 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	e018      	b.n	8001dc6 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d104      	bne.n	8001da6 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	e00f      	b.n	8001dc6 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001da6:	f001 fbf5 	bl	8003594 <HAL_RCC_GetHCLKFreq>
 8001daa:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <HAL_DAC_ConfigChannel+0x294>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d904      	bls.n	8001dbe <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dba:	61fb      	str	r3, [r7, #28]
 8001dbc:	e003      	b.n	8001dc6 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001dc4:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6819      	ldr	r1, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	22c0      	movs	r2, #192	; 0xc0
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43da      	mvns	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	400a      	ands	r2, r1
 8001de8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2201      	movs	r2, #1
 8001dee:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3720      	adds	r7, #32
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	04c4b400 	.word	0x04c4b400

08001e04 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f7ff fe82 	bl	8001b1c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	711a      	strb	r2, [r3, #4]
}
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f7ff fe7b 	bl	8001b30 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	f043 0204 	orr.w	r2, r3, #4
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f7ff fe71 	bl	8001b44 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2201      	movs	r2, #1
 8001e66:	711a      	strb	r2, [r3, #4]
}
 8001e68:	bf00      	nop
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7ff ffce 	bl	8001e70 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	711a      	strb	r2, [r3, #4]
}
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b084      	sub	sp, #16
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eee:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f7ff ffc7 	bl	8001e84 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b084      	sub	sp, #16
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	f043 0204 	orr.w	r2, r3, #4
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001f18:	68f8      	ldr	r0, [r7, #12]
 8001f1a:	f7ff ffbd 	bl	8001e98 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2201      	movs	r2, #1
 8001f22:	711a      	strb	r2, [r3, #4]
}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e08d      	b.n	800205a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b47      	ldr	r3, [pc, #284]	; (8002064 <HAL_DMA_Init+0x138>)
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d80f      	bhi.n	8001f6a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b45      	ldr	r3, [pc, #276]	; (8002068 <HAL_DMA_Init+0x13c>)
 8001f52:	4413      	add	r3, r2
 8001f54:	4a45      	ldr	r2, [pc, #276]	; (800206c <HAL_DMA_Init+0x140>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	091b      	lsrs	r3, r3, #4
 8001f5c:	009a      	lsls	r2, r3, #2
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a42      	ldr	r2, [pc, #264]	; (8002070 <HAL_DMA_Init+0x144>)
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40
 8001f68:	e00e      	b.n	8001f88 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4b40      	ldr	r3, [pc, #256]	; (8002074 <HAL_DMA_Init+0x148>)
 8001f72:	4413      	add	r3, r2
 8001f74:	4a3d      	ldr	r2, [pc, #244]	; (800206c <HAL_DMA_Init+0x140>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	091b      	lsrs	r3, r3, #4
 8001f7c:	009a      	lsls	r2, r3, #2
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a3c      	ldr	r2, [pc, #240]	; (8002078 <HAL_DMA_Init+0x14c>)
 8001f86:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fa12 	bl	8002404 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fe8:	d102      	bne.n	8001ff0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002004:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d010      	beq.n	8002030 <HAL_DMA_Init+0x104>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b04      	cmp	r3, #4
 8002014:	d80c      	bhi.n	8002030 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 fa32 	bl	8002480 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	e008      	b.n	8002042 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40020407 	.word	0x40020407
 8002068:	bffdfff8 	.word	0xbffdfff8
 800206c:	cccccccd 	.word	0xcccccccd
 8002070:	40020000 	.word	0x40020000
 8002074:	bffdfbf8 	.word	0xbffdfbf8
 8002078:	40020400 	.word	0x40020400

0800207c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_DMA_Start_IT+0x20>
 8002098:	2302      	movs	r3, #2
 800209a:	e066      	b.n	800216a <HAL_DMA_Start_IT+0xee>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d155      	bne.n	800215c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0201 	bic.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	68b9      	ldr	r1, [r7, #8]
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 f957 	bl	8002388 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d008      	beq.n	80020f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f042 020e 	orr.w	r2, r2, #14
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	e00f      	b.n	8002114 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0204 	bic.w	r2, r2, #4
 8002102:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 020a 	orr.w	r2, r2, #10
 8002112:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800212c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002130:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002136:	2b00      	cmp	r3, #0
 8002138:	d007      	beq.n	800214a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002144:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002148:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 0201 	orr.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e005      	b.n	8002168 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002164:	2302      	movs	r3, #2
 8002166:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002168:	7dfb      	ldrb	r3, [r7, #23]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002172:	b480      	push	{r7}
 8002174:	b085      	sub	sp, #20
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d008      	beq.n	800219c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2204      	movs	r2, #4
 800218e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e040      	b.n	800221e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 020e 	bic.w	r2, r2, #14
 80021aa:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021ba:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0201 	bic.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	f003 021c 	and.w	r2, r3, #28
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	2101      	movs	r1, #1
 80021da:	fa01 f202 	lsl.w	r2, r1, r2
 80021de:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021e8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00c      	beq.n	800220c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002200:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800220a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800221c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800221e:	4618      	mov	r0, r3
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	f003 031c 	and.w	r3, r3, #28
 800224a:	2204      	movs	r2, #4
 800224c:	409a      	lsls	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4013      	ands	r3, r2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d026      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x7a>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d021      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b00      	cmp	r3, #0
 800226c:	d107      	bne.n	800227e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0204 	bic.w	r2, r2, #4
 800227c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	f003 021c 	and.w	r2, r3, #28
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	2104      	movs	r1, #4
 800228c:	fa01 f202 	lsl.w	r2, r1, r2
 8002290:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	2b00      	cmp	r3, #0
 8002298:	d071      	beq.n	800237e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80022a2:	e06c      	b.n	800237e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a8:	f003 031c 	and.w	r3, r3, #28
 80022ac:	2202      	movs	r2, #2
 80022ae:	409a      	lsls	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d02e      	beq.n	8002316 <HAL_DMA_IRQHandler+0xec>
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d029      	beq.n	8002316 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0320 	and.w	r3, r3, #32
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10b      	bne.n	80022e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 020a 	bic.w	r2, r2, #10
 80022de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	f003 021c 	and.w	r2, r3, #28
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	2102      	movs	r1, #2
 80022f6:	fa01 f202 	lsl.w	r2, r1, r2
 80022fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d038      	beq.n	800237e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002314:	e033      	b.n	800237e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	f003 031c 	and.w	r3, r3, #28
 800231e:	2208      	movs	r2, #8
 8002320:	409a      	lsls	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4013      	ands	r3, r2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d02a      	beq.n	8002380 <HAL_DMA_IRQHandler+0x156>
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d025      	beq.n	8002380 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 020e 	bic.w	r2, r2, #14
 8002342:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002348:	f003 021c 	and.w	r2, r3, #28
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	2101      	movs	r1, #1
 8002352:	fa01 f202 	lsl.w	r2, r1, r2
 8002356:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002372:	2b00      	cmp	r3, #0
 8002374:	d004      	beq.n	8002380 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800237e:	bf00      	nop
 8002380:	bf00      	nop
}
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800239e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d004      	beq.n	80023b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80023b0:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f003 021c 	and.w	r2, r3, #28
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	2101      	movs	r1, #1
 80023c0:	fa01 f202 	lsl.w	r2, r1, r2
 80023c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b10      	cmp	r3, #16
 80023d4:	d108      	bne.n	80023e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023e6:	e007      	b.n	80023f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	60da      	str	r2, [r3, #12]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	4b17      	ldr	r3, [pc, #92]	; (8002470 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002414:	429a      	cmp	r2, r3
 8002416:	d80a      	bhi.n	800242e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002424:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6493      	str	r3, [r2, #72]	; 0x48
 800242c:	e007      	b.n	800243e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	089b      	lsrs	r3, r3, #2
 8002434:	009a      	lsls	r2, r3, #2
 8002436:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002438:	4413      	add	r3, r2
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	3b08      	subs	r3, #8
 8002446:	4a0c      	ldr	r2, [pc, #48]	; (8002478 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a0a      	ldr	r2, [pc, #40]	; (800247c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002454:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	2201      	movs	r2, #1
 800245e:	409a      	lsls	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	40020407 	.word	0x40020407
 8002474:	4002081c 	.word	0x4002081c
 8002478:	cccccccd 	.word	0xcccccccd
 800247c:	40020880 	.word	0x40020880

08002480 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	461a      	mov	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80024a2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	2201      	movs	r2, #1
 80024ae:	409a      	lsls	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	1000823f 	.word	0x1000823f
 80024c4:	40020940 	.word	0x40020940

080024c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d6:	e166      	b.n	80027a6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	2101      	movs	r1, #1
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	fa01 f303 	lsl.w	r3, r1, r3
 80024e4:	4013      	ands	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 8158 	beq.w	80027a0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d005      	beq.n	8002508 <HAL_GPIO_Init+0x40>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d130      	bne.n	800256a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800253e:	2201      	movs	r2, #1
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	091b      	lsrs	r3, r3, #4
 8002554:	f003 0201 	and.w	r2, r3, #1
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b03      	cmp	r3, #3
 8002574:	d017      	beq.n	80025a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	2203      	movs	r2, #3
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4013      	ands	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	689a      	ldr	r2, [r3, #8]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d123      	bne.n	80025fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	08da      	lsrs	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3208      	adds	r2, #8
 80025ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	220f      	movs	r2, #15
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	08da      	lsrs	r2, r3, #3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3208      	adds	r2, #8
 80025f4:	6939      	ldr	r1, [r7, #16]
 80025f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	2203      	movs	r2, #3
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4013      	ands	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 0203 	and.w	r2, r3, #3
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 80b2 	beq.w	80027a0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263c:	4b61      	ldr	r3, [pc, #388]	; (80027c4 <HAL_GPIO_Init+0x2fc>)
 800263e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002640:	4a60      	ldr	r2, [pc, #384]	; (80027c4 <HAL_GPIO_Init+0x2fc>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6613      	str	r3, [r2, #96]	; 0x60
 8002648:	4b5e      	ldr	r3, [pc, #376]	; (80027c4 <HAL_GPIO_Init+0x2fc>)
 800264a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002654:	4a5c      	ldr	r2, [pc, #368]	; (80027c8 <HAL_GPIO_Init+0x300>)
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	089b      	lsrs	r3, r3, #2
 800265a:	3302      	adds	r3, #2
 800265c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002660:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	220f      	movs	r2, #15
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4013      	ands	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800267e:	d02b      	beq.n	80026d8 <HAL_GPIO_Init+0x210>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a52      	ldr	r2, [pc, #328]	; (80027cc <HAL_GPIO_Init+0x304>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d025      	beq.n	80026d4 <HAL_GPIO_Init+0x20c>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a51      	ldr	r2, [pc, #324]	; (80027d0 <HAL_GPIO_Init+0x308>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d01f      	beq.n	80026d0 <HAL_GPIO_Init+0x208>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a50      	ldr	r2, [pc, #320]	; (80027d4 <HAL_GPIO_Init+0x30c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d019      	beq.n	80026cc <HAL_GPIO_Init+0x204>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a4f      	ldr	r2, [pc, #316]	; (80027d8 <HAL_GPIO_Init+0x310>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d013      	beq.n	80026c8 <HAL_GPIO_Init+0x200>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a4e      	ldr	r2, [pc, #312]	; (80027dc <HAL_GPIO_Init+0x314>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00d      	beq.n	80026c4 <HAL_GPIO_Init+0x1fc>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a4d      	ldr	r2, [pc, #308]	; (80027e0 <HAL_GPIO_Init+0x318>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d007      	beq.n	80026c0 <HAL_GPIO_Init+0x1f8>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a4c      	ldr	r2, [pc, #304]	; (80027e4 <HAL_GPIO_Init+0x31c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d101      	bne.n	80026bc <HAL_GPIO_Init+0x1f4>
 80026b8:	2307      	movs	r3, #7
 80026ba:	e00e      	b.n	80026da <HAL_GPIO_Init+0x212>
 80026bc:	2308      	movs	r3, #8
 80026be:	e00c      	b.n	80026da <HAL_GPIO_Init+0x212>
 80026c0:	2306      	movs	r3, #6
 80026c2:	e00a      	b.n	80026da <HAL_GPIO_Init+0x212>
 80026c4:	2305      	movs	r3, #5
 80026c6:	e008      	b.n	80026da <HAL_GPIO_Init+0x212>
 80026c8:	2304      	movs	r3, #4
 80026ca:	e006      	b.n	80026da <HAL_GPIO_Init+0x212>
 80026cc:	2303      	movs	r3, #3
 80026ce:	e004      	b.n	80026da <HAL_GPIO_Init+0x212>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e002      	b.n	80026da <HAL_GPIO_Init+0x212>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <HAL_GPIO_Init+0x212>
 80026d8:	2300      	movs	r3, #0
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	f002 0203 	and.w	r2, r2, #3
 80026e0:	0092      	lsls	r2, r2, #2
 80026e2:	4093      	lsls	r3, r2
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026ea:	4937      	ldr	r1, [pc, #220]	; (80027c8 <HAL_GPIO_Init+0x300>)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	089b      	lsrs	r3, r3, #2
 80026f0:	3302      	adds	r3, #2
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026f8:	4b3b      	ldr	r3, [pc, #236]	; (80027e8 <HAL_GPIO_Init+0x320>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	43db      	mvns	r3, r3
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4013      	ands	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800271c:	4a32      	ldr	r2, [pc, #200]	; (80027e8 <HAL_GPIO_Init+0x320>)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002722:	4b31      	ldr	r3, [pc, #196]	; (80027e8 <HAL_GPIO_Init+0x320>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	43db      	mvns	r3, r3
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4013      	ands	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4313      	orrs	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002746:	4a28      	ldr	r2, [pc, #160]	; (80027e8 <HAL_GPIO_Init+0x320>)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800274c:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <HAL_GPIO_Init+0x320>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	43db      	mvns	r3, r3
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4013      	ands	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002770:	4a1d      	ldr	r2, [pc, #116]	; (80027e8 <HAL_GPIO_Init+0x320>)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002776:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <HAL_GPIO_Init+0x320>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	43db      	mvns	r3, r3
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4013      	ands	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800279a:	4a13      	ldr	r2, [pc, #76]	; (80027e8 <HAL_GPIO_Init+0x320>)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	3301      	adds	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	fa22 f303 	lsr.w	r3, r2, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f47f ae91 	bne.w	80024d8 <HAL_GPIO_Init+0x10>
  }
}
 80027b6:	bf00      	nop
 80027b8:	bf00      	nop
 80027ba:	371c      	adds	r7, #28
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40010000 	.word	0x40010000
 80027cc:	48000400 	.word	0x48000400
 80027d0:	48000800 	.word	0x48000800
 80027d4:	48000c00 	.word	0x48000c00
 80027d8:	48001000 	.word	0x48001000
 80027dc:	48001400 	.word	0x48001400
 80027e0:	48001800 	.word	0x48001800
 80027e4:	48001c00 	.word	0x48001c00
 80027e8:	40010400 	.word	0x40010400

080027ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	807b      	strh	r3, [r7, #2]
 80027f8:	4613      	mov	r3, r2
 80027fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027fc:	787b      	ldrb	r3, [r7, #1]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002802:	887a      	ldrh	r2, [r7, #2]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002808:	e002      	b.n	8002810 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800280a:	887a      	ldrh	r2, [r7, #2]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002826:	4b08      	ldr	r3, [pc, #32]	; (8002848 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	88fb      	ldrh	r3, [r7, #6]
 800282c:	4013      	ands	r3, r2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d006      	beq.n	8002840 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002832:	4a05      	ldr	r2, [pc, #20]	; (8002848 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe fb44 	bl	8000ec8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002840:	bf00      	nop
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40010400 	.word	0x40010400

0800284c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002850:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800285c:	d102      	bne.n	8002864 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800285e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002862:	e00b      	b.n	800287c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002864:	4b08      	ldr	r3, [pc, #32]	; (8002888 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800286a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002872:	d102      	bne.n	800287a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002878:	e000      	b.n	800287c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800287a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40007000 	.word	0x40007000

0800288c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d141      	bne.n	800291e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800289a:	4b4b      	ldr	r3, [pc, #300]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a6:	d131      	bne.n	800290c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028a8:	4b47      	ldr	r3, [pc, #284]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ae:	4a46      	ldr	r2, [pc, #280]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028b8:	4b43      	ldr	r3, [pc, #268]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028c0:	4a41      	ldr	r2, [pc, #260]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80028c8:	4b40      	ldr	r3, [pc, #256]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2232      	movs	r2, #50	; 0x32
 80028ce:	fb02 f303 	mul.w	r3, r2, r3
 80028d2:	4a3f      	ldr	r2, [pc, #252]	; (80029d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	0c9b      	lsrs	r3, r3, #18
 80028da:	3301      	adds	r3, #1
 80028dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028de:	e002      	b.n	80028e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028e6:	4b38      	ldr	r3, [pc, #224]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f2:	d102      	bne.n	80028fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f2      	bne.n	80028e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028fa:	4b33      	ldr	r3, [pc, #204]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002906:	d158      	bne.n	80029ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e057      	b.n	80029bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800290c:	4b2e      	ldr	r3, [pc, #184]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800290e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002912:	4a2d      	ldr	r2, [pc, #180]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002918:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800291c:	e04d      	b.n	80029ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002924:	d141      	bne.n	80029aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002926:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800292e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002932:	d131      	bne.n	8002998 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002934:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800293a:	4a23      	ldr	r2, [pc, #140]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800293c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002940:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002944:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800294c:	4a1e      	ldr	r2, [pc, #120]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800294e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002952:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002954:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2232      	movs	r2, #50	; 0x32
 800295a:	fb02 f303 	mul.w	r3, r2, r3
 800295e:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002960:	fba2 2303 	umull	r2, r3, r2, r3
 8002964:	0c9b      	lsrs	r3, r3, #18
 8002966:	3301      	adds	r3, #1
 8002968:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800296a:	e002      	b.n	8002972 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	3b01      	subs	r3, #1
 8002970:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800297e:	d102      	bne.n	8002986 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f2      	bne.n	800296c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002992:	d112      	bne.n	80029ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e011      	b.n	80029bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800299a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800299e:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80029a8:	e007      	b.n	80029ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029b2:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029b8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40007000 	.word	0x40007000
 80029cc:	20000000 	.word	0x20000000
 80029d0:	431bde83 	.word	0x431bde83

080029d4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d102      	bne.n	80029e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	f000 bc08 	b.w	80031f8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029e8:	4b96      	ldr	r3, [pc, #600]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 030c 	and.w	r3, r3, #12
 80029f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029f2:	4b94      	ldr	r3, [pc, #592]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80e4 	beq.w	8002bd2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <HAL_RCC_OscConfig+0x4c>
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	2b0c      	cmp	r3, #12
 8002a14:	f040 808b 	bne.w	8002b2e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	f040 8087 	bne.w	8002b2e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a20:	4b88      	ldr	r3, [pc, #544]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <HAL_RCC_OscConfig+0x64>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e3df      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1a      	ldr	r2, [r3, #32]
 8002a3c:	4b81      	ldr	r3, [pc, #516]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d004      	beq.n	8002a52 <HAL_RCC_OscConfig+0x7e>
 8002a48:	4b7e      	ldr	r3, [pc, #504]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a50:	e005      	b.n	8002a5e <HAL_RCC_OscConfig+0x8a>
 8002a52:	4b7c      	ldr	r3, [pc, #496]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d223      	bcs.n	8002aaa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fda0 	bl	80035ac <RCC_SetFlashLatencyFromMSIRange>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e3c0      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a76:	4b73      	ldr	r3, [pc, #460]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a72      	ldr	r2, [pc, #456]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002a7c:	f043 0308 	orr.w	r3, r3, #8
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b70      	ldr	r3, [pc, #448]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	496d      	ldr	r1, [pc, #436]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a94:	4b6b      	ldr	r3, [pc, #428]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	4968      	ldr	r1, [pc, #416]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
 8002aa8:	e025      	b.n	8002af6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aaa:	4b66      	ldr	r3, [pc, #408]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a65      	ldr	r2, [pc, #404]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002ab0:	f043 0308 	orr.w	r3, r3, #8
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b63      	ldr	r3, [pc, #396]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	4960      	ldr	r1, [pc, #384]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ac8:	4b5e      	ldr	r3, [pc, #376]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	021b      	lsls	r3, r3, #8
 8002ad6:	495b      	ldr	r1, [pc, #364]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 fd60 	bl	80035ac <RCC_SetFlashLatencyFromMSIRange>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e380      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002af6:	f000 fcc1 	bl	800347c <HAL_RCC_GetSysClockFreq>
 8002afa:	4602      	mov	r2, r0
 8002afc:	4b51      	ldr	r3, [pc, #324]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	4950      	ldr	r1, [pc, #320]	; (8002c48 <HAL_RCC_OscConfig+0x274>)
 8002b08:	5ccb      	ldrb	r3, [r1, r3]
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b12:	4a4e      	ldr	r2, [pc, #312]	; (8002c4c <HAL_RCC_OscConfig+0x278>)
 8002b14:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b16:	4b4e      	ldr	r3, [pc, #312]	; (8002c50 <HAL_RCC_OscConfig+0x27c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fe fc4c 	bl	80013b8 <HAL_InitTick>
 8002b20:	4603      	mov	r3, r0
 8002b22:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d052      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	e364      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d032      	beq.n	8002b9c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b36:	4b43      	ldr	r3, [pc, #268]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a42      	ldr	r2, [pc, #264]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b42:	f7fe fc89 	bl	8001458 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b4a:	f7fe fc85 	bl	8001458 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e34d      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b5c:	4b39      	ldr	r3, [pc, #228]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b68:	4b36      	ldr	r3, [pc, #216]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a35      	ldr	r2, [pc, #212]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002b6e:	f043 0308 	orr.w	r3, r3, #8
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	4b33      	ldr	r3, [pc, #204]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	4930      	ldr	r1, [pc, #192]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b86:	4b2f      	ldr	r3, [pc, #188]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	021b      	lsls	r3, r3, #8
 8002b94:	492b      	ldr	r1, [pc, #172]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]
 8002b9a:	e01a      	b.n	8002bd2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b9c:	4b29      	ldr	r3, [pc, #164]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a28      	ldr	r2, [pc, #160]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002ba2:	f023 0301 	bic.w	r3, r3, #1
 8002ba6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fc56 	bl	8001458 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bb0:	f7fe fc52 	bl	8001458 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e31a      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bc2:	4b20      	ldr	r3, [pc, #128]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x1dc>
 8002bce:	e000      	b.n	8002bd2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bd0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d073      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x21c>
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2b0c      	cmp	r3, #12
 8002be8:	d10e      	bne.n	8002c08 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d10b      	bne.n	8002c08 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf0:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d063      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x2f0>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d15f      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e2f7      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c10:	d106      	bne.n	8002c20 <HAL_RCC_OscConfig+0x24c>
 8002c12:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a0b      	ldr	r2, [pc, #44]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	e025      	b.n	8002c6c <HAL_RCC_OscConfig+0x298>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c28:	d114      	bne.n	8002c54 <HAL_RCC_OscConfig+0x280>
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a05      	ldr	r2, [pc, #20]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a02      	ldr	r2, [pc, #8]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e013      	b.n	8002c6c <HAL_RCC_OscConfig+0x298>
 8002c44:	40021000 	.word	0x40021000
 8002c48:	08005218 	.word	0x08005218
 8002c4c:	20000000 	.word	0x20000000
 8002c50:	20000004 	.word	0x20000004
 8002c54:	4ba0      	ldr	r3, [pc, #640]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a9f      	ldr	r2, [pc, #636]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	4b9d      	ldr	r3, [pc, #628]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a9c      	ldr	r2, [pc, #624]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d013      	beq.n	8002c9c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7fe fbf0 	bl	8001458 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7fe fbec 	bl	8001458 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e2b4      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c8e:	4b92      	ldr	r3, [pc, #584]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0x2a8>
 8002c9a:	e014      	b.n	8002cc6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fbdc 	bl	8001458 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7fe fbd8 	bl	8001458 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	; 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e2a0      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cb6:	4b88      	ldr	r3, [pc, #544]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x2d0>
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d060      	beq.n	8002d94 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x310>
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	d119      	bne.n	8002d12 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d116      	bne.n	8002d12 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce4:	4b7c      	ldr	r3, [pc, #496]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_OscConfig+0x328>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e27d      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfc:	4b76      	ldr	r3, [pc, #472]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	061b      	lsls	r3, r3, #24
 8002d0a:	4973      	ldr	r1, [pc, #460]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d10:	e040      	b.n	8002d94 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d023      	beq.n	8002d62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d1a:	4b6f      	ldr	r3, [pc, #444]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a6e      	ldr	r2, [pc, #440]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d26:	f7fe fb97 	bl	8001458 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7fe fb93 	bl	8001458 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e25b      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d40:	4b65      	ldr	r3, [pc, #404]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4c:	4b62      	ldr	r3, [pc, #392]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	061b      	lsls	r3, r3, #24
 8002d5a:	495f      	ldr	r1, [pc, #380]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	604b      	str	r3, [r1, #4]
 8002d60:	e018      	b.n	8002d94 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d62:	4b5d      	ldr	r3, [pc, #372]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a5c      	ldr	r2, [pc, #368]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6e:	f7fe fb73 	bl	8001458 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d76:	f7fe fb6f 	bl	8001458 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e237      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d88:	4b53      	ldr	r3, [pc, #332]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f0      	bne.n	8002d76 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d03c      	beq.n	8002e1a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d01c      	beq.n	8002de2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002da8:	4b4b      	ldr	r3, [pc, #300]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dae:	4a4a      	ldr	r2, [pc, #296]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db8:	f7fe fb4e 	bl	8001458 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc0:	f7fe fb4a 	bl	8001458 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e212      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dd2:	4b41      	ldr	r3, [pc, #260]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0ef      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x3ec>
 8002de0:	e01b      	b.n	8002e1a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de2:	4b3d      	ldr	r3, [pc, #244]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de8:	4a3b      	ldr	r2, [pc, #236]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002dea:	f023 0301 	bic.w	r3, r3, #1
 8002dee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df2:	f7fe fb31 	bl	8001458 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfa:	f7fe fb2d 	bl	8001458 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e1f5      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e0c:	4b32      	ldr	r3, [pc, #200]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1ef      	bne.n	8002dfa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 80a6 	beq.w	8002f74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10d      	bne.n	8002e54 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e38:	4b27      	ldr	r3, [pc, #156]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	4a26      	ldr	r2, [pc, #152]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e42:	6593      	str	r3, [r2, #88]	; 0x58
 8002e44:	4b24      	ldr	r3, [pc, #144]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e50:	2301      	movs	r3, #1
 8002e52:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e54:	4b21      	ldr	r3, [pc, #132]	; (8002edc <HAL_RCC_OscConfig+0x508>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d118      	bne.n	8002e92 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e60:	4b1e      	ldr	r3, [pc, #120]	; (8002edc <HAL_RCC_OscConfig+0x508>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a1d      	ldr	r2, [pc, #116]	; (8002edc <HAL_RCC_OscConfig+0x508>)
 8002e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e6c:	f7fe faf4 	bl	8001458 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e74:	f7fe faf0 	bl	8001458 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e1b8      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e86:	4b15      	ldr	r3, [pc, #84]	; (8002edc <HAL_RCC_OscConfig+0x508>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0f0      	beq.n	8002e74 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d108      	bne.n	8002eac <HAL_RCC_OscConfig+0x4d8>
 8002e9a:	4b0f      	ldr	r3, [pc, #60]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea0:	4a0d      	ldr	r2, [pc, #52]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eaa:	e029      	b.n	8002f00 <HAL_RCC_OscConfig+0x52c>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	2b05      	cmp	r3, #5
 8002eb2:	d115      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x50c>
 8002eb4:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eba:	4a07      	ldr	r2, [pc, #28]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002ebc:	f043 0304 	orr.w	r3, r3, #4
 8002ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ec4:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eca:	4a03      	ldr	r2, [pc, #12]	; (8002ed8 <HAL_RCC_OscConfig+0x504>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ed4:	e014      	b.n	8002f00 <HAL_RCC_OscConfig+0x52c>
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40007000 	.word	0x40007000
 8002ee0:	4b9d      	ldr	r3, [pc, #628]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	4a9c      	ldr	r2, [pc, #624]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 8002ee8:	f023 0301 	bic.w	r3, r3, #1
 8002eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ef0:	4b99      	ldr	r3, [pc, #612]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	4a98      	ldr	r2, [pc, #608]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 8002ef8:	f023 0304 	bic.w	r3, r3, #4
 8002efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d016      	beq.n	8002f36 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f08:	f7fe faa6 	bl	8001458 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f0e:	e00a      	b.n	8002f26 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f10:	f7fe faa2 	bl	8001458 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e168      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f26:	4b8c      	ldr	r3, [pc, #560]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 8002f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0ed      	beq.n	8002f10 <HAL_RCC_OscConfig+0x53c>
 8002f34:	e015      	b.n	8002f62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f36:	f7fe fa8f 	bl	8001458 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f3c:	e00a      	b.n	8002f54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3e:	f7fe fa8b 	bl	8001458 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e151      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f54:	4b80      	ldr	r3, [pc, #512]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 8002f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1ed      	bne.n	8002f3e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f62:	7ffb      	ldrb	r3, [r7, #31]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d105      	bne.n	8002f74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f68:	4b7b      	ldr	r3, [pc, #492]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6c:	4a7a      	ldr	r2, [pc, #488]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 8002f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0320 	and.w	r3, r3, #32
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d03c      	beq.n	8002ffa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d01c      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f88:	4b73      	ldr	r3, [pc, #460]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 8002f8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f8e:	4a72      	ldr	r2, [pc, #456]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f98:	f7fe fa5e 	bl	8001458 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fa0:	f7fe fa5a 	bl	8001458 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e122      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fb2:	4b69      	ldr	r3, [pc, #420]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 8002fb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0ef      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x5cc>
 8002fc0:	e01b      	b.n	8002ffa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fc2:	4b65      	ldr	r3, [pc, #404]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 8002fc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fc8:	4a63      	ldr	r2, [pc, #396]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd2:	f7fe fa41 	bl	8001458 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fda:	f7fe fa3d 	bl	8001458 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e105      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fec:	4b5a      	ldr	r3, [pc, #360]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 8002fee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1ef      	bne.n	8002fda <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 80f9 	beq.w	80031f6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003008:	2b02      	cmp	r3, #2
 800300a:	f040 80cf 	bne.w	80031ac <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800300e:	4b52      	ldr	r3, [pc, #328]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f003 0203 	and.w	r2, r3, #3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	429a      	cmp	r2, r3
 8003020:	d12c      	bne.n	800307c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	3b01      	subs	r3, #1
 800302e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d123      	bne.n	800307c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003040:	429a      	cmp	r2, r3
 8003042:	d11b      	bne.n	800307c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003050:	429a      	cmp	r2, r3
 8003052:	d113      	bne.n	800307c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305e:	085b      	lsrs	r3, r3, #1
 8003060:	3b01      	subs	r3, #1
 8003062:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003064:	429a      	cmp	r2, r3
 8003066:	d109      	bne.n	800307c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	3b01      	subs	r3, #1
 8003076:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003078:	429a      	cmp	r2, r3
 800307a:	d071      	beq.n	8003160 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b0c      	cmp	r3, #12
 8003080:	d068      	beq.n	8003154 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003082:	4b35      	ldr	r3, [pc, #212]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d105      	bne.n	800309a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800308e:	4b32      	ldr	r3, [pc, #200]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e0ac      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800309e:	4b2e      	ldr	r3, [pc, #184]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a2d      	ldr	r2, [pc, #180]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 80030a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030aa:	f7fe f9d5 	bl	8001458 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b2:	f7fe f9d1 	bl	8001458 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e099      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c4:	4b24      	ldr	r3, [pc, #144]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1f0      	bne.n	80030b2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030d0:	4b21      	ldr	r3, [pc, #132]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	4b21      	ldr	r3, [pc, #132]	; (800315c <HAL_RCC_OscConfig+0x788>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030e0:	3a01      	subs	r2, #1
 80030e2:	0112      	lsls	r2, r2, #4
 80030e4:	4311      	orrs	r1, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030ea:	0212      	lsls	r2, r2, #8
 80030ec:	4311      	orrs	r1, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030f2:	0852      	lsrs	r2, r2, #1
 80030f4:	3a01      	subs	r2, #1
 80030f6:	0552      	lsls	r2, r2, #21
 80030f8:	4311      	orrs	r1, r2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030fe:	0852      	lsrs	r2, r2, #1
 8003100:	3a01      	subs	r2, #1
 8003102:	0652      	lsls	r2, r2, #25
 8003104:	4311      	orrs	r1, r2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800310a:	06d2      	lsls	r2, r2, #27
 800310c:	430a      	orrs	r2, r1
 800310e:	4912      	ldr	r1, [pc, #72]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 8003110:	4313      	orrs	r3, r2
 8003112:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003114:	4b10      	ldr	r3, [pc, #64]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a0f      	ldr	r2, [pc, #60]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 800311a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800311e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003120:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4a0c      	ldr	r2, [pc, #48]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 8003126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800312a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800312c:	f7fe f994 	bl	8001458 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003134:	f7fe f990 	bl	8001458 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e058      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003146:	4b04      	ldr	r3, [pc, #16]	; (8003158 <HAL_RCC_OscConfig+0x784>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003152:	e050      	b.n	80031f6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e04f      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
 8003158:	40021000 	.word	0x40021000
 800315c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003160:	4b27      	ldr	r3, [pc, #156]	; (8003200 <HAL_RCC_OscConfig+0x82c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d144      	bne.n	80031f6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800316c:	4b24      	ldr	r3, [pc, #144]	; (8003200 <HAL_RCC_OscConfig+0x82c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a23      	ldr	r2, [pc, #140]	; (8003200 <HAL_RCC_OscConfig+0x82c>)
 8003172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003176:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003178:	4b21      	ldr	r3, [pc, #132]	; (8003200 <HAL_RCC_OscConfig+0x82c>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4a20      	ldr	r2, [pc, #128]	; (8003200 <HAL_RCC_OscConfig+0x82c>)
 800317e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003182:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003184:	f7fe f968 	bl	8001458 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318c:	f7fe f964 	bl	8001458 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e02c      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800319e:	4b18      	ldr	r3, [pc, #96]	; (8003200 <HAL_RCC_OscConfig+0x82c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x7b8>
 80031aa:	e024      	b.n	80031f6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b0c      	cmp	r3, #12
 80031b0:	d01f      	beq.n	80031f2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b2:	4b13      	ldr	r3, [pc, #76]	; (8003200 <HAL_RCC_OscConfig+0x82c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a12      	ldr	r2, [pc, #72]	; (8003200 <HAL_RCC_OscConfig+0x82c>)
 80031b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031be:	f7fe f94b 	bl	8001458 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c6:	f7fe f947 	bl	8001458 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e00f      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031d8:	4b09      	ldr	r3, [pc, #36]	; (8003200 <HAL_RCC_OscConfig+0x82c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f0      	bne.n	80031c6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <HAL_RCC_OscConfig+0x82c>)
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	4905      	ldr	r1, [pc, #20]	; (8003200 <HAL_RCC_OscConfig+0x82c>)
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <HAL_RCC_OscConfig+0x830>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	60cb      	str	r3, [r1, #12]
 80031f0:	e001      	b.n	80031f6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3720      	adds	r7, #32
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40021000 	.word	0x40021000
 8003204:	feeefffc 	.word	0xfeeefffc

08003208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e11d      	b.n	800345c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003220:	4b90      	ldr	r3, [pc, #576]	; (8003464 <HAL_RCC_ClockConfig+0x25c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 030f 	and.w	r3, r3, #15
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d910      	bls.n	8003250 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322e:	4b8d      	ldr	r3, [pc, #564]	; (8003464 <HAL_RCC_ClockConfig+0x25c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 020f 	bic.w	r2, r3, #15
 8003236:	498b      	ldr	r1, [pc, #556]	; (8003464 <HAL_RCC_ClockConfig+0x25c>)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	4313      	orrs	r3, r2
 800323c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323e:	4b89      	ldr	r3, [pc, #548]	; (8003464 <HAL_RCC_ClockConfig+0x25c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d001      	beq.n	8003250 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e105      	b.n	800345c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d010      	beq.n	800327e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	4b81      	ldr	r3, [pc, #516]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003268:	429a      	cmp	r2, r3
 800326a:	d908      	bls.n	800327e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800326c:	4b7e      	ldr	r3, [pc, #504]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	497b      	ldr	r1, [pc, #492]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d079      	beq.n	800337e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b03      	cmp	r3, #3
 8003290:	d11e      	bne.n	80032d0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003292:	4b75      	ldr	r3, [pc, #468]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e0dc      	b.n	800345c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80032a2:	f000 f9dd 	bl	8003660 <RCC_GetSysClockFreqFromPLLSource>
 80032a6:	4603      	mov	r3, r0
 80032a8:	4a70      	ldr	r2, [pc, #448]	; (800346c <HAL_RCC_ClockConfig+0x264>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d946      	bls.n	800333c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80032ae:	4b6e      	ldr	r3, [pc, #440]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d140      	bne.n	800333c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032ba:	4b6b      	ldr	r3, [pc, #428]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032c2:	4a69      	ldr	r2, [pc, #420]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 80032c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80032ca:	2380      	movs	r3, #128	; 0x80
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	e035      	b.n	800333c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d107      	bne.n	80032e8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032d8:	4b63      	ldr	r3, [pc, #396]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d115      	bne.n	8003310 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0b9      	b.n	800345c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d107      	bne.n	8003300 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032f0:	4b5d      	ldr	r3, [pc, #372]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d109      	bne.n	8003310 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0ad      	b.n	800345c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003300:	4b59      	ldr	r3, [pc, #356]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0a5      	b.n	800345c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003310:	f000 f8b4 	bl	800347c <HAL_RCC_GetSysClockFreq>
 8003314:	4603      	mov	r3, r0
 8003316:	4a55      	ldr	r2, [pc, #340]	; (800346c <HAL_RCC_ClockConfig+0x264>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d90f      	bls.n	800333c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800331c:	4b52      	ldr	r3, [pc, #328]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d109      	bne.n	800333c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003328:	4b4f      	ldr	r3, [pc, #316]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003330:	4a4d      	ldr	r2, [pc, #308]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 8003332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003336:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800333c:	4b4a      	ldr	r3, [pc, #296]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f023 0203 	bic.w	r2, r3, #3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4947      	ldr	r1, [pc, #284]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 800334a:	4313      	orrs	r3, r2
 800334c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800334e:	f7fe f883 	bl	8001458 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003354:	e00a      	b.n	800336c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003356:	f7fe f87f 	bl	8001458 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	f241 3288 	movw	r2, #5000	; 0x1388
 8003364:	4293      	cmp	r3, r2
 8003366:	d901      	bls.n	800336c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e077      	b.n	800345c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336c:	4b3e      	ldr	r3, [pc, #248]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 020c 	and.w	r2, r3, #12
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	429a      	cmp	r2, r3
 800337c:	d1eb      	bne.n	8003356 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b80      	cmp	r3, #128	; 0x80
 8003382:	d105      	bne.n	8003390 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003384:	4b38      	ldr	r3, [pc, #224]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	4a37      	ldr	r2, [pc, #220]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 800338a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800338e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d010      	beq.n	80033be <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	4b31      	ldr	r3, [pc, #196]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d208      	bcs.n	80033be <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033ac:	4b2e      	ldr	r3, [pc, #184]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	492b      	ldr	r1, [pc, #172]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033be:	4b29      	ldr	r3, [pc, #164]	; (8003464 <HAL_RCC_ClockConfig+0x25c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d210      	bcs.n	80033ee <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033cc:	4b25      	ldr	r3, [pc, #148]	; (8003464 <HAL_RCC_ClockConfig+0x25c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f023 020f 	bic.w	r2, r3, #15
 80033d4:	4923      	ldr	r1, [pc, #140]	; (8003464 <HAL_RCC_ClockConfig+0x25c>)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	4313      	orrs	r3, r2
 80033da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033dc:	4b21      	ldr	r3, [pc, #132]	; (8003464 <HAL_RCC_ClockConfig+0x25c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d001      	beq.n	80033ee <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e036      	b.n	800345c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033fa:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	4918      	ldr	r1, [pc, #96]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 8003408:	4313      	orrs	r3, r2
 800340a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d009      	beq.n	800342c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003418:	4b13      	ldr	r3, [pc, #76]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	4910      	ldr	r1, [pc, #64]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 8003428:	4313      	orrs	r3, r2
 800342a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800342c:	f000 f826 	bl	800347c <HAL_RCC_GetSysClockFreq>
 8003430:	4602      	mov	r2, r0
 8003432:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <HAL_RCC_ClockConfig+0x260>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	091b      	lsrs	r3, r3, #4
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	490c      	ldr	r1, [pc, #48]	; (8003470 <HAL_RCC_ClockConfig+0x268>)
 800343e:	5ccb      	ldrb	r3, [r1, r3]
 8003440:	f003 031f 	and.w	r3, r3, #31
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
 8003448:	4a0a      	ldr	r2, [pc, #40]	; (8003474 <HAL_RCC_ClockConfig+0x26c>)
 800344a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800344c:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <HAL_RCC_ClockConfig+0x270>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f7fd ffb1 	bl	80013b8 <HAL_InitTick>
 8003456:	4603      	mov	r3, r0
 8003458:	73fb      	strb	r3, [r7, #15]

  return status;
 800345a:	7bfb      	ldrb	r3, [r7, #15]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40022000 	.word	0x40022000
 8003468:	40021000 	.word	0x40021000
 800346c:	04c4b400 	.word	0x04c4b400
 8003470:	08005218 	.word	0x08005218
 8003474:	20000000 	.word	0x20000000
 8003478:	20000004 	.word	0x20000004

0800347c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800347c:	b480      	push	{r7}
 800347e:	b089      	sub	sp, #36	; 0x24
 8003480:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
 8003486:	2300      	movs	r3, #0
 8003488:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800348a:	4b3e      	ldr	r3, [pc, #248]	; (8003584 <HAL_RCC_GetSysClockFreq+0x108>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003494:	4b3b      	ldr	r3, [pc, #236]	; (8003584 <HAL_RCC_GetSysClockFreq+0x108>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_RCC_GetSysClockFreq+0x34>
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	2b0c      	cmp	r3, #12
 80034a8:	d121      	bne.n	80034ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d11e      	bne.n	80034ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034b0:	4b34      	ldr	r3, [pc, #208]	; (8003584 <HAL_RCC_GetSysClockFreq+0x108>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d107      	bne.n	80034cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034bc:	4b31      	ldr	r3, [pc, #196]	; (8003584 <HAL_RCC_GetSysClockFreq+0x108>)
 80034be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034c2:	0a1b      	lsrs	r3, r3, #8
 80034c4:	f003 030f 	and.w	r3, r3, #15
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	e005      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034cc:	4b2d      	ldr	r3, [pc, #180]	; (8003584 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034d8:	4a2b      	ldr	r2, [pc, #172]	; (8003588 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10d      	bne.n	8003504 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034ec:	e00a      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d102      	bne.n	80034fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034f4:	4b25      	ldr	r3, [pc, #148]	; (800358c <HAL_RCC_GetSysClockFreq+0x110>)
 80034f6:	61bb      	str	r3, [r7, #24]
 80034f8:	e004      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d101      	bne.n	8003504 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003500:	4b23      	ldr	r3, [pc, #140]	; (8003590 <HAL_RCC_GetSysClockFreq+0x114>)
 8003502:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	2b0c      	cmp	r3, #12
 8003508:	d134      	bne.n	8003574 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800350a:	4b1e      	ldr	r3, [pc, #120]	; (8003584 <HAL_RCC_GetSysClockFreq+0x108>)
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d003      	beq.n	8003522 <HAL_RCC_GetSysClockFreq+0xa6>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b03      	cmp	r3, #3
 800351e:	d003      	beq.n	8003528 <HAL_RCC_GetSysClockFreq+0xac>
 8003520:	e005      	b.n	800352e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003522:	4b1a      	ldr	r3, [pc, #104]	; (800358c <HAL_RCC_GetSysClockFreq+0x110>)
 8003524:	617b      	str	r3, [r7, #20]
      break;
 8003526:	e005      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003528:	4b19      	ldr	r3, [pc, #100]	; (8003590 <HAL_RCC_GetSysClockFreq+0x114>)
 800352a:	617b      	str	r3, [r7, #20]
      break;
 800352c:	e002      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	617b      	str	r3, [r7, #20]
      break;
 8003532:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003534:	4b13      	ldr	r3, [pc, #76]	; (8003584 <HAL_RCC_GetSysClockFreq+0x108>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	3301      	adds	r3, #1
 8003540:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003542:	4b10      	ldr	r3, [pc, #64]	; (8003584 <HAL_RCC_GetSysClockFreq+0x108>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	0a1b      	lsrs	r3, r3, #8
 8003548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	fb03 f202 	mul.w	r2, r3, r2
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	fbb2 f3f3 	udiv	r3, r2, r3
 8003558:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800355a:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <HAL_RCC_GetSysClockFreq+0x108>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	0e5b      	lsrs	r3, r3, #25
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	3301      	adds	r3, #1
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003572:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003574:	69bb      	ldr	r3, [r7, #24]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3724      	adds	r7, #36	; 0x24
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	08005228 	.word	0x08005228
 800358c:	00f42400 	.word	0x00f42400
 8003590:	007a1200 	.word	0x007a1200

08003594 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003598:	4b03      	ldr	r3, [pc, #12]	; (80035a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800359a:	681b      	ldr	r3, [r3, #0]
}
 800359c:	4618      	mov	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20000000 	.word	0x20000000

080035ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035b4:	2300      	movs	r3, #0
 80035b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035b8:	4b27      	ldr	r3, [pc, #156]	; (8003658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035c4:	f7ff f942 	bl	800284c <HAL_PWREx_GetVoltageRange>
 80035c8:	6178      	str	r0, [r7, #20]
 80035ca:	e014      	b.n	80035f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035cc:	4b22      	ldr	r3, [pc, #136]	; (8003658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d0:	4a21      	ldr	r2, [pc, #132]	; (8003658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d6:	6593      	str	r3, [r2, #88]	; 0x58
 80035d8:	4b1f      	ldr	r3, [pc, #124]	; (8003658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035e4:	f7ff f932 	bl	800284c <HAL_PWREx_GetVoltageRange>
 80035e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035ea:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ee:	4a1a      	ldr	r2, [pc, #104]	; (8003658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035fc:	d10b      	bne.n	8003616 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b80      	cmp	r3, #128	; 0x80
 8003602:	d913      	bls.n	800362c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2ba0      	cmp	r3, #160	; 0xa0
 8003608:	d902      	bls.n	8003610 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800360a:	2302      	movs	r3, #2
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	e00d      	b.n	800362c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003610:	2301      	movs	r3, #1
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	e00a      	b.n	800362c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b7f      	cmp	r3, #127	; 0x7f
 800361a:	d902      	bls.n	8003622 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800361c:	2302      	movs	r3, #2
 800361e:	613b      	str	r3, [r7, #16]
 8003620:	e004      	b.n	800362c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b70      	cmp	r3, #112	; 0x70
 8003626:	d101      	bne.n	800362c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003628:	2301      	movs	r3, #1
 800362a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f023 020f 	bic.w	r2, r3, #15
 8003634:	4909      	ldr	r1, [pc, #36]	; (800365c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800363c:	4b07      	ldr	r3, [pc, #28]	; (800365c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	429a      	cmp	r2, r3
 8003648:	d001      	beq.n	800364e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	40021000 	.word	0x40021000
 800365c:	40022000 	.word	0x40022000

08003660 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003666:	4b2d      	ldr	r3, [pc, #180]	; (800371c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b03      	cmp	r3, #3
 8003674:	d00b      	beq.n	800368e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d825      	bhi.n	80036c8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d008      	beq.n	8003694 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d11f      	bne.n	80036c8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003688:	4b25      	ldr	r3, [pc, #148]	; (8003720 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800368a:	613b      	str	r3, [r7, #16]
    break;
 800368c:	e01f      	b.n	80036ce <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800368e:	4b25      	ldr	r3, [pc, #148]	; (8003724 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003690:	613b      	str	r3, [r7, #16]
    break;
 8003692:	e01c      	b.n	80036ce <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003694:	4b21      	ldr	r3, [pc, #132]	; (800371c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d107      	bne.n	80036b0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036a0:	4b1e      	ldr	r3, [pc, #120]	; (800371c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80036a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036a6:	0a1b      	lsrs	r3, r3, #8
 80036a8:	f003 030f 	and.w	r3, r3, #15
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	e005      	b.n	80036bc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036b0:	4b1a      	ldr	r3, [pc, #104]	; (800371c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	091b      	lsrs	r3, r3, #4
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80036bc:	4a1a      	ldr	r2, [pc, #104]	; (8003728 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c4:	613b      	str	r3, [r7, #16]
    break;
 80036c6:	e002      	b.n	80036ce <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80036c8:	2300      	movs	r3, #0
 80036ca:	613b      	str	r3, [r7, #16]
    break;
 80036cc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036ce:	4b13      	ldr	r3, [pc, #76]	; (800371c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	091b      	lsrs	r3, r3, #4
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	3301      	adds	r3, #1
 80036da:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036dc:	4b0f      	ldr	r3, [pc, #60]	; (800371c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	0a1b      	lsrs	r3, r3, #8
 80036e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	fb03 f202 	mul.w	r2, r3, r2
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	0e5b      	lsrs	r3, r3, #25
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	3301      	adds	r3, #1
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	fbb2 f3f3 	udiv	r3, r2, r3
 800370c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800370e:	683b      	ldr	r3, [r7, #0]
}
 8003710:	4618      	mov	r0, r3
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	40021000 	.word	0x40021000
 8003720:	00f42400 	.word	0x00f42400
 8003724:	007a1200 	.word	0x007a1200
 8003728:	08005228 	.word	0x08005228

0800372c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e049      	b.n	80037d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fd fcd2 	bl	80010fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3304      	adds	r3, #4
 8003768:	4619      	mov	r1, r3
 800376a:	4610      	mov	r0, r2
 800376c:	f000 fb02 	bl	8003d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d001      	beq.n	80037f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e047      	b.n	8003884 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a23      	ldr	r2, [pc, #140]	; (8003890 <HAL_TIM_Base_Start+0xb4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d01d      	beq.n	8003842 <HAL_TIM_Base_Start+0x66>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800380e:	d018      	beq.n	8003842 <HAL_TIM_Base_Start+0x66>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1f      	ldr	r2, [pc, #124]	; (8003894 <HAL_TIM_Base_Start+0xb8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d013      	beq.n	8003842 <HAL_TIM_Base_Start+0x66>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1e      	ldr	r2, [pc, #120]	; (8003898 <HAL_TIM_Base_Start+0xbc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00e      	beq.n	8003842 <HAL_TIM_Base_Start+0x66>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a1c      	ldr	r2, [pc, #112]	; (800389c <HAL_TIM_Base_Start+0xc0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d009      	beq.n	8003842 <HAL_TIM_Base_Start+0x66>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1b      	ldr	r2, [pc, #108]	; (80038a0 <HAL_TIM_Base_Start+0xc4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d004      	beq.n	8003842 <HAL_TIM_Base_Start+0x66>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a19      	ldr	r2, [pc, #100]	; (80038a4 <HAL_TIM_Base_Start+0xc8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d115      	bne.n	800386e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	4b17      	ldr	r3, [pc, #92]	; (80038a8 <HAL_TIM_Base_Start+0xcc>)
 800384a:	4013      	ands	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b06      	cmp	r3, #6
 8003852:	d015      	beq.n	8003880 <HAL_TIM_Base_Start+0xa4>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800385a:	d011      	beq.n	8003880 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386c:	e008      	b.n	8003880 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0201 	orr.w	r2, r2, #1
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	e000      	b.n	8003882 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003880:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	40012c00 	.word	0x40012c00
 8003894:	40000400 	.word	0x40000400
 8003898:	40000800 	.word	0x40000800
 800389c:	40000c00 	.word	0x40000c00
 80038a0:	40013400 	.word	0x40013400
 80038a4:	40014000 	.word	0x40014000
 80038a8:	00010007 	.word	0x00010007

080038ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d001      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e04f      	b.n	8003964 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a23      	ldr	r2, [pc, #140]	; (8003970 <HAL_TIM_Base_Start_IT+0xc4>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d01d      	beq.n	8003922 <HAL_TIM_Base_Start_IT+0x76>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ee:	d018      	beq.n	8003922 <HAL_TIM_Base_Start_IT+0x76>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1f      	ldr	r2, [pc, #124]	; (8003974 <HAL_TIM_Base_Start_IT+0xc8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <HAL_TIM_Base_Start_IT+0x76>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a1e      	ldr	r2, [pc, #120]	; (8003978 <HAL_TIM_Base_Start_IT+0xcc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00e      	beq.n	8003922 <HAL_TIM_Base_Start_IT+0x76>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a1c      	ldr	r2, [pc, #112]	; (800397c <HAL_TIM_Base_Start_IT+0xd0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d009      	beq.n	8003922 <HAL_TIM_Base_Start_IT+0x76>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a1b      	ldr	r2, [pc, #108]	; (8003980 <HAL_TIM_Base_Start_IT+0xd4>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d004      	beq.n	8003922 <HAL_TIM_Base_Start_IT+0x76>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a19      	ldr	r2, [pc, #100]	; (8003984 <HAL_TIM_Base_Start_IT+0xd8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d115      	bne.n	800394e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	4b17      	ldr	r3, [pc, #92]	; (8003988 <HAL_TIM_Base_Start_IT+0xdc>)
 800392a:	4013      	ands	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b06      	cmp	r3, #6
 8003932:	d015      	beq.n	8003960 <HAL_TIM_Base_Start_IT+0xb4>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800393a:	d011      	beq.n	8003960 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800394c:	e008      	b.n	8003960 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 0201 	orr.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	e000      	b.n	8003962 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003960:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	40012c00 	.word	0x40012c00
 8003974:	40000400 	.word	0x40000400
 8003978:	40000800 	.word	0x40000800
 800397c:	40000c00 	.word	0x40000c00
 8003980:	40013400 	.word	0x40013400
 8003984:	40014000 	.word	0x40014000
 8003988:	00010007 	.word	0x00010007

0800398c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d020      	beq.n	80039f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d01b      	beq.n	80039f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0202 	mvn.w	r2, #2
 80039c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f9ad 	bl	8003d36 <HAL_TIM_IC_CaptureCallback>
 80039dc:	e005      	b.n	80039ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f99f 	bl	8003d22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f9b0 	bl	8003d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d020      	beq.n	8003a3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01b      	beq.n	8003a3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0204 	mvn.w	r2, #4
 8003a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2202      	movs	r2, #2
 8003a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f987 	bl	8003d36 <HAL_TIM_IC_CaptureCallback>
 8003a28:	e005      	b.n	8003a36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f979 	bl	8003d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f98a 	bl	8003d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d020      	beq.n	8003a88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d01b      	beq.n	8003a88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0208 	mvn.w	r2, #8
 8003a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2204      	movs	r2, #4
 8003a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f961 	bl	8003d36 <HAL_TIM_IC_CaptureCallback>
 8003a74:	e005      	b.n	8003a82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f953 	bl	8003d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f964 	bl	8003d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d020      	beq.n	8003ad4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f003 0310 	and.w	r3, r3, #16
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d01b      	beq.n	8003ad4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f06f 0210 	mvn.w	r2, #16
 8003aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2208      	movs	r2, #8
 8003aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f93b 	bl	8003d36 <HAL_TIM_IC_CaptureCallback>
 8003ac0:	e005      	b.n	8003ace <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f92d 	bl	8003d22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f93e 	bl	8003d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00c      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d007      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0201 	mvn.w	r2, #1
 8003af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fd f9b0 	bl	8000e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00c      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d007      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 faf2 	bl	8004100 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00c      	beq.n	8003b40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 faea 	bl	8004114 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00c      	beq.n	8003b64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d007      	beq.n	8003b64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f8fd 	bl	8003d5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00c      	beq.n	8003b88 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d007      	beq.n	8003b88 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0220 	mvn.w	r2, #32
 8003b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fab2 	bl	80040ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b88:	bf00      	nop
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <HAL_TIM_ConfigClockSource+0x1c>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e0b6      	b.n	8003d1a <HAL_TIM_ConfigClockSource+0x18a>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003be8:	d03e      	beq.n	8003c68 <HAL_TIM_ConfigClockSource+0xd8>
 8003bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bee:	f200 8087 	bhi.w	8003d00 <HAL_TIM_ConfigClockSource+0x170>
 8003bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf6:	f000 8086 	beq.w	8003d06 <HAL_TIM_ConfigClockSource+0x176>
 8003bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfe:	d87f      	bhi.n	8003d00 <HAL_TIM_ConfigClockSource+0x170>
 8003c00:	2b70      	cmp	r3, #112	; 0x70
 8003c02:	d01a      	beq.n	8003c3a <HAL_TIM_ConfigClockSource+0xaa>
 8003c04:	2b70      	cmp	r3, #112	; 0x70
 8003c06:	d87b      	bhi.n	8003d00 <HAL_TIM_ConfigClockSource+0x170>
 8003c08:	2b60      	cmp	r3, #96	; 0x60
 8003c0a:	d050      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0x11e>
 8003c0c:	2b60      	cmp	r3, #96	; 0x60
 8003c0e:	d877      	bhi.n	8003d00 <HAL_TIM_ConfigClockSource+0x170>
 8003c10:	2b50      	cmp	r3, #80	; 0x50
 8003c12:	d03c      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0xfe>
 8003c14:	2b50      	cmp	r3, #80	; 0x50
 8003c16:	d873      	bhi.n	8003d00 <HAL_TIM_ConfigClockSource+0x170>
 8003c18:	2b40      	cmp	r3, #64	; 0x40
 8003c1a:	d058      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x13e>
 8003c1c:	2b40      	cmp	r3, #64	; 0x40
 8003c1e:	d86f      	bhi.n	8003d00 <HAL_TIM_ConfigClockSource+0x170>
 8003c20:	2b30      	cmp	r3, #48	; 0x30
 8003c22:	d064      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0x15e>
 8003c24:	2b30      	cmp	r3, #48	; 0x30
 8003c26:	d86b      	bhi.n	8003d00 <HAL_TIM_ConfigClockSource+0x170>
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d060      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0x15e>
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d867      	bhi.n	8003d00 <HAL_TIM_ConfigClockSource+0x170>
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d05c      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0x15e>
 8003c34:	2b10      	cmp	r3, #16
 8003c36:	d05a      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0x15e>
 8003c38:	e062      	b.n	8003d00 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c4a:	f000 f9a7 	bl	8003f9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	609a      	str	r2, [r3, #8]
      break;
 8003c66:	e04f      	b.n	8003d08 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c78:	f000 f990 	bl	8003f9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c8a:	609a      	str	r2, [r3, #8]
      break;
 8003c8c:	e03c      	b.n	8003d08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f000 f904 	bl	8003ea8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2150      	movs	r1, #80	; 0x50
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f95d 	bl	8003f66 <TIM_ITRx_SetConfig>
      break;
 8003cac:	e02c      	b.n	8003d08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f000 f923 	bl	8003f06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2160      	movs	r1, #96	; 0x60
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 f94d 	bl	8003f66 <TIM_ITRx_SetConfig>
      break;
 8003ccc:	e01c      	b.n	8003d08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f000 f8e4 	bl	8003ea8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2140      	movs	r1, #64	; 0x40
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 f93d 	bl	8003f66 <TIM_ITRx_SetConfig>
      break;
 8003cec:	e00c      	b.n	8003d08 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4610      	mov	r0, r2
 8003cfa:	f000 f934 	bl	8003f66 <TIM_ITRx_SetConfig>
      break;
 8003cfe:	e003      	b.n	8003d08 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	73fb      	strb	r3, [r7, #15]
      break;
 8003d04:	e000      	b.n	8003d08 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003d06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
	...

08003d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a40      	ldr	r2, [pc, #256]	; (8003e88 <TIM_Base_SetConfig+0x114>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d013      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d92:	d00f      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a3d      	ldr	r2, [pc, #244]	; (8003e8c <TIM_Base_SetConfig+0x118>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00b      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a3c      	ldr	r2, [pc, #240]	; (8003e90 <TIM_Base_SetConfig+0x11c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d007      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a3b      	ldr	r2, [pc, #236]	; (8003e94 <TIM_Base_SetConfig+0x120>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d003      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a3a      	ldr	r2, [pc, #232]	; (8003e98 <TIM_Base_SetConfig+0x124>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d108      	bne.n	8003dc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a2f      	ldr	r2, [pc, #188]	; (8003e88 <TIM_Base_SetConfig+0x114>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d01f      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd4:	d01b      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a2c      	ldr	r2, [pc, #176]	; (8003e8c <TIM_Base_SetConfig+0x118>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d017      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a2b      	ldr	r2, [pc, #172]	; (8003e90 <TIM_Base_SetConfig+0x11c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d013      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a2a      	ldr	r2, [pc, #168]	; (8003e94 <TIM_Base_SetConfig+0x120>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00f      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a29      	ldr	r2, [pc, #164]	; (8003e98 <TIM_Base_SetConfig+0x124>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00b      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a28      	ldr	r2, [pc, #160]	; (8003e9c <TIM_Base_SetConfig+0x128>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d007      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a27      	ldr	r2, [pc, #156]	; (8003ea0 <TIM_Base_SetConfig+0x12c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d003      	beq.n	8003e0e <TIM_Base_SetConfig+0x9a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a26      	ldr	r2, [pc, #152]	; (8003ea4 <TIM_Base_SetConfig+0x130>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d108      	bne.n	8003e20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a10      	ldr	r2, [pc, #64]	; (8003e88 <TIM_Base_SetConfig+0x114>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d00f      	beq.n	8003e6c <TIM_Base_SetConfig+0xf8>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a12      	ldr	r2, [pc, #72]	; (8003e98 <TIM_Base_SetConfig+0x124>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00b      	beq.n	8003e6c <TIM_Base_SetConfig+0xf8>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a11      	ldr	r2, [pc, #68]	; (8003e9c <TIM_Base_SetConfig+0x128>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d007      	beq.n	8003e6c <TIM_Base_SetConfig+0xf8>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a10      	ldr	r2, [pc, #64]	; (8003ea0 <TIM_Base_SetConfig+0x12c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d003      	beq.n	8003e6c <TIM_Base_SetConfig+0xf8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a0f      	ldr	r2, [pc, #60]	; (8003ea4 <TIM_Base_SetConfig+0x130>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d103      	bne.n	8003e74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	615a      	str	r2, [r3, #20]
}
 8003e7a:	bf00      	nop
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40012c00 	.word	0x40012c00
 8003e8c:	40000400 	.word	0x40000400
 8003e90:	40000800 	.word	0x40000800
 8003e94:	40000c00 	.word	0x40000c00
 8003e98:	40013400 	.word	0x40013400
 8003e9c:	40014000 	.word	0x40014000
 8003ea0:	40014400 	.word	0x40014400
 8003ea4:	40014800 	.word	0x40014800

08003ea8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f023 0201 	bic.w	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f023 030a 	bic.w	r3, r3, #10
 8003ee4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	621a      	str	r2, [r3, #32]
}
 8003efa:	bf00      	nop
 8003efc:	371c      	adds	r7, #28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b087      	sub	sp, #28
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	60f8      	str	r0, [r7, #12]
 8003f0e:	60b9      	str	r1, [r7, #8]
 8003f10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	f023 0210 	bic.w	r2, r3, #16
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	031b      	lsls	r3, r3, #12
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	621a      	str	r2, [r3, #32]
}
 8003f5a:	bf00      	nop
 8003f5c:	371c      	adds	r7, #28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b085      	sub	sp, #20
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f043 0307 	orr.w	r3, r3, #7
 8003f88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	609a      	str	r2, [r3, #8]
}
 8003f90:	bf00      	nop
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	021a      	lsls	r2, r3, #8
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	609a      	str	r2, [r3, #8]
}
 8003fd0:	bf00      	nop
 8003fd2:	371c      	adds	r7, #28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e068      	b.n	80040c6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a2e      	ldr	r2, [pc, #184]	; (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d004      	beq.n	8004028 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a2d      	ldr	r2, [pc, #180]	; (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d108      	bne.n	800403a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800402e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004040:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1e      	ldr	r2, [pc, #120]	; (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d01d      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004066:	d018      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1b      	ldr	r2, [pc, #108]	; (80040dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d013      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1a      	ldr	r2, [pc, #104]	; (80040e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00e      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a18      	ldr	r2, [pc, #96]	; (80040e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d009      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a13      	ldr	r2, [pc, #76]	; (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d004      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a14      	ldr	r2, [pc, #80]	; (80040e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d10c      	bne.n	80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40012c00 	.word	0x40012c00
 80040d8:	40013400 	.word	0x40013400
 80040dc:	40000400 	.word	0x40000400
 80040e0:	40000800 	.word	0x40000800
 80040e4:	40000c00 	.word	0x40000c00
 80040e8:	40014000 	.word	0x40014000

080040ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <memset>:
 8004128:	4402      	add	r2, r0
 800412a:	4603      	mov	r3, r0
 800412c:	4293      	cmp	r3, r2
 800412e:	d100      	bne.n	8004132 <memset+0xa>
 8004130:	4770      	bx	lr
 8004132:	f803 1b01 	strb.w	r1, [r3], #1
 8004136:	e7f9      	b.n	800412c <memset+0x4>

08004138 <__libc_init_array>:
 8004138:	b570      	push	{r4, r5, r6, lr}
 800413a:	4d0d      	ldr	r5, [pc, #52]	; (8004170 <__libc_init_array+0x38>)
 800413c:	4c0d      	ldr	r4, [pc, #52]	; (8004174 <__libc_init_array+0x3c>)
 800413e:	1b64      	subs	r4, r4, r5
 8004140:	10a4      	asrs	r4, r4, #2
 8004142:	2600      	movs	r6, #0
 8004144:	42a6      	cmp	r6, r4
 8004146:	d109      	bne.n	800415c <__libc_init_array+0x24>
 8004148:	4d0b      	ldr	r5, [pc, #44]	; (8004178 <__libc_init_array+0x40>)
 800414a:	4c0c      	ldr	r4, [pc, #48]	; (800417c <__libc_init_array+0x44>)
 800414c:	f001 f858 	bl	8005200 <_init>
 8004150:	1b64      	subs	r4, r4, r5
 8004152:	10a4      	asrs	r4, r4, #2
 8004154:	2600      	movs	r6, #0
 8004156:	42a6      	cmp	r6, r4
 8004158:	d105      	bne.n	8004166 <__libc_init_array+0x2e>
 800415a:	bd70      	pop	{r4, r5, r6, pc}
 800415c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004160:	4798      	blx	r3
 8004162:	3601      	adds	r6, #1
 8004164:	e7ee      	b.n	8004144 <__libc_init_array+0xc>
 8004166:	f855 3b04 	ldr.w	r3, [r5], #4
 800416a:	4798      	blx	r3
 800416c:	3601      	adds	r6, #1
 800416e:	e7f2      	b.n	8004156 <__libc_init_array+0x1e>
 8004170:	08005430 	.word	0x08005430
 8004174:	08005430 	.word	0x08005430
 8004178:	08005430 	.word	0x08005430
 800417c:	08005434 	.word	0x08005434

08004180 <sin>:
 8004180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004182:	ec53 2b10 	vmov	r2, r3, d0
 8004186:	4828      	ldr	r0, [pc, #160]	; (8004228 <sin+0xa8>)
 8004188:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800418c:	4281      	cmp	r1, r0
 800418e:	dc07      	bgt.n	80041a0 <sin+0x20>
 8004190:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8004220 <sin+0xa0>
 8004194:	2000      	movs	r0, #0
 8004196:	b005      	add	sp, #20
 8004198:	f85d eb04 	ldr.w	lr, [sp], #4
 800419c:	f000 b910 	b.w	80043c0 <__kernel_sin>
 80041a0:	4822      	ldr	r0, [pc, #136]	; (800422c <sin+0xac>)
 80041a2:	4281      	cmp	r1, r0
 80041a4:	dd09      	ble.n	80041ba <sin+0x3a>
 80041a6:	ee10 0a10 	vmov	r0, s0
 80041aa:	4619      	mov	r1, r3
 80041ac:	f7fc f82c 	bl	8000208 <__aeabi_dsub>
 80041b0:	ec41 0b10 	vmov	d0, r0, r1
 80041b4:	b005      	add	sp, #20
 80041b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80041ba:	4668      	mov	r0, sp
 80041bc:	f000 f9c0 	bl	8004540 <__ieee754_rem_pio2>
 80041c0:	f000 0003 	and.w	r0, r0, #3
 80041c4:	2801      	cmp	r0, #1
 80041c6:	d00c      	beq.n	80041e2 <sin+0x62>
 80041c8:	2802      	cmp	r0, #2
 80041ca:	d011      	beq.n	80041f0 <sin+0x70>
 80041cc:	b9f0      	cbnz	r0, 800420c <sin+0x8c>
 80041ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80041d2:	ed9d 0b00 	vldr	d0, [sp]
 80041d6:	2001      	movs	r0, #1
 80041d8:	f000 f8f2 	bl	80043c0 <__kernel_sin>
 80041dc:	ec51 0b10 	vmov	r0, r1, d0
 80041e0:	e7e6      	b.n	80041b0 <sin+0x30>
 80041e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80041e6:	ed9d 0b00 	vldr	d0, [sp]
 80041ea:	f000 f821 	bl	8004230 <__kernel_cos>
 80041ee:	e7f5      	b.n	80041dc <sin+0x5c>
 80041f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80041f4:	ed9d 0b00 	vldr	d0, [sp]
 80041f8:	2001      	movs	r0, #1
 80041fa:	f000 f8e1 	bl	80043c0 <__kernel_sin>
 80041fe:	ec53 2b10 	vmov	r2, r3, d0
 8004202:	ee10 0a10 	vmov	r0, s0
 8004206:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800420a:	e7d1      	b.n	80041b0 <sin+0x30>
 800420c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004210:	ed9d 0b00 	vldr	d0, [sp]
 8004214:	f000 f80c 	bl	8004230 <__kernel_cos>
 8004218:	e7f1      	b.n	80041fe <sin+0x7e>
 800421a:	bf00      	nop
 800421c:	f3af 8000 	nop.w
	...
 8004228:	3fe921fb 	.word	0x3fe921fb
 800422c:	7fefffff 	.word	0x7fefffff

08004230 <__kernel_cos>:
 8004230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004234:	ec57 6b10 	vmov	r6, r7, d0
 8004238:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800423c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004240:	ed8d 1b00 	vstr	d1, [sp]
 8004244:	da07      	bge.n	8004256 <__kernel_cos+0x26>
 8004246:	ee10 0a10 	vmov	r0, s0
 800424a:	4639      	mov	r1, r7
 800424c:	f7fc fc2e 	bl	8000aac <__aeabi_d2iz>
 8004250:	2800      	cmp	r0, #0
 8004252:	f000 8088 	beq.w	8004366 <__kernel_cos+0x136>
 8004256:	4632      	mov	r2, r6
 8004258:	463b      	mov	r3, r7
 800425a:	4630      	mov	r0, r6
 800425c:	4639      	mov	r1, r7
 800425e:	f7fc f98b 	bl	8000578 <__aeabi_dmul>
 8004262:	4b51      	ldr	r3, [pc, #324]	; (80043a8 <__kernel_cos+0x178>)
 8004264:	2200      	movs	r2, #0
 8004266:	4604      	mov	r4, r0
 8004268:	460d      	mov	r5, r1
 800426a:	f7fc f985 	bl	8000578 <__aeabi_dmul>
 800426e:	a340      	add	r3, pc, #256	; (adr r3, 8004370 <__kernel_cos+0x140>)
 8004270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004274:	4682      	mov	sl, r0
 8004276:	468b      	mov	fp, r1
 8004278:	4620      	mov	r0, r4
 800427a:	4629      	mov	r1, r5
 800427c:	f7fc f97c 	bl	8000578 <__aeabi_dmul>
 8004280:	a33d      	add	r3, pc, #244	; (adr r3, 8004378 <__kernel_cos+0x148>)
 8004282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004286:	f7fb ffc1 	bl	800020c <__adddf3>
 800428a:	4622      	mov	r2, r4
 800428c:	462b      	mov	r3, r5
 800428e:	f7fc f973 	bl	8000578 <__aeabi_dmul>
 8004292:	a33b      	add	r3, pc, #236	; (adr r3, 8004380 <__kernel_cos+0x150>)
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	f7fb ffb6 	bl	8000208 <__aeabi_dsub>
 800429c:	4622      	mov	r2, r4
 800429e:	462b      	mov	r3, r5
 80042a0:	f7fc f96a 	bl	8000578 <__aeabi_dmul>
 80042a4:	a338      	add	r3, pc, #224	; (adr r3, 8004388 <__kernel_cos+0x158>)
 80042a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042aa:	f7fb ffaf 	bl	800020c <__adddf3>
 80042ae:	4622      	mov	r2, r4
 80042b0:	462b      	mov	r3, r5
 80042b2:	f7fc f961 	bl	8000578 <__aeabi_dmul>
 80042b6:	a336      	add	r3, pc, #216	; (adr r3, 8004390 <__kernel_cos+0x160>)
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	f7fb ffa4 	bl	8000208 <__aeabi_dsub>
 80042c0:	4622      	mov	r2, r4
 80042c2:	462b      	mov	r3, r5
 80042c4:	f7fc f958 	bl	8000578 <__aeabi_dmul>
 80042c8:	a333      	add	r3, pc, #204	; (adr r3, 8004398 <__kernel_cos+0x168>)
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	f7fb ff9d 	bl	800020c <__adddf3>
 80042d2:	4622      	mov	r2, r4
 80042d4:	462b      	mov	r3, r5
 80042d6:	f7fc f94f 	bl	8000578 <__aeabi_dmul>
 80042da:	4622      	mov	r2, r4
 80042dc:	462b      	mov	r3, r5
 80042de:	f7fc f94b 	bl	8000578 <__aeabi_dmul>
 80042e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042e6:	4604      	mov	r4, r0
 80042e8:	460d      	mov	r5, r1
 80042ea:	4630      	mov	r0, r6
 80042ec:	4639      	mov	r1, r7
 80042ee:	f7fc f943 	bl	8000578 <__aeabi_dmul>
 80042f2:	460b      	mov	r3, r1
 80042f4:	4602      	mov	r2, r0
 80042f6:	4629      	mov	r1, r5
 80042f8:	4620      	mov	r0, r4
 80042fa:	f7fb ff85 	bl	8000208 <__aeabi_dsub>
 80042fe:	4b2b      	ldr	r3, [pc, #172]	; (80043ac <__kernel_cos+0x17c>)
 8004300:	4598      	cmp	r8, r3
 8004302:	4606      	mov	r6, r0
 8004304:	460f      	mov	r7, r1
 8004306:	dc10      	bgt.n	800432a <__kernel_cos+0xfa>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4650      	mov	r0, sl
 800430e:	4659      	mov	r1, fp
 8004310:	f7fb ff7a 	bl	8000208 <__aeabi_dsub>
 8004314:	460b      	mov	r3, r1
 8004316:	4926      	ldr	r1, [pc, #152]	; (80043b0 <__kernel_cos+0x180>)
 8004318:	4602      	mov	r2, r0
 800431a:	2000      	movs	r0, #0
 800431c:	f7fb ff74 	bl	8000208 <__aeabi_dsub>
 8004320:	ec41 0b10 	vmov	d0, r0, r1
 8004324:	b003      	add	sp, #12
 8004326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800432a:	4b22      	ldr	r3, [pc, #136]	; (80043b4 <__kernel_cos+0x184>)
 800432c:	4920      	ldr	r1, [pc, #128]	; (80043b0 <__kernel_cos+0x180>)
 800432e:	4598      	cmp	r8, r3
 8004330:	bfcc      	ite	gt
 8004332:	4d21      	ldrgt	r5, [pc, #132]	; (80043b8 <__kernel_cos+0x188>)
 8004334:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004338:	2400      	movs	r4, #0
 800433a:	4622      	mov	r2, r4
 800433c:	462b      	mov	r3, r5
 800433e:	2000      	movs	r0, #0
 8004340:	f7fb ff62 	bl	8000208 <__aeabi_dsub>
 8004344:	4622      	mov	r2, r4
 8004346:	4680      	mov	r8, r0
 8004348:	4689      	mov	r9, r1
 800434a:	462b      	mov	r3, r5
 800434c:	4650      	mov	r0, sl
 800434e:	4659      	mov	r1, fp
 8004350:	f7fb ff5a 	bl	8000208 <__aeabi_dsub>
 8004354:	4632      	mov	r2, r6
 8004356:	463b      	mov	r3, r7
 8004358:	f7fb ff56 	bl	8000208 <__aeabi_dsub>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	4640      	mov	r0, r8
 8004362:	4649      	mov	r1, r9
 8004364:	e7da      	b.n	800431c <__kernel_cos+0xec>
 8004366:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80043a0 <__kernel_cos+0x170>
 800436a:	e7db      	b.n	8004324 <__kernel_cos+0xf4>
 800436c:	f3af 8000 	nop.w
 8004370:	be8838d4 	.word	0xbe8838d4
 8004374:	bda8fae9 	.word	0xbda8fae9
 8004378:	bdb4b1c4 	.word	0xbdb4b1c4
 800437c:	3e21ee9e 	.word	0x3e21ee9e
 8004380:	809c52ad 	.word	0x809c52ad
 8004384:	3e927e4f 	.word	0x3e927e4f
 8004388:	19cb1590 	.word	0x19cb1590
 800438c:	3efa01a0 	.word	0x3efa01a0
 8004390:	16c15177 	.word	0x16c15177
 8004394:	3f56c16c 	.word	0x3f56c16c
 8004398:	5555554c 	.word	0x5555554c
 800439c:	3fa55555 	.word	0x3fa55555
 80043a0:	00000000 	.word	0x00000000
 80043a4:	3ff00000 	.word	0x3ff00000
 80043a8:	3fe00000 	.word	0x3fe00000
 80043ac:	3fd33332 	.word	0x3fd33332
 80043b0:	3ff00000 	.word	0x3ff00000
 80043b4:	3fe90000 	.word	0x3fe90000
 80043b8:	3fd20000 	.word	0x3fd20000
 80043bc:	00000000 	.word	0x00000000

080043c0 <__kernel_sin>:
 80043c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043c4:	ed2d 8b04 	vpush	{d8-d9}
 80043c8:	eeb0 8a41 	vmov.f32	s16, s2
 80043cc:	eef0 8a61 	vmov.f32	s17, s3
 80043d0:	ec55 4b10 	vmov	r4, r5, d0
 80043d4:	b083      	sub	sp, #12
 80043d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80043da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80043de:	9001      	str	r0, [sp, #4]
 80043e0:	da06      	bge.n	80043f0 <__kernel_sin+0x30>
 80043e2:	ee10 0a10 	vmov	r0, s0
 80043e6:	4629      	mov	r1, r5
 80043e8:	f7fc fb60 	bl	8000aac <__aeabi_d2iz>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	d051      	beq.n	8004494 <__kernel_sin+0xd4>
 80043f0:	4622      	mov	r2, r4
 80043f2:	462b      	mov	r3, r5
 80043f4:	4620      	mov	r0, r4
 80043f6:	4629      	mov	r1, r5
 80043f8:	f7fc f8be 	bl	8000578 <__aeabi_dmul>
 80043fc:	4682      	mov	sl, r0
 80043fe:	468b      	mov	fp, r1
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4620      	mov	r0, r4
 8004406:	4629      	mov	r1, r5
 8004408:	f7fc f8b6 	bl	8000578 <__aeabi_dmul>
 800440c:	a341      	add	r3, pc, #260	; (adr r3, 8004514 <__kernel_sin+0x154>)
 800440e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004412:	4680      	mov	r8, r0
 8004414:	4689      	mov	r9, r1
 8004416:	4650      	mov	r0, sl
 8004418:	4659      	mov	r1, fp
 800441a:	f7fc f8ad 	bl	8000578 <__aeabi_dmul>
 800441e:	a33f      	add	r3, pc, #252	; (adr r3, 800451c <__kernel_sin+0x15c>)
 8004420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004424:	f7fb fef0 	bl	8000208 <__aeabi_dsub>
 8004428:	4652      	mov	r2, sl
 800442a:	465b      	mov	r3, fp
 800442c:	f7fc f8a4 	bl	8000578 <__aeabi_dmul>
 8004430:	a33c      	add	r3, pc, #240	; (adr r3, 8004524 <__kernel_sin+0x164>)
 8004432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004436:	f7fb fee9 	bl	800020c <__adddf3>
 800443a:	4652      	mov	r2, sl
 800443c:	465b      	mov	r3, fp
 800443e:	f7fc f89b 	bl	8000578 <__aeabi_dmul>
 8004442:	a33a      	add	r3, pc, #232	; (adr r3, 800452c <__kernel_sin+0x16c>)
 8004444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004448:	f7fb fede 	bl	8000208 <__aeabi_dsub>
 800444c:	4652      	mov	r2, sl
 800444e:	465b      	mov	r3, fp
 8004450:	f7fc f892 	bl	8000578 <__aeabi_dmul>
 8004454:	a337      	add	r3, pc, #220	; (adr r3, 8004534 <__kernel_sin+0x174>)
 8004456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445a:	f7fb fed7 	bl	800020c <__adddf3>
 800445e:	9b01      	ldr	r3, [sp, #4]
 8004460:	4606      	mov	r6, r0
 8004462:	460f      	mov	r7, r1
 8004464:	b9eb      	cbnz	r3, 80044a2 <__kernel_sin+0xe2>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4650      	mov	r0, sl
 800446c:	4659      	mov	r1, fp
 800446e:	f7fc f883 	bl	8000578 <__aeabi_dmul>
 8004472:	a325      	add	r3, pc, #148	; (adr r3, 8004508 <__kernel_sin+0x148>)
 8004474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004478:	f7fb fec6 	bl	8000208 <__aeabi_dsub>
 800447c:	4642      	mov	r2, r8
 800447e:	464b      	mov	r3, r9
 8004480:	f7fc f87a 	bl	8000578 <__aeabi_dmul>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4620      	mov	r0, r4
 800448a:	4629      	mov	r1, r5
 800448c:	f7fb febe 	bl	800020c <__adddf3>
 8004490:	4604      	mov	r4, r0
 8004492:	460d      	mov	r5, r1
 8004494:	ec45 4b10 	vmov	d0, r4, r5
 8004498:	b003      	add	sp, #12
 800449a:	ecbd 8b04 	vpop	{d8-d9}
 800449e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044a2:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <__kernel_sin+0x150>)
 80044a4:	ec51 0b18 	vmov	r0, r1, d8
 80044a8:	2200      	movs	r2, #0
 80044aa:	f7fc f865 	bl	8000578 <__aeabi_dmul>
 80044ae:	4632      	mov	r2, r6
 80044b0:	ec41 0b19 	vmov	d9, r0, r1
 80044b4:	463b      	mov	r3, r7
 80044b6:	4640      	mov	r0, r8
 80044b8:	4649      	mov	r1, r9
 80044ba:	f7fc f85d 	bl	8000578 <__aeabi_dmul>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	ec51 0b19 	vmov	r0, r1, d9
 80044c6:	f7fb fe9f 	bl	8000208 <__aeabi_dsub>
 80044ca:	4652      	mov	r2, sl
 80044cc:	465b      	mov	r3, fp
 80044ce:	f7fc f853 	bl	8000578 <__aeabi_dmul>
 80044d2:	ec53 2b18 	vmov	r2, r3, d8
 80044d6:	f7fb fe97 	bl	8000208 <__aeabi_dsub>
 80044da:	a30b      	add	r3, pc, #44	; (adr r3, 8004508 <__kernel_sin+0x148>)
 80044dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e0:	4606      	mov	r6, r0
 80044e2:	460f      	mov	r7, r1
 80044e4:	4640      	mov	r0, r8
 80044e6:	4649      	mov	r1, r9
 80044e8:	f7fc f846 	bl	8000578 <__aeabi_dmul>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4630      	mov	r0, r6
 80044f2:	4639      	mov	r1, r7
 80044f4:	f7fb fe8a 	bl	800020c <__adddf3>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4620      	mov	r0, r4
 80044fe:	4629      	mov	r1, r5
 8004500:	f7fb fe82 	bl	8000208 <__aeabi_dsub>
 8004504:	e7c4      	b.n	8004490 <__kernel_sin+0xd0>
 8004506:	bf00      	nop
 8004508:	55555549 	.word	0x55555549
 800450c:	3fc55555 	.word	0x3fc55555
 8004510:	3fe00000 	.word	0x3fe00000
 8004514:	5acfd57c 	.word	0x5acfd57c
 8004518:	3de5d93a 	.word	0x3de5d93a
 800451c:	8a2b9ceb 	.word	0x8a2b9ceb
 8004520:	3e5ae5e6 	.word	0x3e5ae5e6
 8004524:	57b1fe7d 	.word	0x57b1fe7d
 8004528:	3ec71de3 	.word	0x3ec71de3
 800452c:	19c161d5 	.word	0x19c161d5
 8004530:	3f2a01a0 	.word	0x3f2a01a0
 8004534:	1110f8a6 	.word	0x1110f8a6
 8004538:	3f811111 	.word	0x3f811111
 800453c:	00000000 	.word	0x00000000

08004540 <__ieee754_rem_pio2>:
 8004540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004544:	ed2d 8b02 	vpush	{d8}
 8004548:	ec55 4b10 	vmov	r4, r5, d0
 800454c:	4bca      	ldr	r3, [pc, #808]	; (8004878 <__ieee754_rem_pio2+0x338>)
 800454e:	b08b      	sub	sp, #44	; 0x2c
 8004550:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004554:	4598      	cmp	r8, r3
 8004556:	4682      	mov	sl, r0
 8004558:	9502      	str	r5, [sp, #8]
 800455a:	dc08      	bgt.n	800456e <__ieee754_rem_pio2+0x2e>
 800455c:	2200      	movs	r2, #0
 800455e:	2300      	movs	r3, #0
 8004560:	ed80 0b00 	vstr	d0, [r0]
 8004564:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004568:	f04f 0b00 	mov.w	fp, #0
 800456c:	e028      	b.n	80045c0 <__ieee754_rem_pio2+0x80>
 800456e:	4bc3      	ldr	r3, [pc, #780]	; (800487c <__ieee754_rem_pio2+0x33c>)
 8004570:	4598      	cmp	r8, r3
 8004572:	dc78      	bgt.n	8004666 <__ieee754_rem_pio2+0x126>
 8004574:	9b02      	ldr	r3, [sp, #8]
 8004576:	4ec2      	ldr	r6, [pc, #776]	; (8004880 <__ieee754_rem_pio2+0x340>)
 8004578:	2b00      	cmp	r3, #0
 800457a:	ee10 0a10 	vmov	r0, s0
 800457e:	a3b0      	add	r3, pc, #704	; (adr r3, 8004840 <__ieee754_rem_pio2+0x300>)
 8004580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004584:	4629      	mov	r1, r5
 8004586:	dd39      	ble.n	80045fc <__ieee754_rem_pio2+0xbc>
 8004588:	f7fb fe3e 	bl	8000208 <__aeabi_dsub>
 800458c:	45b0      	cmp	r8, r6
 800458e:	4604      	mov	r4, r0
 8004590:	460d      	mov	r5, r1
 8004592:	d01b      	beq.n	80045cc <__ieee754_rem_pio2+0x8c>
 8004594:	a3ac      	add	r3, pc, #688	; (adr r3, 8004848 <__ieee754_rem_pio2+0x308>)
 8004596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459a:	f7fb fe35 	bl	8000208 <__aeabi_dsub>
 800459e:	4602      	mov	r2, r0
 80045a0:	460b      	mov	r3, r1
 80045a2:	e9ca 2300 	strd	r2, r3, [sl]
 80045a6:	4620      	mov	r0, r4
 80045a8:	4629      	mov	r1, r5
 80045aa:	f7fb fe2d 	bl	8000208 <__aeabi_dsub>
 80045ae:	a3a6      	add	r3, pc, #664	; (adr r3, 8004848 <__ieee754_rem_pio2+0x308>)
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f7fb fe28 	bl	8000208 <__aeabi_dsub>
 80045b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80045bc:	f04f 0b01 	mov.w	fp, #1
 80045c0:	4658      	mov	r0, fp
 80045c2:	b00b      	add	sp, #44	; 0x2c
 80045c4:	ecbd 8b02 	vpop	{d8}
 80045c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045cc:	a3a0      	add	r3, pc, #640	; (adr r3, 8004850 <__ieee754_rem_pio2+0x310>)
 80045ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d2:	f7fb fe19 	bl	8000208 <__aeabi_dsub>
 80045d6:	a3a0      	add	r3, pc, #640	; (adr r3, 8004858 <__ieee754_rem_pio2+0x318>)
 80045d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045dc:	4604      	mov	r4, r0
 80045de:	460d      	mov	r5, r1
 80045e0:	f7fb fe12 	bl	8000208 <__aeabi_dsub>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	e9ca 2300 	strd	r2, r3, [sl]
 80045ec:	4620      	mov	r0, r4
 80045ee:	4629      	mov	r1, r5
 80045f0:	f7fb fe0a 	bl	8000208 <__aeabi_dsub>
 80045f4:	a398      	add	r3, pc, #608	; (adr r3, 8004858 <__ieee754_rem_pio2+0x318>)
 80045f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fa:	e7db      	b.n	80045b4 <__ieee754_rem_pio2+0x74>
 80045fc:	f7fb fe06 	bl	800020c <__adddf3>
 8004600:	45b0      	cmp	r8, r6
 8004602:	4604      	mov	r4, r0
 8004604:	460d      	mov	r5, r1
 8004606:	d016      	beq.n	8004636 <__ieee754_rem_pio2+0xf6>
 8004608:	a38f      	add	r3, pc, #572	; (adr r3, 8004848 <__ieee754_rem_pio2+0x308>)
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	f7fb fdfd 	bl	800020c <__adddf3>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	e9ca 2300 	strd	r2, r3, [sl]
 800461a:	4620      	mov	r0, r4
 800461c:	4629      	mov	r1, r5
 800461e:	f7fb fdf3 	bl	8000208 <__aeabi_dsub>
 8004622:	a389      	add	r3, pc, #548	; (adr r3, 8004848 <__ieee754_rem_pio2+0x308>)
 8004624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004628:	f7fb fdf0 	bl	800020c <__adddf3>
 800462c:	f04f 3bff 	mov.w	fp, #4294967295
 8004630:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004634:	e7c4      	b.n	80045c0 <__ieee754_rem_pio2+0x80>
 8004636:	a386      	add	r3, pc, #536	; (adr r3, 8004850 <__ieee754_rem_pio2+0x310>)
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	f7fb fde6 	bl	800020c <__adddf3>
 8004640:	a385      	add	r3, pc, #532	; (adr r3, 8004858 <__ieee754_rem_pio2+0x318>)
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	4604      	mov	r4, r0
 8004648:	460d      	mov	r5, r1
 800464a:	f7fb fddf 	bl	800020c <__adddf3>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	e9ca 2300 	strd	r2, r3, [sl]
 8004656:	4620      	mov	r0, r4
 8004658:	4629      	mov	r1, r5
 800465a:	f7fb fdd5 	bl	8000208 <__aeabi_dsub>
 800465e:	a37e      	add	r3, pc, #504	; (adr r3, 8004858 <__ieee754_rem_pio2+0x318>)
 8004660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004664:	e7e0      	b.n	8004628 <__ieee754_rem_pio2+0xe8>
 8004666:	4b87      	ldr	r3, [pc, #540]	; (8004884 <__ieee754_rem_pio2+0x344>)
 8004668:	4598      	cmp	r8, r3
 800466a:	f300 80d8 	bgt.w	800481e <__ieee754_rem_pio2+0x2de>
 800466e:	f000 f96d 	bl	800494c <fabs>
 8004672:	ec55 4b10 	vmov	r4, r5, d0
 8004676:	ee10 0a10 	vmov	r0, s0
 800467a:	a379      	add	r3, pc, #484	; (adr r3, 8004860 <__ieee754_rem_pio2+0x320>)
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	4629      	mov	r1, r5
 8004682:	f7fb ff79 	bl	8000578 <__aeabi_dmul>
 8004686:	4b80      	ldr	r3, [pc, #512]	; (8004888 <__ieee754_rem_pio2+0x348>)
 8004688:	2200      	movs	r2, #0
 800468a:	f7fb fdbf 	bl	800020c <__adddf3>
 800468e:	f7fc fa0d 	bl	8000aac <__aeabi_d2iz>
 8004692:	4683      	mov	fp, r0
 8004694:	f7fb ff06 	bl	80004a4 <__aeabi_i2d>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	ec43 2b18 	vmov	d8, r2, r3
 80046a0:	a367      	add	r3, pc, #412	; (adr r3, 8004840 <__ieee754_rem_pio2+0x300>)
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	f7fb ff67 	bl	8000578 <__aeabi_dmul>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4620      	mov	r0, r4
 80046b0:	4629      	mov	r1, r5
 80046b2:	f7fb fda9 	bl	8000208 <__aeabi_dsub>
 80046b6:	a364      	add	r3, pc, #400	; (adr r3, 8004848 <__ieee754_rem_pio2+0x308>)
 80046b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046bc:	4606      	mov	r6, r0
 80046be:	460f      	mov	r7, r1
 80046c0:	ec51 0b18 	vmov	r0, r1, d8
 80046c4:	f7fb ff58 	bl	8000578 <__aeabi_dmul>
 80046c8:	f1bb 0f1f 	cmp.w	fp, #31
 80046cc:	4604      	mov	r4, r0
 80046ce:	460d      	mov	r5, r1
 80046d0:	dc0d      	bgt.n	80046ee <__ieee754_rem_pio2+0x1ae>
 80046d2:	4b6e      	ldr	r3, [pc, #440]	; (800488c <__ieee754_rem_pio2+0x34c>)
 80046d4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80046d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046dc:	4543      	cmp	r3, r8
 80046de:	d006      	beq.n	80046ee <__ieee754_rem_pio2+0x1ae>
 80046e0:	4622      	mov	r2, r4
 80046e2:	462b      	mov	r3, r5
 80046e4:	4630      	mov	r0, r6
 80046e6:	4639      	mov	r1, r7
 80046e8:	f7fb fd8e 	bl	8000208 <__aeabi_dsub>
 80046ec:	e00e      	b.n	800470c <__ieee754_rem_pio2+0x1cc>
 80046ee:	462b      	mov	r3, r5
 80046f0:	4622      	mov	r2, r4
 80046f2:	4630      	mov	r0, r6
 80046f4:	4639      	mov	r1, r7
 80046f6:	f7fb fd87 	bl	8000208 <__aeabi_dsub>
 80046fa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80046fe:	9303      	str	r3, [sp, #12]
 8004700:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004704:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004708:	2b10      	cmp	r3, #16
 800470a:	dc02      	bgt.n	8004712 <__ieee754_rem_pio2+0x1d2>
 800470c:	e9ca 0100 	strd	r0, r1, [sl]
 8004710:	e039      	b.n	8004786 <__ieee754_rem_pio2+0x246>
 8004712:	a34f      	add	r3, pc, #316	; (adr r3, 8004850 <__ieee754_rem_pio2+0x310>)
 8004714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004718:	ec51 0b18 	vmov	r0, r1, d8
 800471c:	f7fb ff2c 	bl	8000578 <__aeabi_dmul>
 8004720:	4604      	mov	r4, r0
 8004722:	460d      	mov	r5, r1
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4630      	mov	r0, r6
 800472a:	4639      	mov	r1, r7
 800472c:	f7fb fd6c 	bl	8000208 <__aeabi_dsub>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4680      	mov	r8, r0
 8004736:	4689      	mov	r9, r1
 8004738:	4630      	mov	r0, r6
 800473a:	4639      	mov	r1, r7
 800473c:	f7fb fd64 	bl	8000208 <__aeabi_dsub>
 8004740:	4622      	mov	r2, r4
 8004742:	462b      	mov	r3, r5
 8004744:	f7fb fd60 	bl	8000208 <__aeabi_dsub>
 8004748:	a343      	add	r3, pc, #268	; (adr r3, 8004858 <__ieee754_rem_pio2+0x318>)
 800474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474e:	4604      	mov	r4, r0
 8004750:	460d      	mov	r5, r1
 8004752:	ec51 0b18 	vmov	r0, r1, d8
 8004756:	f7fb ff0f 	bl	8000578 <__aeabi_dmul>
 800475a:	4622      	mov	r2, r4
 800475c:	462b      	mov	r3, r5
 800475e:	f7fb fd53 	bl	8000208 <__aeabi_dsub>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	4604      	mov	r4, r0
 8004768:	460d      	mov	r5, r1
 800476a:	4640      	mov	r0, r8
 800476c:	4649      	mov	r1, r9
 800476e:	f7fb fd4b 	bl	8000208 <__aeabi_dsub>
 8004772:	9a03      	ldr	r2, [sp, #12]
 8004774:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b31      	cmp	r3, #49	; 0x31
 800477c:	dc24      	bgt.n	80047c8 <__ieee754_rem_pio2+0x288>
 800477e:	e9ca 0100 	strd	r0, r1, [sl]
 8004782:	4646      	mov	r6, r8
 8004784:	464f      	mov	r7, r9
 8004786:	e9da 8900 	ldrd	r8, r9, [sl]
 800478a:	4630      	mov	r0, r6
 800478c:	4642      	mov	r2, r8
 800478e:	464b      	mov	r3, r9
 8004790:	4639      	mov	r1, r7
 8004792:	f7fb fd39 	bl	8000208 <__aeabi_dsub>
 8004796:	462b      	mov	r3, r5
 8004798:	4622      	mov	r2, r4
 800479a:	f7fb fd35 	bl	8000208 <__aeabi_dsub>
 800479e:	9b02      	ldr	r3, [sp, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80047a6:	f6bf af0b 	bge.w	80045c0 <__ieee754_rem_pio2+0x80>
 80047aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80047ae:	f8ca 3004 	str.w	r3, [sl, #4]
 80047b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80047b6:	f8ca 8000 	str.w	r8, [sl]
 80047ba:	f8ca 0008 	str.w	r0, [sl, #8]
 80047be:	f8ca 300c 	str.w	r3, [sl, #12]
 80047c2:	f1cb 0b00 	rsb	fp, fp, #0
 80047c6:	e6fb      	b.n	80045c0 <__ieee754_rem_pio2+0x80>
 80047c8:	a327      	add	r3, pc, #156	; (adr r3, 8004868 <__ieee754_rem_pio2+0x328>)
 80047ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ce:	ec51 0b18 	vmov	r0, r1, d8
 80047d2:	f7fb fed1 	bl	8000578 <__aeabi_dmul>
 80047d6:	4604      	mov	r4, r0
 80047d8:	460d      	mov	r5, r1
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	4640      	mov	r0, r8
 80047e0:	4649      	mov	r1, r9
 80047e2:	f7fb fd11 	bl	8000208 <__aeabi_dsub>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4606      	mov	r6, r0
 80047ec:	460f      	mov	r7, r1
 80047ee:	4640      	mov	r0, r8
 80047f0:	4649      	mov	r1, r9
 80047f2:	f7fb fd09 	bl	8000208 <__aeabi_dsub>
 80047f6:	4622      	mov	r2, r4
 80047f8:	462b      	mov	r3, r5
 80047fa:	f7fb fd05 	bl	8000208 <__aeabi_dsub>
 80047fe:	a31c      	add	r3, pc, #112	; (adr r3, 8004870 <__ieee754_rem_pio2+0x330>)
 8004800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004804:	4604      	mov	r4, r0
 8004806:	460d      	mov	r5, r1
 8004808:	ec51 0b18 	vmov	r0, r1, d8
 800480c:	f7fb feb4 	bl	8000578 <__aeabi_dmul>
 8004810:	4622      	mov	r2, r4
 8004812:	462b      	mov	r3, r5
 8004814:	f7fb fcf8 	bl	8000208 <__aeabi_dsub>
 8004818:	4604      	mov	r4, r0
 800481a:	460d      	mov	r5, r1
 800481c:	e760      	b.n	80046e0 <__ieee754_rem_pio2+0x1a0>
 800481e:	4b1c      	ldr	r3, [pc, #112]	; (8004890 <__ieee754_rem_pio2+0x350>)
 8004820:	4598      	cmp	r8, r3
 8004822:	dd37      	ble.n	8004894 <__ieee754_rem_pio2+0x354>
 8004824:	ee10 2a10 	vmov	r2, s0
 8004828:	462b      	mov	r3, r5
 800482a:	4620      	mov	r0, r4
 800482c:	4629      	mov	r1, r5
 800482e:	f7fb fceb 	bl	8000208 <__aeabi_dsub>
 8004832:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004836:	e9ca 0100 	strd	r0, r1, [sl]
 800483a:	e695      	b.n	8004568 <__ieee754_rem_pio2+0x28>
 800483c:	f3af 8000 	nop.w
 8004840:	54400000 	.word	0x54400000
 8004844:	3ff921fb 	.word	0x3ff921fb
 8004848:	1a626331 	.word	0x1a626331
 800484c:	3dd0b461 	.word	0x3dd0b461
 8004850:	1a600000 	.word	0x1a600000
 8004854:	3dd0b461 	.word	0x3dd0b461
 8004858:	2e037073 	.word	0x2e037073
 800485c:	3ba3198a 	.word	0x3ba3198a
 8004860:	6dc9c883 	.word	0x6dc9c883
 8004864:	3fe45f30 	.word	0x3fe45f30
 8004868:	2e000000 	.word	0x2e000000
 800486c:	3ba3198a 	.word	0x3ba3198a
 8004870:	252049c1 	.word	0x252049c1
 8004874:	397b839a 	.word	0x397b839a
 8004878:	3fe921fb 	.word	0x3fe921fb
 800487c:	4002d97b 	.word	0x4002d97b
 8004880:	3ff921fb 	.word	0x3ff921fb
 8004884:	413921fb 	.word	0x413921fb
 8004888:	3fe00000 	.word	0x3fe00000
 800488c:	08005258 	.word	0x08005258
 8004890:	7fefffff 	.word	0x7fefffff
 8004894:	ea4f 5628 	mov.w	r6, r8, asr #20
 8004898:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800489c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80048a0:	4620      	mov	r0, r4
 80048a2:	460d      	mov	r5, r1
 80048a4:	f7fc f902 	bl	8000aac <__aeabi_d2iz>
 80048a8:	f7fb fdfc 	bl	80004a4 <__aeabi_i2d>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4620      	mov	r0, r4
 80048b2:	4629      	mov	r1, r5
 80048b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80048b8:	f7fb fca6 	bl	8000208 <__aeabi_dsub>
 80048bc:	4b21      	ldr	r3, [pc, #132]	; (8004944 <__ieee754_rem_pio2+0x404>)
 80048be:	2200      	movs	r2, #0
 80048c0:	f7fb fe5a 	bl	8000578 <__aeabi_dmul>
 80048c4:	460d      	mov	r5, r1
 80048c6:	4604      	mov	r4, r0
 80048c8:	f7fc f8f0 	bl	8000aac <__aeabi_d2iz>
 80048cc:	f7fb fdea 	bl	80004a4 <__aeabi_i2d>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	4620      	mov	r0, r4
 80048d6:	4629      	mov	r1, r5
 80048d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80048dc:	f7fb fc94 	bl	8000208 <__aeabi_dsub>
 80048e0:	4b18      	ldr	r3, [pc, #96]	; (8004944 <__ieee754_rem_pio2+0x404>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	f7fb fe48 	bl	8000578 <__aeabi_dmul>
 80048e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80048ec:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80048f0:	2703      	movs	r7, #3
 80048f2:	2400      	movs	r4, #0
 80048f4:	2500      	movs	r5, #0
 80048f6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80048fa:	4622      	mov	r2, r4
 80048fc:	462b      	mov	r3, r5
 80048fe:	46b9      	mov	r9, r7
 8004900:	3f01      	subs	r7, #1
 8004902:	f7fc f8a1 	bl	8000a48 <__aeabi_dcmpeq>
 8004906:	2800      	cmp	r0, #0
 8004908:	d1f5      	bne.n	80048f6 <__ieee754_rem_pio2+0x3b6>
 800490a:	4b0f      	ldr	r3, [pc, #60]	; (8004948 <__ieee754_rem_pio2+0x408>)
 800490c:	9301      	str	r3, [sp, #4]
 800490e:	2302      	movs	r3, #2
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	4632      	mov	r2, r6
 8004914:	464b      	mov	r3, r9
 8004916:	4651      	mov	r1, sl
 8004918:	a804      	add	r0, sp, #16
 800491a:	f000 f821 	bl	8004960 <__kernel_rem_pio2>
 800491e:	9b02      	ldr	r3, [sp, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	4683      	mov	fp, r0
 8004924:	f6bf ae4c 	bge.w	80045c0 <__ieee754_rem_pio2+0x80>
 8004928:	e9da 2100 	ldrd	r2, r1, [sl]
 800492c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004930:	e9ca 2300 	strd	r2, r3, [sl]
 8004934:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004938:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800493c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004940:	e73f      	b.n	80047c2 <__ieee754_rem_pio2+0x282>
 8004942:	bf00      	nop
 8004944:	41700000 	.word	0x41700000
 8004948:	080052d8 	.word	0x080052d8

0800494c <fabs>:
 800494c:	ec51 0b10 	vmov	r0, r1, d0
 8004950:	ee10 2a10 	vmov	r2, s0
 8004954:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004958:	ec43 2b10 	vmov	d0, r2, r3
 800495c:	4770      	bx	lr
	...

08004960 <__kernel_rem_pio2>:
 8004960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004964:	ed2d 8b02 	vpush	{d8}
 8004968:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800496c:	f112 0f14 	cmn.w	r2, #20
 8004970:	9306      	str	r3, [sp, #24]
 8004972:	9104      	str	r1, [sp, #16]
 8004974:	4bc2      	ldr	r3, [pc, #776]	; (8004c80 <__kernel_rem_pio2+0x320>)
 8004976:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8004978:	9009      	str	r0, [sp, #36]	; 0x24
 800497a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	9b06      	ldr	r3, [sp, #24]
 8004982:	f103 33ff 	add.w	r3, r3, #4294967295
 8004986:	bfa8      	it	ge
 8004988:	1ed4      	subge	r4, r2, #3
 800498a:	9305      	str	r3, [sp, #20]
 800498c:	bfb2      	itee	lt
 800498e:	2400      	movlt	r4, #0
 8004990:	2318      	movge	r3, #24
 8004992:	fb94 f4f3 	sdivge	r4, r4, r3
 8004996:	f06f 0317 	mvn.w	r3, #23
 800499a:	fb04 3303 	mla	r3, r4, r3, r3
 800499e:	eb03 0a02 	add.w	sl, r3, r2
 80049a2:	9b00      	ldr	r3, [sp, #0]
 80049a4:	9a05      	ldr	r2, [sp, #20]
 80049a6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8004c70 <__kernel_rem_pio2+0x310>
 80049aa:	eb03 0802 	add.w	r8, r3, r2
 80049ae:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80049b0:	1aa7      	subs	r7, r4, r2
 80049b2:	ae20      	add	r6, sp, #128	; 0x80
 80049b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80049b8:	2500      	movs	r5, #0
 80049ba:	4545      	cmp	r5, r8
 80049bc:	dd13      	ble.n	80049e6 <__kernel_rem_pio2+0x86>
 80049be:	9b06      	ldr	r3, [sp, #24]
 80049c0:	aa20      	add	r2, sp, #128	; 0x80
 80049c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80049c6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80049ca:	f04f 0800 	mov.w	r8, #0
 80049ce:	9b00      	ldr	r3, [sp, #0]
 80049d0:	4598      	cmp	r8, r3
 80049d2:	dc31      	bgt.n	8004a38 <__kernel_rem_pio2+0xd8>
 80049d4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8004c70 <__kernel_rem_pio2+0x310>
 80049d8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80049dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80049e0:	462f      	mov	r7, r5
 80049e2:	2600      	movs	r6, #0
 80049e4:	e01b      	b.n	8004a1e <__kernel_rem_pio2+0xbe>
 80049e6:	42ef      	cmn	r7, r5
 80049e8:	d407      	bmi.n	80049fa <__kernel_rem_pio2+0x9a>
 80049ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80049ee:	f7fb fd59 	bl	80004a4 <__aeabi_i2d>
 80049f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80049f6:	3501      	adds	r5, #1
 80049f8:	e7df      	b.n	80049ba <__kernel_rem_pio2+0x5a>
 80049fa:	ec51 0b18 	vmov	r0, r1, d8
 80049fe:	e7f8      	b.n	80049f2 <__kernel_rem_pio2+0x92>
 8004a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a04:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004a08:	f7fb fdb6 	bl	8000578 <__aeabi_dmul>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a14:	f7fb fbfa 	bl	800020c <__adddf3>
 8004a18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a1c:	3601      	adds	r6, #1
 8004a1e:	9b05      	ldr	r3, [sp, #20]
 8004a20:	429e      	cmp	r6, r3
 8004a22:	f1a7 0708 	sub.w	r7, r7, #8
 8004a26:	ddeb      	ble.n	8004a00 <__kernel_rem_pio2+0xa0>
 8004a28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004a2c:	f108 0801 	add.w	r8, r8, #1
 8004a30:	ecab 7b02 	vstmia	fp!, {d7}
 8004a34:	3508      	adds	r5, #8
 8004a36:	e7ca      	b.n	80049ce <__kernel_rem_pio2+0x6e>
 8004a38:	9b00      	ldr	r3, [sp, #0]
 8004a3a:	aa0c      	add	r2, sp, #48	; 0x30
 8004a3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004a40:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a42:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004a44:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004a48:	9c00      	ldr	r4, [sp, #0]
 8004a4a:	930a      	str	r3, [sp, #40]	; 0x28
 8004a4c:	00e3      	lsls	r3, r4, #3
 8004a4e:	9308      	str	r3, [sp, #32]
 8004a50:	ab98      	add	r3, sp, #608	; 0x260
 8004a52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004a56:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004a5a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8004a5e:	ab70      	add	r3, sp, #448	; 0x1c0
 8004a60:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8004a64:	46c3      	mov	fp, r8
 8004a66:	46a1      	mov	r9, r4
 8004a68:	f1b9 0f00 	cmp.w	r9, #0
 8004a6c:	f1a5 0508 	sub.w	r5, r5, #8
 8004a70:	dc77      	bgt.n	8004b62 <__kernel_rem_pio2+0x202>
 8004a72:	ec47 6b10 	vmov	d0, r6, r7
 8004a76:	4650      	mov	r0, sl
 8004a78:	f000 fac2 	bl	8005000 <scalbn>
 8004a7c:	ec57 6b10 	vmov	r6, r7, d0
 8004a80:	2200      	movs	r2, #0
 8004a82:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004a86:	ee10 0a10 	vmov	r0, s0
 8004a8a:	4639      	mov	r1, r7
 8004a8c:	f7fb fd74 	bl	8000578 <__aeabi_dmul>
 8004a90:	ec41 0b10 	vmov	d0, r0, r1
 8004a94:	f000 fb34 	bl	8005100 <floor>
 8004a98:	4b7a      	ldr	r3, [pc, #488]	; (8004c84 <__kernel_rem_pio2+0x324>)
 8004a9a:	ec51 0b10 	vmov	r0, r1, d0
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f7fb fd6a 	bl	8000578 <__aeabi_dmul>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4630      	mov	r0, r6
 8004aaa:	4639      	mov	r1, r7
 8004aac:	f7fb fbac 	bl	8000208 <__aeabi_dsub>
 8004ab0:	460f      	mov	r7, r1
 8004ab2:	4606      	mov	r6, r0
 8004ab4:	f7fb fffa 	bl	8000aac <__aeabi_d2iz>
 8004ab8:	9002      	str	r0, [sp, #8]
 8004aba:	f7fb fcf3 	bl	80004a4 <__aeabi_i2d>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	4639      	mov	r1, r7
 8004ac6:	f7fb fb9f 	bl	8000208 <__aeabi_dsub>
 8004aca:	f1ba 0f00 	cmp.w	sl, #0
 8004ace:	4606      	mov	r6, r0
 8004ad0:	460f      	mov	r7, r1
 8004ad2:	dd6d      	ble.n	8004bb0 <__kernel_rem_pio2+0x250>
 8004ad4:	1e61      	subs	r1, r4, #1
 8004ad6:	ab0c      	add	r3, sp, #48	; 0x30
 8004ad8:	9d02      	ldr	r5, [sp, #8]
 8004ada:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004ade:	f1ca 0018 	rsb	r0, sl, #24
 8004ae2:	fa43 f200 	asr.w	r2, r3, r0
 8004ae6:	4415      	add	r5, r2
 8004ae8:	4082      	lsls	r2, r0
 8004aea:	1a9b      	subs	r3, r3, r2
 8004aec:	aa0c      	add	r2, sp, #48	; 0x30
 8004aee:	9502      	str	r5, [sp, #8]
 8004af0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004af4:	f1ca 0217 	rsb	r2, sl, #23
 8004af8:	fa43 fb02 	asr.w	fp, r3, r2
 8004afc:	f1bb 0f00 	cmp.w	fp, #0
 8004b00:	dd65      	ble.n	8004bce <__kernel_rem_pio2+0x26e>
 8004b02:	9b02      	ldr	r3, [sp, #8]
 8004b04:	2200      	movs	r2, #0
 8004b06:	3301      	adds	r3, #1
 8004b08:	9302      	str	r3, [sp, #8]
 8004b0a:	4615      	mov	r5, r2
 8004b0c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004b10:	4294      	cmp	r4, r2
 8004b12:	f300 809f 	bgt.w	8004c54 <__kernel_rem_pio2+0x2f4>
 8004b16:	f1ba 0f00 	cmp.w	sl, #0
 8004b1a:	dd07      	ble.n	8004b2c <__kernel_rem_pio2+0x1cc>
 8004b1c:	f1ba 0f01 	cmp.w	sl, #1
 8004b20:	f000 80c1 	beq.w	8004ca6 <__kernel_rem_pio2+0x346>
 8004b24:	f1ba 0f02 	cmp.w	sl, #2
 8004b28:	f000 80c7 	beq.w	8004cba <__kernel_rem_pio2+0x35a>
 8004b2c:	f1bb 0f02 	cmp.w	fp, #2
 8004b30:	d14d      	bne.n	8004bce <__kernel_rem_pio2+0x26e>
 8004b32:	4632      	mov	r2, r6
 8004b34:	463b      	mov	r3, r7
 8004b36:	4954      	ldr	r1, [pc, #336]	; (8004c88 <__kernel_rem_pio2+0x328>)
 8004b38:	2000      	movs	r0, #0
 8004b3a:	f7fb fb65 	bl	8000208 <__aeabi_dsub>
 8004b3e:	4606      	mov	r6, r0
 8004b40:	460f      	mov	r7, r1
 8004b42:	2d00      	cmp	r5, #0
 8004b44:	d043      	beq.n	8004bce <__kernel_rem_pio2+0x26e>
 8004b46:	4650      	mov	r0, sl
 8004b48:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8004c78 <__kernel_rem_pio2+0x318>
 8004b4c:	f000 fa58 	bl	8005000 <scalbn>
 8004b50:	4630      	mov	r0, r6
 8004b52:	4639      	mov	r1, r7
 8004b54:	ec53 2b10 	vmov	r2, r3, d0
 8004b58:	f7fb fb56 	bl	8000208 <__aeabi_dsub>
 8004b5c:	4606      	mov	r6, r0
 8004b5e:	460f      	mov	r7, r1
 8004b60:	e035      	b.n	8004bce <__kernel_rem_pio2+0x26e>
 8004b62:	4b4a      	ldr	r3, [pc, #296]	; (8004c8c <__kernel_rem_pio2+0x32c>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	4630      	mov	r0, r6
 8004b68:	4639      	mov	r1, r7
 8004b6a:	f7fb fd05 	bl	8000578 <__aeabi_dmul>
 8004b6e:	f7fb ff9d 	bl	8000aac <__aeabi_d2iz>
 8004b72:	f7fb fc97 	bl	80004a4 <__aeabi_i2d>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	ec43 2b18 	vmov	d8, r2, r3
 8004b7e:	4b44      	ldr	r3, [pc, #272]	; (8004c90 <__kernel_rem_pio2+0x330>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	f7fb fcf9 	bl	8000578 <__aeabi_dmul>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4630      	mov	r0, r6
 8004b8c:	4639      	mov	r1, r7
 8004b8e:	f7fb fb3b 	bl	8000208 <__aeabi_dsub>
 8004b92:	f7fb ff8b 	bl	8000aac <__aeabi_d2iz>
 8004b96:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b9a:	f84b 0b04 	str.w	r0, [fp], #4
 8004b9e:	ec51 0b18 	vmov	r0, r1, d8
 8004ba2:	f7fb fb33 	bl	800020c <__adddf3>
 8004ba6:	f109 39ff 	add.w	r9, r9, #4294967295
 8004baa:	4606      	mov	r6, r0
 8004bac:	460f      	mov	r7, r1
 8004bae:	e75b      	b.n	8004a68 <__kernel_rem_pio2+0x108>
 8004bb0:	d106      	bne.n	8004bc0 <__kernel_rem_pio2+0x260>
 8004bb2:	1e63      	subs	r3, r4, #1
 8004bb4:	aa0c      	add	r2, sp, #48	; 0x30
 8004bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bba:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8004bbe:	e79d      	b.n	8004afc <__kernel_rem_pio2+0x19c>
 8004bc0:	4b34      	ldr	r3, [pc, #208]	; (8004c94 <__kernel_rem_pio2+0x334>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f7fb ff5e 	bl	8000a84 <__aeabi_dcmpge>
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d140      	bne.n	8004c4e <__kernel_rem_pio2+0x2ee>
 8004bcc:	4683      	mov	fp, r0
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	4639      	mov	r1, r7
 8004bd6:	f7fb ff37 	bl	8000a48 <__aeabi_dcmpeq>
 8004bda:	2800      	cmp	r0, #0
 8004bdc:	f000 80c1 	beq.w	8004d62 <__kernel_rem_pio2+0x402>
 8004be0:	1e65      	subs	r5, r4, #1
 8004be2:	462b      	mov	r3, r5
 8004be4:	2200      	movs	r2, #0
 8004be6:	9900      	ldr	r1, [sp, #0]
 8004be8:	428b      	cmp	r3, r1
 8004bea:	da6d      	bge.n	8004cc8 <__kernel_rem_pio2+0x368>
 8004bec:	2a00      	cmp	r2, #0
 8004bee:	f000 808a 	beq.w	8004d06 <__kernel_rem_pio2+0x3a6>
 8004bf2:	ab0c      	add	r3, sp, #48	; 0x30
 8004bf4:	f1aa 0a18 	sub.w	sl, sl, #24
 8004bf8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 80ae 	beq.w	8004d5e <__kernel_rem_pio2+0x3fe>
 8004c02:	4650      	mov	r0, sl
 8004c04:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8004c78 <__kernel_rem_pio2+0x318>
 8004c08:	f000 f9fa 	bl	8005000 <scalbn>
 8004c0c:	1c6b      	adds	r3, r5, #1
 8004c0e:	00da      	lsls	r2, r3, #3
 8004c10:	9205      	str	r2, [sp, #20]
 8004c12:	ec57 6b10 	vmov	r6, r7, d0
 8004c16:	aa70      	add	r2, sp, #448	; 0x1c0
 8004c18:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8004c8c <__kernel_rem_pio2+0x32c>
 8004c1c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8004c20:	462c      	mov	r4, r5
 8004c22:	f04f 0800 	mov.w	r8, #0
 8004c26:	2c00      	cmp	r4, #0
 8004c28:	f280 80d4 	bge.w	8004dd4 <__kernel_rem_pio2+0x474>
 8004c2c:	462c      	mov	r4, r5
 8004c2e:	2c00      	cmp	r4, #0
 8004c30:	f2c0 8102 	blt.w	8004e38 <__kernel_rem_pio2+0x4d8>
 8004c34:	4b18      	ldr	r3, [pc, #96]	; (8004c98 <__kernel_rem_pio2+0x338>)
 8004c36:	461e      	mov	r6, r3
 8004c38:	ab70      	add	r3, sp, #448	; 0x1c0
 8004c3a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8004c3e:	1b2b      	subs	r3, r5, r4
 8004c40:	f04f 0900 	mov.w	r9, #0
 8004c44:	f04f 0a00 	mov.w	sl, #0
 8004c48:	2700      	movs	r7, #0
 8004c4a:	9306      	str	r3, [sp, #24]
 8004c4c:	e0e6      	b.n	8004e1c <__kernel_rem_pio2+0x4bc>
 8004c4e:	f04f 0b02 	mov.w	fp, #2
 8004c52:	e756      	b.n	8004b02 <__kernel_rem_pio2+0x1a2>
 8004c54:	f8d8 3000 	ldr.w	r3, [r8]
 8004c58:	bb05      	cbnz	r5, 8004c9c <__kernel_rem_pio2+0x33c>
 8004c5a:	b123      	cbz	r3, 8004c66 <__kernel_rem_pio2+0x306>
 8004c5c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004c60:	f8c8 3000 	str.w	r3, [r8]
 8004c64:	2301      	movs	r3, #1
 8004c66:	3201      	adds	r2, #1
 8004c68:	f108 0804 	add.w	r8, r8, #4
 8004c6c:	461d      	mov	r5, r3
 8004c6e:	e74f      	b.n	8004b10 <__kernel_rem_pio2+0x1b0>
	...
 8004c7c:	3ff00000 	.word	0x3ff00000
 8004c80:	08005420 	.word	0x08005420
 8004c84:	40200000 	.word	0x40200000
 8004c88:	3ff00000 	.word	0x3ff00000
 8004c8c:	3e700000 	.word	0x3e700000
 8004c90:	41700000 	.word	0x41700000
 8004c94:	3fe00000 	.word	0x3fe00000
 8004c98:	080053e0 	.word	0x080053e0
 8004c9c:	1acb      	subs	r3, r1, r3
 8004c9e:	f8c8 3000 	str.w	r3, [r8]
 8004ca2:	462b      	mov	r3, r5
 8004ca4:	e7df      	b.n	8004c66 <__kernel_rem_pio2+0x306>
 8004ca6:	1e62      	subs	r2, r4, #1
 8004ca8:	ab0c      	add	r3, sp, #48	; 0x30
 8004caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004cb2:	a90c      	add	r1, sp, #48	; 0x30
 8004cb4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004cb8:	e738      	b.n	8004b2c <__kernel_rem_pio2+0x1cc>
 8004cba:	1e62      	subs	r2, r4, #1
 8004cbc:	ab0c      	add	r3, sp, #48	; 0x30
 8004cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004cc6:	e7f4      	b.n	8004cb2 <__kernel_rem_pio2+0x352>
 8004cc8:	a90c      	add	r1, sp, #48	; 0x30
 8004cca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	e788      	b.n	8004be6 <__kernel_rem_pio2+0x286>
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004cda:	2900      	cmp	r1, #0
 8004cdc:	d0fa      	beq.n	8004cd4 <__kernel_rem_pio2+0x374>
 8004cde:	9a08      	ldr	r2, [sp, #32]
 8004ce0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8004ce4:	446a      	add	r2, sp
 8004ce6:	3a98      	subs	r2, #152	; 0x98
 8004ce8:	9208      	str	r2, [sp, #32]
 8004cea:	9a06      	ldr	r2, [sp, #24]
 8004cec:	a920      	add	r1, sp, #128	; 0x80
 8004cee:	18a2      	adds	r2, r4, r2
 8004cf0:	18e3      	adds	r3, r4, r3
 8004cf2:	f104 0801 	add.w	r8, r4, #1
 8004cf6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8004cfa:	9302      	str	r3, [sp, #8]
 8004cfc:	9b02      	ldr	r3, [sp, #8]
 8004cfe:	4543      	cmp	r3, r8
 8004d00:	da04      	bge.n	8004d0c <__kernel_rem_pio2+0x3ac>
 8004d02:	461c      	mov	r4, r3
 8004d04:	e6a2      	b.n	8004a4c <__kernel_rem_pio2+0xec>
 8004d06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e7e4      	b.n	8004cd6 <__kernel_rem_pio2+0x376>
 8004d0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d0e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004d12:	f7fb fbc7 	bl	80004a4 <__aeabi_i2d>
 8004d16:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d1c:	46ab      	mov	fp, r5
 8004d1e:	461c      	mov	r4, r3
 8004d20:	f04f 0900 	mov.w	r9, #0
 8004d24:	2600      	movs	r6, #0
 8004d26:	2700      	movs	r7, #0
 8004d28:	9b05      	ldr	r3, [sp, #20]
 8004d2a:	4599      	cmp	r9, r3
 8004d2c:	dd06      	ble.n	8004d3c <__kernel_rem_pio2+0x3dc>
 8004d2e:	9b08      	ldr	r3, [sp, #32]
 8004d30:	e8e3 6702 	strd	r6, r7, [r3], #8
 8004d34:	f108 0801 	add.w	r8, r8, #1
 8004d38:	9308      	str	r3, [sp, #32]
 8004d3a:	e7df      	b.n	8004cfc <__kernel_rem_pio2+0x39c>
 8004d3c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004d40:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004d44:	f7fb fc18 	bl	8000578 <__aeabi_dmul>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4630      	mov	r0, r6
 8004d4e:	4639      	mov	r1, r7
 8004d50:	f7fb fa5c 	bl	800020c <__adddf3>
 8004d54:	f109 0901 	add.w	r9, r9, #1
 8004d58:	4606      	mov	r6, r0
 8004d5a:	460f      	mov	r7, r1
 8004d5c:	e7e4      	b.n	8004d28 <__kernel_rem_pio2+0x3c8>
 8004d5e:	3d01      	subs	r5, #1
 8004d60:	e747      	b.n	8004bf2 <__kernel_rem_pio2+0x292>
 8004d62:	ec47 6b10 	vmov	d0, r6, r7
 8004d66:	f1ca 0000 	rsb	r0, sl, #0
 8004d6a:	f000 f949 	bl	8005000 <scalbn>
 8004d6e:	ec57 6b10 	vmov	r6, r7, d0
 8004d72:	4ba0      	ldr	r3, [pc, #640]	; (8004ff4 <__kernel_rem_pio2+0x694>)
 8004d74:	ee10 0a10 	vmov	r0, s0
 8004d78:	2200      	movs	r2, #0
 8004d7a:	4639      	mov	r1, r7
 8004d7c:	f7fb fe82 	bl	8000a84 <__aeabi_dcmpge>
 8004d80:	b1f8      	cbz	r0, 8004dc2 <__kernel_rem_pio2+0x462>
 8004d82:	4b9d      	ldr	r3, [pc, #628]	; (8004ff8 <__kernel_rem_pio2+0x698>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	4630      	mov	r0, r6
 8004d88:	4639      	mov	r1, r7
 8004d8a:	f7fb fbf5 	bl	8000578 <__aeabi_dmul>
 8004d8e:	f7fb fe8d 	bl	8000aac <__aeabi_d2iz>
 8004d92:	4680      	mov	r8, r0
 8004d94:	f7fb fb86 	bl	80004a4 <__aeabi_i2d>
 8004d98:	4b96      	ldr	r3, [pc, #600]	; (8004ff4 <__kernel_rem_pio2+0x694>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f7fb fbec 	bl	8000578 <__aeabi_dmul>
 8004da0:	460b      	mov	r3, r1
 8004da2:	4602      	mov	r2, r0
 8004da4:	4639      	mov	r1, r7
 8004da6:	4630      	mov	r0, r6
 8004da8:	f7fb fa2e 	bl	8000208 <__aeabi_dsub>
 8004dac:	f7fb fe7e 	bl	8000aac <__aeabi_d2iz>
 8004db0:	1c65      	adds	r5, r4, #1
 8004db2:	ab0c      	add	r3, sp, #48	; 0x30
 8004db4:	f10a 0a18 	add.w	sl, sl, #24
 8004db8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004dbc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8004dc0:	e71f      	b.n	8004c02 <__kernel_rem_pio2+0x2a2>
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	4639      	mov	r1, r7
 8004dc6:	f7fb fe71 	bl	8000aac <__aeabi_d2iz>
 8004dca:	ab0c      	add	r3, sp, #48	; 0x30
 8004dcc:	4625      	mov	r5, r4
 8004dce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004dd2:	e716      	b.n	8004c02 <__kernel_rem_pio2+0x2a2>
 8004dd4:	ab0c      	add	r3, sp, #48	; 0x30
 8004dd6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004dda:	f7fb fb63 	bl	80004a4 <__aeabi_i2d>
 8004dde:	4632      	mov	r2, r6
 8004de0:	463b      	mov	r3, r7
 8004de2:	f7fb fbc9 	bl	8000578 <__aeabi_dmul>
 8004de6:	4642      	mov	r2, r8
 8004de8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8004dec:	464b      	mov	r3, r9
 8004dee:	4630      	mov	r0, r6
 8004df0:	4639      	mov	r1, r7
 8004df2:	f7fb fbc1 	bl	8000578 <__aeabi_dmul>
 8004df6:	3c01      	subs	r4, #1
 8004df8:	4606      	mov	r6, r0
 8004dfa:	460f      	mov	r7, r1
 8004dfc:	e713      	b.n	8004c26 <__kernel_rem_pio2+0x2c6>
 8004dfe:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8004e02:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8004e06:	f7fb fbb7 	bl	8000578 <__aeabi_dmul>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4648      	mov	r0, r9
 8004e10:	4651      	mov	r1, sl
 8004e12:	f7fb f9fb 	bl	800020c <__adddf3>
 8004e16:	3701      	adds	r7, #1
 8004e18:	4681      	mov	r9, r0
 8004e1a:	468a      	mov	sl, r1
 8004e1c:	9b00      	ldr	r3, [sp, #0]
 8004e1e:	429f      	cmp	r7, r3
 8004e20:	dc02      	bgt.n	8004e28 <__kernel_rem_pio2+0x4c8>
 8004e22:	9b06      	ldr	r3, [sp, #24]
 8004e24:	429f      	cmp	r7, r3
 8004e26:	ddea      	ble.n	8004dfe <__kernel_rem_pio2+0x49e>
 8004e28:	9a06      	ldr	r2, [sp, #24]
 8004e2a:	ab48      	add	r3, sp, #288	; 0x120
 8004e2c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8004e30:	e9c6 9a00 	strd	r9, sl, [r6]
 8004e34:	3c01      	subs	r4, #1
 8004e36:	e6fa      	b.n	8004c2e <__kernel_rem_pio2+0x2ce>
 8004e38:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	dc0b      	bgt.n	8004e56 <__kernel_rem_pio2+0x4f6>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	dc39      	bgt.n	8004eb6 <__kernel_rem_pio2+0x556>
 8004e42:	d05d      	beq.n	8004f00 <__kernel_rem_pio2+0x5a0>
 8004e44:	9b02      	ldr	r3, [sp, #8]
 8004e46:	f003 0007 	and.w	r0, r3, #7
 8004e4a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004e4e:	ecbd 8b02 	vpop	{d8}
 8004e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e56:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d1f3      	bne.n	8004e44 <__kernel_rem_pio2+0x4e4>
 8004e5c:	9b05      	ldr	r3, [sp, #20]
 8004e5e:	9500      	str	r5, [sp, #0]
 8004e60:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004e64:	eb0d 0403 	add.w	r4, sp, r3
 8004e68:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8004e6c:	46a2      	mov	sl, r4
 8004e6e:	9b00      	ldr	r3, [sp, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f1aa 0a08 	sub.w	sl, sl, #8
 8004e76:	dc69      	bgt.n	8004f4c <__kernel_rem_pio2+0x5ec>
 8004e78:	46aa      	mov	sl, r5
 8004e7a:	f1ba 0f01 	cmp.w	sl, #1
 8004e7e:	f1a4 0408 	sub.w	r4, r4, #8
 8004e82:	f300 8083 	bgt.w	8004f8c <__kernel_rem_pio2+0x62c>
 8004e86:	9c05      	ldr	r4, [sp, #20]
 8004e88:	ab48      	add	r3, sp, #288	; 0x120
 8004e8a:	441c      	add	r4, r3
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	2100      	movs	r1, #0
 8004e90:	2d01      	cmp	r5, #1
 8004e92:	f300 809a 	bgt.w	8004fca <__kernel_rem_pio2+0x66a>
 8004e96:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8004e9a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8004e9e:	f1bb 0f00 	cmp.w	fp, #0
 8004ea2:	f040 8098 	bne.w	8004fd6 <__kernel_rem_pio2+0x676>
 8004ea6:	9b04      	ldr	r3, [sp, #16]
 8004ea8:	e9c3 7800 	strd	r7, r8, [r3]
 8004eac:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004eb0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004eb4:	e7c6      	b.n	8004e44 <__kernel_rem_pio2+0x4e4>
 8004eb6:	9e05      	ldr	r6, [sp, #20]
 8004eb8:	ab48      	add	r3, sp, #288	; 0x120
 8004eba:	441e      	add	r6, r3
 8004ebc:	462c      	mov	r4, r5
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	2c00      	cmp	r4, #0
 8004ec4:	da33      	bge.n	8004f2e <__kernel_rem_pio2+0x5ce>
 8004ec6:	f1bb 0f00 	cmp.w	fp, #0
 8004eca:	d036      	beq.n	8004f3a <__kernel_rem_pio2+0x5da>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ed2:	9c04      	ldr	r4, [sp, #16]
 8004ed4:	e9c4 2300 	strd	r2, r3, [r4]
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004ee0:	f7fb f992 	bl	8000208 <__aeabi_dsub>
 8004ee4:	ae4a      	add	r6, sp, #296	; 0x128
 8004ee6:	2401      	movs	r4, #1
 8004ee8:	42a5      	cmp	r5, r4
 8004eea:	da29      	bge.n	8004f40 <__kernel_rem_pio2+0x5e0>
 8004eec:	f1bb 0f00 	cmp.w	fp, #0
 8004ef0:	d002      	beq.n	8004ef8 <__kernel_rem_pio2+0x598>
 8004ef2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	9b04      	ldr	r3, [sp, #16]
 8004efa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004efe:	e7a1      	b.n	8004e44 <__kernel_rem_pio2+0x4e4>
 8004f00:	9c05      	ldr	r4, [sp, #20]
 8004f02:	ab48      	add	r3, sp, #288	; 0x120
 8004f04:	441c      	add	r4, r3
 8004f06:	2000      	movs	r0, #0
 8004f08:	2100      	movs	r1, #0
 8004f0a:	2d00      	cmp	r5, #0
 8004f0c:	da09      	bge.n	8004f22 <__kernel_rem_pio2+0x5c2>
 8004f0e:	f1bb 0f00 	cmp.w	fp, #0
 8004f12:	d002      	beq.n	8004f1a <__kernel_rem_pio2+0x5ba>
 8004f14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f18:	4619      	mov	r1, r3
 8004f1a:	9b04      	ldr	r3, [sp, #16]
 8004f1c:	e9c3 0100 	strd	r0, r1, [r3]
 8004f20:	e790      	b.n	8004e44 <__kernel_rem_pio2+0x4e4>
 8004f22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004f26:	f7fb f971 	bl	800020c <__adddf3>
 8004f2a:	3d01      	subs	r5, #1
 8004f2c:	e7ed      	b.n	8004f0a <__kernel_rem_pio2+0x5aa>
 8004f2e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8004f32:	f7fb f96b 	bl	800020c <__adddf3>
 8004f36:	3c01      	subs	r4, #1
 8004f38:	e7c3      	b.n	8004ec2 <__kernel_rem_pio2+0x562>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	e7c8      	b.n	8004ed2 <__kernel_rem_pio2+0x572>
 8004f40:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004f44:	f7fb f962 	bl	800020c <__adddf3>
 8004f48:	3401      	adds	r4, #1
 8004f4a:	e7cd      	b.n	8004ee8 <__kernel_rem_pio2+0x588>
 8004f4c:	e9da 8900 	ldrd	r8, r9, [sl]
 8004f50:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8004f54:	9b00      	ldr	r3, [sp, #0]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	4632      	mov	r2, r6
 8004f5c:	463b      	mov	r3, r7
 8004f5e:	4640      	mov	r0, r8
 8004f60:	4649      	mov	r1, r9
 8004f62:	f7fb f953 	bl	800020c <__adddf3>
 8004f66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4640      	mov	r0, r8
 8004f70:	4649      	mov	r1, r9
 8004f72:	f7fb f949 	bl	8000208 <__aeabi_dsub>
 8004f76:	4632      	mov	r2, r6
 8004f78:	463b      	mov	r3, r7
 8004f7a:	f7fb f947 	bl	800020c <__adddf3>
 8004f7e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004f82:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004f86:	ed8a 7b00 	vstr	d7, [sl]
 8004f8a:	e770      	b.n	8004e6e <__kernel_rem_pio2+0x50e>
 8004f8c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004f90:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8004f94:	4640      	mov	r0, r8
 8004f96:	4632      	mov	r2, r6
 8004f98:	463b      	mov	r3, r7
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	f7fb f936 	bl	800020c <__adddf3>
 8004fa0:	e9cd 0100 	strd	r0, r1, [sp]
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4640      	mov	r0, r8
 8004faa:	4649      	mov	r1, r9
 8004fac:	f7fb f92c 	bl	8000208 <__aeabi_dsub>
 8004fb0:	4632      	mov	r2, r6
 8004fb2:	463b      	mov	r3, r7
 8004fb4:	f7fb f92a 	bl	800020c <__adddf3>
 8004fb8:	ed9d 7b00 	vldr	d7, [sp]
 8004fbc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004fc0:	ed84 7b00 	vstr	d7, [r4]
 8004fc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fc8:	e757      	b.n	8004e7a <__kernel_rem_pio2+0x51a>
 8004fca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004fce:	f7fb f91d 	bl	800020c <__adddf3>
 8004fd2:	3d01      	subs	r5, #1
 8004fd4:	e75c      	b.n	8004e90 <__kernel_rem_pio2+0x530>
 8004fd6:	9b04      	ldr	r3, [sp, #16]
 8004fd8:	9a04      	ldr	r2, [sp, #16]
 8004fda:	601f      	str	r7, [r3, #0]
 8004fdc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8004fe0:	605c      	str	r4, [r3, #4]
 8004fe2:	609d      	str	r5, [r3, #8]
 8004fe4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004fe8:	60d3      	str	r3, [r2, #12]
 8004fea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004fee:	6110      	str	r0, [r2, #16]
 8004ff0:	6153      	str	r3, [r2, #20]
 8004ff2:	e727      	b.n	8004e44 <__kernel_rem_pio2+0x4e4>
 8004ff4:	41700000 	.word	0x41700000
 8004ff8:	3e700000 	.word	0x3e700000
 8004ffc:	00000000 	.word	0x00000000

08005000 <scalbn>:
 8005000:	b570      	push	{r4, r5, r6, lr}
 8005002:	ec55 4b10 	vmov	r4, r5, d0
 8005006:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800500a:	4606      	mov	r6, r0
 800500c:	462b      	mov	r3, r5
 800500e:	b999      	cbnz	r1, 8005038 <scalbn+0x38>
 8005010:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005014:	4323      	orrs	r3, r4
 8005016:	d03f      	beq.n	8005098 <scalbn+0x98>
 8005018:	4b35      	ldr	r3, [pc, #212]	; (80050f0 <scalbn+0xf0>)
 800501a:	4629      	mov	r1, r5
 800501c:	ee10 0a10 	vmov	r0, s0
 8005020:	2200      	movs	r2, #0
 8005022:	f7fb faa9 	bl	8000578 <__aeabi_dmul>
 8005026:	4b33      	ldr	r3, [pc, #204]	; (80050f4 <scalbn+0xf4>)
 8005028:	429e      	cmp	r6, r3
 800502a:	4604      	mov	r4, r0
 800502c:	460d      	mov	r5, r1
 800502e:	da10      	bge.n	8005052 <scalbn+0x52>
 8005030:	a327      	add	r3, pc, #156	; (adr r3, 80050d0 <scalbn+0xd0>)
 8005032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005036:	e01f      	b.n	8005078 <scalbn+0x78>
 8005038:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800503c:	4291      	cmp	r1, r2
 800503e:	d10c      	bne.n	800505a <scalbn+0x5a>
 8005040:	ee10 2a10 	vmov	r2, s0
 8005044:	4620      	mov	r0, r4
 8005046:	4629      	mov	r1, r5
 8005048:	f7fb f8e0 	bl	800020c <__adddf3>
 800504c:	4604      	mov	r4, r0
 800504e:	460d      	mov	r5, r1
 8005050:	e022      	b.n	8005098 <scalbn+0x98>
 8005052:	460b      	mov	r3, r1
 8005054:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005058:	3936      	subs	r1, #54	; 0x36
 800505a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800505e:	4296      	cmp	r6, r2
 8005060:	dd0d      	ble.n	800507e <scalbn+0x7e>
 8005062:	2d00      	cmp	r5, #0
 8005064:	a11c      	add	r1, pc, #112	; (adr r1, 80050d8 <scalbn+0xd8>)
 8005066:	e9d1 0100 	ldrd	r0, r1, [r1]
 800506a:	da02      	bge.n	8005072 <scalbn+0x72>
 800506c:	a11c      	add	r1, pc, #112	; (adr r1, 80050e0 <scalbn+0xe0>)
 800506e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005072:	a319      	add	r3, pc, #100	; (adr r3, 80050d8 <scalbn+0xd8>)
 8005074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005078:	f7fb fa7e 	bl	8000578 <__aeabi_dmul>
 800507c:	e7e6      	b.n	800504c <scalbn+0x4c>
 800507e:	1872      	adds	r2, r6, r1
 8005080:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005084:	428a      	cmp	r2, r1
 8005086:	dcec      	bgt.n	8005062 <scalbn+0x62>
 8005088:	2a00      	cmp	r2, #0
 800508a:	dd08      	ble.n	800509e <scalbn+0x9e>
 800508c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005090:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005094:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005098:	ec45 4b10 	vmov	d0, r4, r5
 800509c:	bd70      	pop	{r4, r5, r6, pc}
 800509e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80050a2:	da08      	bge.n	80050b6 <scalbn+0xb6>
 80050a4:	2d00      	cmp	r5, #0
 80050a6:	a10a      	add	r1, pc, #40	; (adr r1, 80050d0 <scalbn+0xd0>)
 80050a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050ac:	dac0      	bge.n	8005030 <scalbn+0x30>
 80050ae:	a10e      	add	r1, pc, #56	; (adr r1, 80050e8 <scalbn+0xe8>)
 80050b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050b4:	e7bc      	b.n	8005030 <scalbn+0x30>
 80050b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80050ba:	3236      	adds	r2, #54	; 0x36
 80050bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80050c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80050c4:	4620      	mov	r0, r4
 80050c6:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <scalbn+0xf8>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	e7d5      	b.n	8005078 <scalbn+0x78>
 80050cc:	f3af 8000 	nop.w
 80050d0:	c2f8f359 	.word	0xc2f8f359
 80050d4:	01a56e1f 	.word	0x01a56e1f
 80050d8:	8800759c 	.word	0x8800759c
 80050dc:	7e37e43c 	.word	0x7e37e43c
 80050e0:	8800759c 	.word	0x8800759c
 80050e4:	fe37e43c 	.word	0xfe37e43c
 80050e8:	c2f8f359 	.word	0xc2f8f359
 80050ec:	81a56e1f 	.word	0x81a56e1f
 80050f0:	43500000 	.word	0x43500000
 80050f4:	ffff3cb0 	.word	0xffff3cb0
 80050f8:	3c900000 	.word	0x3c900000
 80050fc:	00000000 	.word	0x00000000

08005100 <floor>:
 8005100:	ec51 0b10 	vmov	r0, r1, d0
 8005104:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800510c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8005110:	2e13      	cmp	r6, #19
 8005112:	ee10 5a10 	vmov	r5, s0
 8005116:	ee10 8a10 	vmov	r8, s0
 800511a:	460c      	mov	r4, r1
 800511c:	dc31      	bgt.n	8005182 <floor+0x82>
 800511e:	2e00      	cmp	r6, #0
 8005120:	da14      	bge.n	800514c <floor+0x4c>
 8005122:	a333      	add	r3, pc, #204	; (adr r3, 80051f0 <floor+0xf0>)
 8005124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005128:	f7fb f870 	bl	800020c <__adddf3>
 800512c:	2200      	movs	r2, #0
 800512e:	2300      	movs	r3, #0
 8005130:	f7fb fcb2 	bl	8000a98 <__aeabi_dcmpgt>
 8005134:	b138      	cbz	r0, 8005146 <floor+0x46>
 8005136:	2c00      	cmp	r4, #0
 8005138:	da53      	bge.n	80051e2 <floor+0xe2>
 800513a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800513e:	4325      	orrs	r5, r4
 8005140:	d052      	beq.n	80051e8 <floor+0xe8>
 8005142:	4c2d      	ldr	r4, [pc, #180]	; (80051f8 <floor+0xf8>)
 8005144:	2500      	movs	r5, #0
 8005146:	4621      	mov	r1, r4
 8005148:	4628      	mov	r0, r5
 800514a:	e024      	b.n	8005196 <floor+0x96>
 800514c:	4f2b      	ldr	r7, [pc, #172]	; (80051fc <floor+0xfc>)
 800514e:	4137      	asrs	r7, r6
 8005150:	ea01 0307 	and.w	r3, r1, r7
 8005154:	4303      	orrs	r3, r0
 8005156:	d01e      	beq.n	8005196 <floor+0x96>
 8005158:	a325      	add	r3, pc, #148	; (adr r3, 80051f0 <floor+0xf0>)
 800515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515e:	f7fb f855 	bl	800020c <__adddf3>
 8005162:	2200      	movs	r2, #0
 8005164:	2300      	movs	r3, #0
 8005166:	f7fb fc97 	bl	8000a98 <__aeabi_dcmpgt>
 800516a:	2800      	cmp	r0, #0
 800516c:	d0eb      	beq.n	8005146 <floor+0x46>
 800516e:	2c00      	cmp	r4, #0
 8005170:	bfbe      	ittt	lt
 8005172:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005176:	4133      	asrlt	r3, r6
 8005178:	18e4      	addlt	r4, r4, r3
 800517a:	ea24 0407 	bic.w	r4, r4, r7
 800517e:	2500      	movs	r5, #0
 8005180:	e7e1      	b.n	8005146 <floor+0x46>
 8005182:	2e33      	cmp	r6, #51	; 0x33
 8005184:	dd0b      	ble.n	800519e <floor+0x9e>
 8005186:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800518a:	d104      	bne.n	8005196 <floor+0x96>
 800518c:	ee10 2a10 	vmov	r2, s0
 8005190:	460b      	mov	r3, r1
 8005192:	f7fb f83b 	bl	800020c <__adddf3>
 8005196:	ec41 0b10 	vmov	d0, r0, r1
 800519a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800519e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80051a2:	f04f 37ff 	mov.w	r7, #4294967295
 80051a6:	40df      	lsrs	r7, r3
 80051a8:	4238      	tst	r0, r7
 80051aa:	d0f4      	beq.n	8005196 <floor+0x96>
 80051ac:	a310      	add	r3, pc, #64	; (adr r3, 80051f0 <floor+0xf0>)
 80051ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b2:	f7fb f82b 	bl	800020c <__adddf3>
 80051b6:	2200      	movs	r2, #0
 80051b8:	2300      	movs	r3, #0
 80051ba:	f7fb fc6d 	bl	8000a98 <__aeabi_dcmpgt>
 80051be:	2800      	cmp	r0, #0
 80051c0:	d0c1      	beq.n	8005146 <floor+0x46>
 80051c2:	2c00      	cmp	r4, #0
 80051c4:	da0a      	bge.n	80051dc <floor+0xdc>
 80051c6:	2e14      	cmp	r6, #20
 80051c8:	d101      	bne.n	80051ce <floor+0xce>
 80051ca:	3401      	adds	r4, #1
 80051cc:	e006      	b.n	80051dc <floor+0xdc>
 80051ce:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80051d2:	2301      	movs	r3, #1
 80051d4:	40b3      	lsls	r3, r6
 80051d6:	441d      	add	r5, r3
 80051d8:	45a8      	cmp	r8, r5
 80051da:	d8f6      	bhi.n	80051ca <floor+0xca>
 80051dc:	ea25 0507 	bic.w	r5, r5, r7
 80051e0:	e7b1      	b.n	8005146 <floor+0x46>
 80051e2:	2500      	movs	r5, #0
 80051e4:	462c      	mov	r4, r5
 80051e6:	e7ae      	b.n	8005146 <floor+0x46>
 80051e8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80051ec:	e7ab      	b.n	8005146 <floor+0x46>
 80051ee:	bf00      	nop
 80051f0:	8800759c 	.word	0x8800759c
 80051f4:	7e37e43c 	.word	0x7e37e43c
 80051f8:	bff00000 	.word	0xbff00000
 80051fc:	000fffff 	.word	0x000fffff

08005200 <_init>:
 8005200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005202:	bf00      	nop
 8005204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005206:	bc08      	pop	{r3}
 8005208:	469e      	mov	lr, r3
 800520a:	4770      	bx	lr

0800520c <_fini>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	bf00      	nop
 8005210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005212:	bc08      	pop	{r3}
 8005214:	469e      	mov	lr, r3
 8005216:	4770      	bx	lr
