
ECSE444Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005684  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005840  08005840  00015840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058b0  080058b0  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080058b0  080058b0  000158b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058b8  080058b8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058b8  080058b8  000158b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058bc  080058bc  000158bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080058c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000018  080058d8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  080058d8  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001093a  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020be  00000000  00000000  000309c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  00032a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a75  00000000  00000000  00033820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b324  00000000  00000000  00034295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fde3  00000000  00000000  0005f5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010ff51  00000000  00000000  0006f39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a38  00000000  00000000  0017f2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00182d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000018 	.word	0x20000018
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005828 	.word	0x08005828

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	2000001c 	.word	0x2000001c
 80001f8:	08005828 	.word	0x08005828

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	; 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	3c01      	subs	r4, #1
 8000338:	bf28      	it	cs
 800033a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800033e:	d2e9      	bcs.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__aeabi_d2f>:
 8000998:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800099c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a0:	bf24      	itt	cs
 80009a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009aa:	d90d      	bls.n	80009c8 <__aeabi_d2f+0x30>
 80009ac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009b8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c0:	bf08      	it	eq
 80009c2:	f020 0001 	biceq.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009cc:	d121      	bne.n	8000a12 <__aeabi_d2f+0x7a>
 80009ce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009d2:	bfbc      	itt	lt
 80009d4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009d8:	4770      	bxlt	lr
 80009da:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009de:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e2:	f1c2 0218 	rsb	r2, r2, #24
 80009e6:	f1c2 0c20 	rsb	ip, r2, #32
 80009ea:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ee:	fa20 f002 	lsr.w	r0, r0, r2
 80009f2:	bf18      	it	ne
 80009f4:	f040 0001 	orrne.w	r0, r0, #1
 80009f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a04:	ea40 000c 	orr.w	r0, r0, ip
 8000a08:	fa23 f302 	lsr.w	r3, r3, r2
 8000a0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a10:	e7cc      	b.n	80009ac <__aeabi_d2f+0x14>
 8000a12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a16:	d107      	bne.n	8000a28 <__aeabi_d2f+0x90>
 8000a18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a1c:	bf1e      	ittt	ne
 8000a1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a26:	4770      	bxne	lr
 8000a28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_uldivmod>:
 8000a38:	b953      	cbnz	r3, 8000a50 <__aeabi_uldivmod+0x18>
 8000a3a:	b94a      	cbnz	r2, 8000a50 <__aeabi_uldivmod+0x18>
 8000a3c:	2900      	cmp	r1, #0
 8000a3e:	bf08      	it	eq
 8000a40:	2800      	cmpeq	r0, #0
 8000a42:	bf1c      	itt	ne
 8000a44:	f04f 31ff 	movne.w	r1, #4294967295
 8000a48:	f04f 30ff 	movne.w	r0, #4294967295
 8000a4c:	f000 b970 	b.w	8000d30 <__aeabi_idiv0>
 8000a50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a58:	f000 f806 	bl	8000a68 <__udivmoddi4>
 8000a5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a64:	b004      	add	sp, #16
 8000a66:	4770      	bx	lr

08000a68 <__udivmoddi4>:
 8000a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a6c:	9e08      	ldr	r6, [sp, #32]
 8000a6e:	460d      	mov	r5, r1
 8000a70:	4604      	mov	r4, r0
 8000a72:	460f      	mov	r7, r1
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d14a      	bne.n	8000b0e <__udivmoddi4+0xa6>
 8000a78:	428a      	cmp	r2, r1
 8000a7a:	4694      	mov	ip, r2
 8000a7c:	d965      	bls.n	8000b4a <__udivmoddi4+0xe2>
 8000a7e:	fab2 f382 	clz	r3, r2
 8000a82:	b143      	cbz	r3, 8000a96 <__udivmoddi4+0x2e>
 8000a84:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a88:	f1c3 0220 	rsb	r2, r3, #32
 8000a8c:	409f      	lsls	r7, r3
 8000a8e:	fa20 f202 	lsr.w	r2, r0, r2
 8000a92:	4317      	orrs	r7, r2
 8000a94:	409c      	lsls	r4, r3
 8000a96:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a9a:	fa1f f58c 	uxth.w	r5, ip
 8000a9e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000aa2:	0c22      	lsrs	r2, r4, #16
 8000aa4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000aa8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000aac:	fb01 f005 	mul.w	r0, r1, r5
 8000ab0:	4290      	cmp	r0, r2
 8000ab2:	d90a      	bls.n	8000aca <__udivmoddi4+0x62>
 8000ab4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ab8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000abc:	f080 811c 	bcs.w	8000cf8 <__udivmoddi4+0x290>
 8000ac0:	4290      	cmp	r0, r2
 8000ac2:	f240 8119 	bls.w	8000cf8 <__udivmoddi4+0x290>
 8000ac6:	3902      	subs	r1, #2
 8000ac8:	4462      	add	r2, ip
 8000aca:	1a12      	subs	r2, r2, r0
 8000acc:	b2a4      	uxth	r4, r4
 8000ace:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ad2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ad6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ada:	fb00 f505 	mul.w	r5, r0, r5
 8000ade:	42a5      	cmp	r5, r4
 8000ae0:	d90a      	bls.n	8000af8 <__udivmoddi4+0x90>
 8000ae2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000aea:	f080 8107 	bcs.w	8000cfc <__udivmoddi4+0x294>
 8000aee:	42a5      	cmp	r5, r4
 8000af0:	f240 8104 	bls.w	8000cfc <__udivmoddi4+0x294>
 8000af4:	4464      	add	r4, ip
 8000af6:	3802      	subs	r0, #2
 8000af8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000afc:	1b64      	subs	r4, r4, r5
 8000afe:	2100      	movs	r1, #0
 8000b00:	b11e      	cbz	r6, 8000b0a <__udivmoddi4+0xa2>
 8000b02:	40dc      	lsrs	r4, r3
 8000b04:	2300      	movs	r3, #0
 8000b06:	e9c6 4300 	strd	r4, r3, [r6]
 8000b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0xbc>
 8000b12:	2e00      	cmp	r6, #0
 8000b14:	f000 80ed 	beq.w	8000cf2 <__udivmoddi4+0x28a>
 8000b18:	2100      	movs	r1, #0
 8000b1a:	e9c6 0500 	strd	r0, r5, [r6]
 8000b1e:	4608      	mov	r0, r1
 8000b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b24:	fab3 f183 	clz	r1, r3
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	d149      	bne.n	8000bc0 <__udivmoddi4+0x158>
 8000b2c:	42ab      	cmp	r3, r5
 8000b2e:	d302      	bcc.n	8000b36 <__udivmoddi4+0xce>
 8000b30:	4282      	cmp	r2, r0
 8000b32:	f200 80f8 	bhi.w	8000d26 <__udivmoddi4+0x2be>
 8000b36:	1a84      	subs	r4, r0, r2
 8000b38:	eb65 0203 	sbc.w	r2, r5, r3
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	4617      	mov	r7, r2
 8000b40:	2e00      	cmp	r6, #0
 8000b42:	d0e2      	beq.n	8000b0a <__udivmoddi4+0xa2>
 8000b44:	e9c6 4700 	strd	r4, r7, [r6]
 8000b48:	e7df      	b.n	8000b0a <__udivmoddi4+0xa2>
 8000b4a:	b902      	cbnz	r2, 8000b4e <__udivmoddi4+0xe6>
 8000b4c:	deff      	udf	#255	; 0xff
 8000b4e:	fab2 f382 	clz	r3, r2
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f040 8090 	bne.w	8000c78 <__udivmoddi4+0x210>
 8000b58:	1a8a      	subs	r2, r1, r2
 8000b5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b5e:	fa1f fe8c 	uxth.w	lr, ip
 8000b62:	2101      	movs	r1, #1
 8000b64:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b68:	fb07 2015 	mls	r0, r7, r5, r2
 8000b6c:	0c22      	lsrs	r2, r4, #16
 8000b6e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b72:	fb0e f005 	mul.w	r0, lr, r5
 8000b76:	4290      	cmp	r0, r2
 8000b78:	d908      	bls.n	8000b8c <__udivmoddi4+0x124>
 8000b7a:	eb1c 0202 	adds.w	r2, ip, r2
 8000b7e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b82:	d202      	bcs.n	8000b8a <__udivmoddi4+0x122>
 8000b84:	4290      	cmp	r0, r2
 8000b86:	f200 80cb 	bhi.w	8000d20 <__udivmoddi4+0x2b8>
 8000b8a:	4645      	mov	r5, r8
 8000b8c:	1a12      	subs	r2, r2, r0
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b94:	fb07 2210 	mls	r2, r7, r0, r2
 8000b98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b9c:	fb0e fe00 	mul.w	lr, lr, r0
 8000ba0:	45a6      	cmp	lr, r4
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x14e>
 8000ba4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ba8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bac:	d202      	bcs.n	8000bb4 <__udivmoddi4+0x14c>
 8000bae:	45a6      	cmp	lr, r4
 8000bb0:	f200 80bb 	bhi.w	8000d2a <__udivmoddi4+0x2c2>
 8000bb4:	4610      	mov	r0, r2
 8000bb6:	eba4 040e 	sub.w	r4, r4, lr
 8000bba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bbe:	e79f      	b.n	8000b00 <__udivmoddi4+0x98>
 8000bc0:	f1c1 0720 	rsb	r7, r1, #32
 8000bc4:	408b      	lsls	r3, r1
 8000bc6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bce:	fa05 f401 	lsl.w	r4, r5, r1
 8000bd2:	fa20 f307 	lsr.w	r3, r0, r7
 8000bd6:	40fd      	lsrs	r5, r7
 8000bd8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bdc:	4323      	orrs	r3, r4
 8000bde:	fbb5 f8f9 	udiv	r8, r5, r9
 8000be2:	fa1f fe8c 	uxth.w	lr, ip
 8000be6:	fb09 5518 	mls	r5, r9, r8, r5
 8000bea:	0c1c      	lsrs	r4, r3, #16
 8000bec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bf0:	fb08 f50e 	mul.w	r5, r8, lr
 8000bf4:	42a5      	cmp	r5, r4
 8000bf6:	fa02 f201 	lsl.w	r2, r2, r1
 8000bfa:	fa00 f001 	lsl.w	r0, r0, r1
 8000bfe:	d90b      	bls.n	8000c18 <__udivmoddi4+0x1b0>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c08:	f080 8088 	bcs.w	8000d1c <__udivmoddi4+0x2b4>
 8000c0c:	42a5      	cmp	r5, r4
 8000c0e:	f240 8085 	bls.w	8000d1c <__udivmoddi4+0x2b4>
 8000c12:	f1a8 0802 	sub.w	r8, r8, #2
 8000c16:	4464      	add	r4, ip
 8000c18:	1b64      	subs	r4, r4, r5
 8000c1a:	b29d      	uxth	r5, r3
 8000c1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c20:	fb09 4413 	mls	r4, r9, r3, r4
 8000c24:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c28:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x1da>
 8000c30:	eb1c 0404 	adds.w	r4, ip, r4
 8000c34:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c38:	d26c      	bcs.n	8000d14 <__udivmoddi4+0x2ac>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	d96a      	bls.n	8000d14 <__udivmoddi4+0x2ac>
 8000c3e:	3b02      	subs	r3, #2
 8000c40:	4464      	add	r4, ip
 8000c42:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c46:	fba3 9502 	umull	r9, r5, r3, r2
 8000c4a:	eba4 040e 	sub.w	r4, r4, lr
 8000c4e:	42ac      	cmp	r4, r5
 8000c50:	46c8      	mov	r8, r9
 8000c52:	46ae      	mov	lr, r5
 8000c54:	d356      	bcc.n	8000d04 <__udivmoddi4+0x29c>
 8000c56:	d053      	beq.n	8000d00 <__udivmoddi4+0x298>
 8000c58:	b156      	cbz	r6, 8000c70 <__udivmoddi4+0x208>
 8000c5a:	ebb0 0208 	subs.w	r2, r0, r8
 8000c5e:	eb64 040e 	sbc.w	r4, r4, lr
 8000c62:	fa04 f707 	lsl.w	r7, r4, r7
 8000c66:	40ca      	lsrs	r2, r1
 8000c68:	40cc      	lsrs	r4, r1
 8000c6a:	4317      	orrs	r7, r2
 8000c6c:	e9c6 7400 	strd	r7, r4, [r6]
 8000c70:	4618      	mov	r0, r3
 8000c72:	2100      	movs	r1, #0
 8000c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c78:	f1c3 0120 	rsb	r1, r3, #32
 8000c7c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c80:	fa20 f201 	lsr.w	r2, r0, r1
 8000c84:	fa25 f101 	lsr.w	r1, r5, r1
 8000c88:	409d      	lsls	r5, r3
 8000c8a:	432a      	orrs	r2, r5
 8000c8c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c90:	fa1f fe8c 	uxth.w	lr, ip
 8000c94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c98:	fb07 1510 	mls	r5, r7, r0, r1
 8000c9c:	0c11      	lsrs	r1, r2, #16
 8000c9e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ca2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ca6:	428d      	cmp	r5, r1
 8000ca8:	fa04 f403 	lsl.w	r4, r4, r3
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x258>
 8000cae:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cb6:	d22f      	bcs.n	8000d18 <__udivmoddi4+0x2b0>
 8000cb8:	428d      	cmp	r5, r1
 8000cba:	d92d      	bls.n	8000d18 <__udivmoddi4+0x2b0>
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	4461      	add	r1, ip
 8000cc0:	1b49      	subs	r1, r1, r5
 8000cc2:	b292      	uxth	r2, r2
 8000cc4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cc8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ccc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cd0:	fb05 f10e 	mul.w	r1, r5, lr
 8000cd4:	4291      	cmp	r1, r2
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x282>
 8000cd8:	eb1c 0202 	adds.w	r2, ip, r2
 8000cdc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ce0:	d216      	bcs.n	8000d10 <__udivmoddi4+0x2a8>
 8000ce2:	4291      	cmp	r1, r2
 8000ce4:	d914      	bls.n	8000d10 <__udivmoddi4+0x2a8>
 8000ce6:	3d02      	subs	r5, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a52      	subs	r2, r2, r1
 8000cec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cf0:	e738      	b.n	8000b64 <__udivmoddi4+0xfc>
 8000cf2:	4631      	mov	r1, r6
 8000cf4:	4630      	mov	r0, r6
 8000cf6:	e708      	b.n	8000b0a <__udivmoddi4+0xa2>
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	e6e6      	b.n	8000aca <__udivmoddi4+0x62>
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	e6fb      	b.n	8000af8 <__udivmoddi4+0x90>
 8000d00:	4548      	cmp	r0, r9
 8000d02:	d2a9      	bcs.n	8000c58 <__udivmoddi4+0x1f0>
 8000d04:	ebb9 0802 	subs.w	r8, r9, r2
 8000d08:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	e7a3      	b.n	8000c58 <__udivmoddi4+0x1f0>
 8000d10:	4645      	mov	r5, r8
 8000d12:	e7ea      	b.n	8000cea <__udivmoddi4+0x282>
 8000d14:	462b      	mov	r3, r5
 8000d16:	e794      	b.n	8000c42 <__udivmoddi4+0x1da>
 8000d18:	4640      	mov	r0, r8
 8000d1a:	e7d1      	b.n	8000cc0 <__udivmoddi4+0x258>
 8000d1c:	46d0      	mov	r8, sl
 8000d1e:	e77b      	b.n	8000c18 <__udivmoddi4+0x1b0>
 8000d20:	3d02      	subs	r5, #2
 8000d22:	4462      	add	r2, ip
 8000d24:	e732      	b.n	8000b8c <__udivmoddi4+0x124>
 8000d26:	4608      	mov	r0, r1
 8000d28:	e70a      	b.n	8000b40 <__udivmoddi4+0xd8>
 8000d2a:	4464      	add	r4, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	e742      	b.n	8000bb6 <__udivmoddi4+0x14e>

08000d30 <__aeabi_idiv0>:
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop

08000d34 <ADC_Select_VREFINT>:
float ADC_val;

ADC_HandleTypeDef hadc1;
UART_HandleTypeDef huart2;

static void ADC_Select_VREFINT(void) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
 8000d48:	615a      	str	r2, [r3, #20]
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <ADC_Select_VREFINT+0x4c>)
 8000d4c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d4e:	2306      	movs	r3, #6
 8000d50:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000d52:	2307      	movs	r3, #7
 8000d54:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d56:	237f      	movs	r3, #127	; 0x7f
 8000d58:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d62:	463b      	mov	r3, r7
 8000d64:	4619      	mov	r1, r3
 8000d66:	4807      	ldr	r0, [pc, #28]	; (8000d84 <ADC_Select_VREFINT+0x50>)
 8000d68:	f001 f944 	bl	8001ff4 <HAL_ADC_ConfigChannel>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <ADC_Select_VREFINT+0x42>
		Error_Handler();
 8000d72:	f000 fad7 	bl	8001324 <Error_Handler>
	}
}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	80000001 	.word	0x80000001
 8000d84:	20000034 	.word	0x20000034

08000d88 <ADC_Select_TEMP>:

static void ADC_Select_TEMP(void) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
 8000d9c:	615a      	str	r2, [r3, #20]
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <ADC_Select_TEMP+0x4c>)
 8000da0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000da2:	2306      	movs	r3, #6
 8000da4:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000da6:	2307      	movs	r3, #7
 8000da8:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000daa:	237f      	movs	r3, #127	; 0x7f
 8000dac:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dae:	2304      	movs	r3, #4
 8000db0:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000db6:	463b      	mov	r3, r7
 8000db8:	4619      	mov	r1, r3
 8000dba:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <ADC_Select_TEMP+0x50>)
 8000dbc:	f001 f91a 	bl	8001ff4 <HAL_ADC_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <ADC_Select_TEMP+0x42>
		Error_Handler();
 8000dc6:	f000 faad 	bl	8001324 <Error_Handler>
	}
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	c7520000 	.word	0xc7520000
 8000dd8:	20000034 	.word	0x20000034

08000ddc <get_ADC_readings>:

float get_ADC_readings(bool status) {
 8000ddc:	b5b0      	push	{r4, r5, r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
	int raw, raw2;
	float v_index;
	ADC_Select_TEMP();
 8000de6:	f7ff ffcf 	bl	8000d88 <ADC_Select_TEMP>
	HAL_ADC_Start(&hadc1);
 8000dea:	4860      	ldr	r0, [pc, #384]	; (8000f6c <get_ADC_readings+0x190>)
 8000dec:	f000 ffd0 	bl	8001d90 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	485d      	ldr	r0, [pc, #372]	; (8000f6c <get_ADC_readings+0x190>)
 8000df6:	f001 f861 	bl	8001ebc <HAL_ADC_PollForConversion>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d104      	bne.n	8000e0a <get_ADC_readings+0x2e>
	raw = HAL_ADC_GetValue(&hadc1);
 8000e00:	485a      	ldr	r0, [pc, #360]	; (8000f6c <get_ADC_readings+0x190>)
 8000e02:	f001 f8ea 	bl	8001fda <HAL_ADC_GetValue>
 8000e06:	4603      	mov	r3, r0
 8000e08:	617b      	str	r3, [r7, #20]
	cal_v = *addr;
 8000e0a:	4b59      	ldr	r3, [pc, #356]	; (8000f70 <get_ADC_readings+0x194>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	4b58      	ldr	r3, [pc, #352]	; (8000f74 <get_ADC_readings+0x198>)
 8000e14:	801a      	strh	r2, [r3, #0]
	cal1 = *addr2;
 8000e16:	4b58      	ldr	r3, [pc, #352]	; (8000f78 <get_ADC_readings+0x19c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	4b57      	ldr	r3, [pc, #348]	; (8000f7c <get_ADC_readings+0x1a0>)
 8000e20:	801a      	strh	r2, [r3, #0]
	cal2 = *addr3;
 8000e22:	4b57      	ldr	r3, [pc, #348]	; (8000f80 <get_ADC_readings+0x1a4>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	4b56      	ldr	r3, [pc, #344]	; (8000f84 <get_ADC_readings+0x1a8>)
 8000e2c:	801a      	strh	r2, [r3, #0]

	HAL_ADC_Stop(&hadc1);
 8000e2e:	484f      	ldr	r0, [pc, #316]	; (8000f6c <get_ADC_readings+0x190>)
 8000e30:	f001 f811 	bl	8001e56 <HAL_ADC_Stop>
	HAL_Delay(10);
 8000e34:	200a      	movs	r0, #10
 8000e36:	f000 fc19 	bl	800166c <HAL_Delay>

	ADC_Select_VREFINT();
 8000e3a:	f7ff ff7b 	bl	8000d34 <ADC_Select_VREFINT>
	HAL_ADC_Start(&hadc1);
 8000e3e:	484b      	ldr	r0, [pc, #300]	; (8000f6c <get_ADC_readings+0x190>)
 8000e40:	f000 ffa6 	bl	8001d90 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	4848      	ldr	r0, [pc, #288]	; (8000f6c <get_ADC_readings+0x190>)
 8000e4a:	f001 f837 	bl	8001ebc <HAL_ADC_PollForConversion>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d104      	bne.n	8000e5e <get_ADC_readings+0x82>
	raw2 = HAL_ADC_GetValue(&hadc1);
 8000e54:	4845      	ldr	r0, [pc, #276]	; (8000f6c <get_ADC_readings+0x190>)
 8000e56:	f001 f8c0 	bl	8001fda <HAL_ADC_GetValue>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	613b      	str	r3, [r7, #16]

	HAL_ADC_Stop(&hadc1);
 8000e5e:	4843      	ldr	r0, [pc, #268]	; (8000f6c <get_ADC_readings+0x190>)
 8000e60:	f000 fff9 	bl	8001e56 <HAL_ADC_Stop>
	HAL_Delay(10);
 8000e64:	200a      	movs	r0, #10
 8000e66:	f000 fc01 	bl	800166c <HAL_Delay>

	//calculation and return
	v_index = 3.0 * cal_v / raw2;
 8000e6a:	4b42      	ldr	r3, [pc, #264]	; (8000f74 <get_ADC_readings+0x198>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fb16 	bl	80004a0 <__aeabi_i2d>
 8000e74:	f04f 0200 	mov.w	r2, #0
 8000e78:	4b43      	ldr	r3, [pc, #268]	; (8000f88 <get_ADC_readings+0x1ac>)
 8000e7a:	f7ff fb7b 	bl	8000574 <__aeabi_dmul>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	460b      	mov	r3, r1
 8000e82:	4614      	mov	r4, r2
 8000e84:	461d      	mov	r5, r3
 8000e86:	6938      	ldr	r0, [r7, #16]
 8000e88:	f7ff fb0a 	bl	80004a0 <__aeabi_i2d>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4620      	mov	r0, r4
 8000e92:	4629      	mov	r1, r5
 8000e94:	f7ff fc98 	bl	80007c8 <__aeabi_ddiv>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f7ff fd7a 	bl	8000998 <__aeabi_d2f>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	60fb      	str	r3, [r7, #12]
	if(status)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <get_ADC_readings+0xd6>
		return v_index;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	e054      	b.n	8000f5c <get_ADC_readings+0x180>
	else if(!status)
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f083 0301 	eor.w	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d04d      	beq.n	8000f5a <get_ADC_readings+0x17e>
		return 100 * (raw * v_index/3.0 - cal1) / (cal2 - cal1) + 30;
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	ee07 3a90 	vmov	s15, r3
 8000ec4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ec8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed0:	ee17 0a90 	vmov	r0, s15
 8000ed4:	f7ff faf6 	bl	80004c4 <__aeabi_f2d>
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <get_ADC_readings+0x1ac>)
 8000ede:	f7ff fc73 	bl	80007c8 <__aeabi_ddiv>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4614      	mov	r4, r2
 8000ee8:	461d      	mov	r5, r3
 8000eea:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <get_ADC_readings+0x1a0>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fad6 	bl	80004a0 <__aeabi_i2d>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4620      	mov	r0, r4
 8000efa:	4629      	mov	r1, r5
 8000efc:	f7ff f982 	bl	8000204 <__aeabi_dsub>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	4610      	mov	r0, r2
 8000f06:	4619      	mov	r1, r3
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <get_ADC_readings+0x1b0>)
 8000f0e:	f7ff fb31 	bl	8000574 <__aeabi_dmul>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4614      	mov	r4, r2
 8000f18:	461d      	mov	r5, r3
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <get_ADC_readings+0x1a8>)
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <get_ADC_readings+0x1a0>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff faba 	bl	80004a0 <__aeabi_i2d>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4620      	mov	r0, r4
 8000f32:	4629      	mov	r1, r5
 8000f34:	f7ff fc48 	bl	80007c8 <__aeabi_ddiv>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <get_ADC_readings+0x1b4>)
 8000f46:	f7ff f95f 	bl	8000208 <__adddf3>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	f7ff fd21 	bl	8000998 <__aeabi_d2f>
 8000f56:	4603      	mov	r3, r0
 8000f58:	e000      	b.n	8000f5c <get_ADC_readings+0x180>
}
 8000f5a:	e001      	b.n	8000f60 <get_ADC_readings+0x184>
 8000f5c:	ee07 3a90 	vmov	s15, r3
 8000f60:	eeb0 0a67 	vmov.f32	s0, s15
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bdb0      	pop	{r4, r5, r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000034 	.word	0x20000034
 8000f70:	20000000 	.word	0x20000000
 8000f74:	20000132 	.word	0x20000132
 8000f78:	20000004 	.word	0x20000004
 8000f7c:	20000134 	.word	0x20000134
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000136 	.word	0x20000136
 8000f88:	40080000 	.word	0x40080000
 8000f8c:	40590000 	.word	0x40590000
 8000f90:	403e0000 	.word	0x403e0000

08000f94 <wait_push>:

void wait_push(){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(myButton_GPIO_Port, myButton_Pin)){
 8000f98:	e011      	b.n	8000fbe <wait_push+0x2a>
		HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, status);
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <wait_push+0x6c>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	2120      	movs	r1, #32
 8000fa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa6:	f002 f8df 	bl	8003168 <HAL_GPIO_WritePin>
		ADC_val = get_ADC_readings(status);
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <wait_push+0x6c>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff14 	bl	8000ddc <get_ADC_readings>
 8000fb4:	eef0 7a40 	vmov.f32	s15, s0
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <wait_push+0x70>)
 8000fba:	edc3 7a00 	vstr	s15, [r3]
	while(HAL_GPIO_ReadPin(myButton_GPIO_Port, myButton_Pin)){
 8000fbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc2:	4811      	ldr	r0, [pc, #68]	; (8001008 <wait_push+0x74>)
 8000fc4:	f002 f8b8 	bl	8003138 <HAL_GPIO_ReadPin>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1e5      	bne.n	8000f9a <wait_push+0x6>
		//if wan to print through uart, enable following code
		//#if(DBG_UART) /* Send data with UART2 */
		//UART_Printf_Dbg("Temperature: ADC_val = %.2f℃\r\n", ADC_val);
		//#endif
	}
	status = !status;
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <wait_push+0x6c>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	bf14      	ite	ne
 8000fd6:	2301      	movne	r3, #1
 8000fd8:	2300      	moveq	r3, #0
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	f083 0301 	eor.w	r3, r3, #1
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <wait_push+0x6c>)
 8000fea:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, status);
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <wait_push+0x6c>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	2120      	movs	r1, #32
 8000ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff8:	f002 f8b6 	bl	8003168 <HAL_GPIO_WritePin>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000130 	.word	0x20000130
 8001004:	20000138 	.word	0x20000138
 8001008:	48000800 	.word	0x48000800

0800100c <wait_release>:

void wait_release(){
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(myButton_GPIO_Port, myButton_Pin)==0){
 8001010:	e007      	b.n	8001022 <wait_release+0x16>
			HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, status);
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <wait_release+0x2c>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	2120      	movs	r1, #32
 800101a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101e:	f002 f8a3 	bl	8003168 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(myButton_GPIO_Port, myButton_Pin)==0){
 8001022:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <wait_release+0x30>)
 8001028:	f002 f886 	bl	8003138 <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0ef      	beq.n	8001012 <wait_release+0x6>
		}
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000130 	.word	0x20000130
 800103c:	48000800 	.word	0x48000800

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001044:	f000 fa9d 	bl	8001582 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001048:	f000 f81c 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104c:	f000 f91c 	bl	8001288 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001050:	f000 f86a 	bl	8001128 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001054:	f000 f8cc 	bl	80011f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001058:	217f      	movs	r1, #127	; 0x7f
 800105a:	4808      	ldr	r0, [pc, #32]	; (800107c <main+0x3c>)
 800105c:	f001 fd94 	bl	8002b88 <HAL_ADCEx_Calibration_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	if (HAL_GPIO_ReadPin(myButton_GPIO_Port, myButton_Pin))//wait for push
 8001060:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001064:	4806      	ldr	r0, [pc, #24]	; (8001080 <main+0x40>)
 8001066:	f002 f867 	bl	8003138 <HAL_GPIO_ReadPin>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <main+0x36>
		wait_push();
 8001070:	f7ff ff90 	bl	8000f94 <wait_push>
 8001074:	e7f4      	b.n	8001060 <main+0x20>
	else
		wait_release();
 8001076:	f7ff ffc9 	bl	800100c <wait_release>
	if (HAL_GPIO_ReadPin(myButton_GPIO_Port, myButton_Pin))//wait for push
 800107a:	e7f1      	b.n	8001060 <main+0x20>
 800107c:	20000034 	.word	0x20000034
 8001080:	48000800 	.word	0x48000800

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b096      	sub	sp, #88	; 0x58
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	2244      	movs	r2, #68	; 0x44
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f004 fb9c 	bl	80057d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	463b      	mov	r3, r7
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80010a6:	2000      	movs	r0, #0
 80010a8:	f002 f896 	bl	80031d8 <HAL_PWREx_ControlVoltageScaling>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80010b2:	f000 f937 	bl	8001324 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010b6:	2310      	movs	r3, #16
 80010b8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010ba:	2301      	movs	r3, #1
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010c2:	2360      	movs	r3, #96	; 0x60
 80010c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c6:	2302      	movs	r3, #2
 80010c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010ca:	2301      	movs	r3, #1
 80010cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010ce:	2301      	movs	r3, #1
 80010d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80010d2:	233c      	movs	r3, #60	; 0x3c
 80010d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d6:	2302      	movs	r3, #2
 80010d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010da:	2302      	movs	r3, #2
 80010dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010de:	2302      	movs	r3, #2
 80010e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 f91a 	bl	8003320 <HAL_RCC_OscConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010f2:	f000 f917 	bl	8001324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f6:	230f      	movs	r3, #15
 80010f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fa:	2303      	movs	r3, #3
 80010fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800110a:	463b      	mov	r3, r7
 800110c:	2105      	movs	r1, #5
 800110e:	4618      	mov	r0, r3
 8001110:	f002 fd20 	bl	8003b54 <HAL_RCC_ClockConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800111a:	f000 f903 	bl	8001324 <Error_Handler>
  }
}
 800111e:	bf00      	nop
 8001120:	3758      	adds	r7, #88	; 0x58
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800112e:	463b      	mov	r3, r7
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800113e:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <MX_ADC1_Init+0xbc>)
 8001140:	4a29      	ldr	r2, [pc, #164]	; (80011e8 <MX_ADC1_Init+0xc0>)
 8001142:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001144:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <MX_ADC1_Init+0xbc>)
 8001146:	2200      	movs	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800114a:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <MX_ADC1_Init+0xbc>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <MX_ADC1_Init+0xbc>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <MX_ADC1_Init+0xbc>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115c:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <MX_ADC1_Init+0xbc>)
 800115e:	2204      	movs	r2, #4
 8001160:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <MX_ADC1_Init+0xbc>)
 8001164:	2200      	movs	r2, #0
 8001166:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001168:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <MX_ADC1_Init+0xbc>)
 800116a:	2200      	movs	r2, #0
 800116c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_ADC1_Init+0xbc>)
 8001170:	2201      	movs	r2, #1
 8001172:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_ADC1_Init+0xbc>)
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <MX_ADC1_Init+0xbc>)
 800117e:	2200      	movs	r2, #0
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_ADC1_Init+0xbc>)
 8001184:	2200      	movs	r2, #0
 8001186:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001188:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <MX_ADC1_Init+0xbc>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_ADC1_Init+0xbc>)
 8001192:	2200      	movs	r2, #0
 8001194:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <MX_ADC1_Init+0xbc>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800119e:	4811      	ldr	r0, [pc, #68]	; (80011e4 <MX_ADC1_Init+0xbc>)
 80011a0:	f000 fcb0 	bl	8001b04 <HAL_ADC_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80011aa:	f000 f8bb 	bl	8001324 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <MX_ADC1_Init+0xc4>)
 80011b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b2:	2306      	movs	r3, #6
 80011b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80011b6:	2306      	movs	r3, #6
 80011b8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ba:	237f      	movs	r3, #127	; 0x7f
 80011bc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011be:	2304      	movs	r3, #4
 80011c0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c6:	463b      	mov	r3, r7
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	; (80011e4 <MX_ADC1_Init+0xbc>)
 80011cc:	f000 ff12 	bl	8001ff4 <HAL_ADC_ConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80011d6:	f000 f8a5 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000034 	.word	0x20000034
 80011e8:	50040000 	.word	0x50040000
 80011ec:	c7520000 	.word	0xc7520000

080011f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <MX_USART2_UART_Init+0x90>)
 80011f6:	4a23      	ldr	r2, [pc, #140]	; (8001284 <MX_USART2_UART_Init+0x94>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <MX_USART2_UART_Init+0x90>)
 80011fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001200:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <MX_USART2_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <MX_USART2_UART_Init+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_USART2_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_USART2_UART_Init+0x90>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MX_USART2_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_USART2_UART_Init+0x90>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <MX_USART2_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_USART2_UART_Init+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <MX_USART2_UART_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001238:	4811      	ldr	r0, [pc, #68]	; (8001280 <MX_USART2_UART_Init+0x90>)
 800123a:	f003 fc61 	bl	8004b00 <HAL_UART_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001244:	f000 f86e 	bl	8001324 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001248:	2100      	movs	r1, #0
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <MX_USART2_UART_Init+0x90>)
 800124c:	f004 f9f6 	bl	800563c <HAL_UARTEx_SetTxFifoThreshold>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001256:	f000 f865 	bl	8001324 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800125a:	2100      	movs	r1, #0
 800125c:	4808      	ldr	r0, [pc, #32]	; (8001280 <MX_USART2_UART_Init+0x90>)
 800125e:	f004 fa2b 	bl	80056b8 <HAL_UARTEx_SetRxFifoThreshold>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001268:	f000 f85c 	bl	8001324 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_USART2_UART_Init+0x90>)
 800126e:	f004 f9ac 	bl	80055ca <HAL_UARTEx_DisableFifoMode>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001278:	f000 f854 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2000009c 	.word	0x2000009c
 8001284:	40004400 	.word	0x40004400

08001288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	4b1f      	ldr	r3, [pc, #124]	; (800131c <MX_GPIO_Init+0x94>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a2:	4a1e      	ldr	r2, [pc, #120]	; (800131c <MX_GPIO_Init+0x94>)
 80012a4:	f043 0304 	orr.w	r3, r3, #4
 80012a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012aa:	4b1c      	ldr	r3, [pc, #112]	; (800131c <MX_GPIO_Init+0x94>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <MX_GPIO_Init+0x94>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ba:	4a18      	ldr	r2, [pc, #96]	; (800131c <MX_GPIO_Init+0x94>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c2:	4b16      	ldr	r3, [pc, #88]	; (800131c <MX_GPIO_Init+0x94>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2120      	movs	r1, #32
 80012d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d6:	f001 ff47 	bl	8003168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : myButton_Pin */
  GPIO_InitStruct.Pin = myButton_Pin;
 80012da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(myButton_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	4619      	mov	r1, r3
 80012ee:	480c      	ldr	r0, [pc, #48]	; (8001320 <MX_GPIO_Init+0x98>)
 80012f0:	f001 fd90 	bl	8002e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : myLed_Pin */
  GPIO_InitStruct.Pin = myLed_Pin;
 80012f4:	2320      	movs	r3, #32
 80012f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(myLed_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	4619      	mov	r1, r3
 800130a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130e:	f001 fd81 	bl	8002e14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001312:	bf00      	nop
 8001314:	3720      	adds	r7, #32
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000
 8001320:	48000800 	.word	0x48000800

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001328:	b672      	cpsid	i
}
 800132a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800132c:	e7fe      	b.n	800132c <Error_Handler+0x8>
	...

08001330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_MspInit+0x44>)
 8001338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133a:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <HAL_MspInit+0x44>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6613      	str	r3, [r2, #96]	; 0x60
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <HAL_MspInit+0x44>)
 8001344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_MspInit+0x44>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001352:	4a08      	ldr	r2, [pc, #32]	; (8001374 <HAL_MspInit+0x44>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001358:	6593      	str	r3, [r2, #88]	; 0x58
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_MspInit+0x44>)
 800135c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000

08001378 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b0a8      	sub	sp, #160	; 0xa0
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	2294      	movs	r2, #148	; 0x94
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f004 fa21 	bl	80057d0 <memset>
  if(hadc->Instance==ADC1)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a19      	ldr	r2, [pc, #100]	; (80013f8 <HAL_ADC_MspInit+0x80>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d12b      	bne.n	80013f0 <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001398:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800139c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800139e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80013a6:	2301      	movs	r3, #1
 80013a8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013aa:	2301      	movs	r3, #1
 80013ac:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80013ae:	2318      	movs	r3, #24
 80013b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013b6:	2302      	movs	r3, #2
 80013b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013ba:	2302      	movs	r3, #2
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80013be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 fe81 	bl	80040d0 <HAL_RCCEx_PeriphCLKConfig>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 80013d4:	f7ff ffa6 	bl	8001324 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <HAL_ADC_MspInit+0x84>)
 80013da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013dc:	4a07      	ldr	r2, [pc, #28]	; (80013fc <HAL_ADC_MspInit+0x84>)
 80013de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_ADC_MspInit+0x84>)
 80013e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013f0:	bf00      	nop
 80013f2:	37a0      	adds	r7, #160	; 0xa0
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	50040000 	.word	0x50040000
 80013fc:	40021000 	.word	0x40021000

08001400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b0ae      	sub	sp, #184	; 0xb8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	2294      	movs	r2, #148	; 0x94
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f004 f9d5 	bl	80057d0 <memset>
  if(huart->Instance==USART2)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <HAL_UART_MspInit+0xb0>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d13b      	bne.n	80014a8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001430:	2302      	movs	r3, #2
 8001432:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001434:	2300      	movs	r3, #0
 8001436:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	4618      	mov	r0, r3
 800143e:	f002 fe47 	bl	80040d0 <HAL_RCCEx_PeriphCLKConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001448:	f7ff ff6c 	bl	8001324 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800144c:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <HAL_UART_MspInit+0xb4>)
 800144e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001450:	4a18      	ldr	r2, [pc, #96]	; (80014b4 <HAL_UART_MspInit+0xb4>)
 8001452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001456:	6593      	str	r3, [r2, #88]	; 0x58
 8001458:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <HAL_UART_MspInit+0xb4>)
 800145a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001464:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <HAL_UART_MspInit+0xb4>)
 8001466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001468:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <HAL_UART_MspInit+0xb4>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001470:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <HAL_UART_MspInit+0xb4>)
 8001472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800147c:	230c      	movs	r3, #12
 800147e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001494:	2307      	movs	r3, #7
 8001496:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800149e:	4619      	mov	r1, r3
 80014a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a4:	f001 fcb6 	bl	8002e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014a8:	bf00      	nop
 80014aa:	37b8      	adds	r7, #184	; 0xb8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40004400 	.word	0x40004400
 80014b4:	40021000 	.word	0x40021000

080014b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014bc:	e7fe      	b.n	80014bc <NMI_Handler+0x4>

080014be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <HardFault_Handler+0x4>

080014c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <MemManage_Handler+0x4>

080014ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <BusFault_Handler+0x4>

080014d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <UsageFault_Handler+0x4>

080014d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001504:	f000 f892 	bl	800162c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}

0800150c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <SystemInit+0x20>)
 8001512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001516:	4a05      	ldr	r2, [pc, #20]	; (800152c <SystemInit+0x20>)
 8001518:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800151c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001530:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001568 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001534:	f7ff ffea 	bl	800150c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001538:	480c      	ldr	r0, [pc, #48]	; (800156c <LoopForever+0x6>)
  ldr r1, =_edata
 800153a:	490d      	ldr	r1, [pc, #52]	; (8001570 <LoopForever+0xa>)
  ldr r2, =_sidata
 800153c:	4a0d      	ldr	r2, [pc, #52]	; (8001574 <LoopForever+0xe>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001540:	e002      	b.n	8001548 <LoopCopyDataInit>

08001542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001546:	3304      	adds	r3, #4

08001548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800154c:	d3f9      	bcc.n	8001542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001550:	4c0a      	ldr	r4, [pc, #40]	; (800157c <LoopForever+0x16>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001554:	e001      	b.n	800155a <LoopFillZerobss>

08001556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001558:	3204      	adds	r2, #4

0800155a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800155c:	d3fb      	bcc.n	8001556 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800155e:	f004 f93f 	bl	80057e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001562:	f7ff fd6d 	bl	8001040 <main>

08001566 <LoopForever>:

LoopForever:
    b LoopForever
 8001566:	e7fe      	b.n	8001566 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001568:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800156c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001570:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001574:	080058c0 	.word	0x080058c0
  ldr r2, =_sbss
 8001578:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800157c:	20000140 	.word	0x20000140

08001580 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001580:	e7fe      	b.n	8001580 <ADC1_IRQHandler>

08001582 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800158c:	2003      	movs	r0, #3
 800158e:	f001 fc0d 	bl	8002dac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001592:	2000      	movs	r0, #0
 8001594:	f000 f80e 	bl	80015b4 <HAL_InitTick>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	71fb      	strb	r3, [r7, #7]
 80015a2:	e001      	b.n	80015a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015a4:	f7ff fec4 	bl	8001330 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015a8:	79fb      	ldrb	r3, [r7, #7]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <HAL_InitTick+0x6c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d023      	beq.n	8001610 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <HAL_InitTick+0x70>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <HAL_InitTick+0x6c>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015da:	fbb2 f3f3 	udiv	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f001 fc0b 	bl	8002dfa <HAL_SYSTICK_Config>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10f      	bne.n	800160a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b0f      	cmp	r3, #15
 80015ee:	d809      	bhi.n	8001604 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f0:	2200      	movs	r2, #0
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f001 fbe3 	bl	8002dc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015fc:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <HAL_InitTick+0x74>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e007      	b.n	8001614 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	73fb      	strb	r3, [r7, #15]
 8001608:	e004      	b.n	8001614 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]
 800160e:	e001      	b.n	8001614 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001614:	7bfb      	ldrb	r3, [r7, #15]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000014 	.word	0x20000014
 8001624:	2000000c 	.word	0x2000000c
 8001628:	20000010 	.word	0x20000010

0800162c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x20>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_IncTick+0x24>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4413      	add	r3, r2
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <HAL_IncTick+0x24>)
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000014 	.word	0x20000014
 8001650:	2000013c 	.word	0x2000013c

08001654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return uwTick;
 8001658:	4b03      	ldr	r3, [pc, #12]	; (8001668 <HAL_GetTick+0x14>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	2000013c 	.word	0x2000013c

0800166c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001674:	f7ff ffee 	bl	8001654 <HAL_GetTick>
 8001678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001684:	d005      	beq.n	8001692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001686:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <HAL_Delay+0x44>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001692:	bf00      	nop
 8001694:	f7ff ffde 	bl	8001654 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d8f7      	bhi.n	8001694 <HAL_Delay+0x28>
  {
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000014 	.word	0x20000014

080016b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	431a      	orrs	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	609a      	str	r2, [r3, #8]
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	609a      	str	r2, [r3, #8]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
 8001728:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	3360      	adds	r3, #96	; 0x60
 800172e:	461a      	mov	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <LL_ADC_SetOffset+0x44>)
 800173e:	4013      	ands	r3, r2
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	4313      	orrs	r3, r2
 800174c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001754:	bf00      	nop
 8001756:	371c      	adds	r7, #28
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	03fff000 	.word	0x03fff000

08001764 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3360      	adds	r3, #96	; 0x60
 8001772:	461a      	mov	r2, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	3360      	adds	r3, #96	; 0x60
 80017a0:	461a      	mov	r2, r3
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	431a      	orrs	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017ba:	bf00      	nop
 80017bc:	371c      	adds	r7, #28
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	615a      	str	r2, [r3, #20]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001812:	b480      	push	{r7}
 8001814:	b087      	sub	sp, #28
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	3330      	adds	r3, #48	; 0x30
 8001822:	461a      	mov	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	0a1b      	lsrs	r3, r3, #8
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	f003 030c 	and.w	r3, r3, #12
 800182e:	4413      	add	r3, r2
 8001830:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f003 031f 	and.w	r3, r3, #31
 800183c:	211f      	movs	r1, #31
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	401a      	ands	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	0e9b      	lsrs	r3, r3, #26
 800184a:	f003 011f 	and.w	r1, r3, #31
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	f003 031f 	and.w	r3, r3, #31
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	431a      	orrs	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800185e:	bf00      	nop
 8001860:	371c      	adds	r7, #28
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800186a:	b480      	push	{r7}
 800186c:	b087      	sub	sp, #28
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3314      	adds	r3, #20
 800187a:	461a      	mov	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	0e5b      	lsrs	r3, r3, #25
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	4413      	add	r3, r2
 8001888:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	0d1b      	lsrs	r3, r3, #20
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	2107      	movs	r1, #7
 8001898:	fa01 f303 	lsl.w	r3, r1, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	401a      	ands	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	0d1b      	lsrs	r3, r3, #20
 80018a4:	f003 031f 	and.w	r3, r3, #31
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	431a      	orrs	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018b4:	bf00      	nop
 80018b6:	371c      	adds	r7, #28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d8:	43db      	mvns	r3, r3
 80018da:	401a      	ands	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 0318 	and.w	r3, r3, #24
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018e4:	40d9      	lsrs	r1, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	400b      	ands	r3, r1
 80018ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ee:	431a      	orrs	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	0007ffff 	.word	0x0007ffff

08001908 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001918:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6093      	str	r3, [r2, #8]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800193c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001940:	d101      	bne.n	8001946 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001964:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001968:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001990:	d101      	bne.n	8001996 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019b8:	f043 0201 	orr.w	r2, r3, #1
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019e0:	f043 0202 	orr.w	r2, r3, #2
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d101      	bne.n	8001a0c <LL_ADC_IsEnabled+0x18>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <LL_ADC_IsEnabled+0x1a>
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d101      	bne.n	8001a32 <LL_ADC_IsDisableOngoing+0x18>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <LL_ADC_IsDisableOngoing+0x1a>
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a54:	f043 0204 	orr.w	r2, r3, #4
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a7c:	f043 0210 	orr.w	r2, r3, #16
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d101      	bne.n	8001aa8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ac6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aca:	f043 0220 	orr.w	r2, r3, #32
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d101      	bne.n	8001af6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e129      	b.n	8001d72 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d109      	bne.n	8001b40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff fc23 	bl	8001378 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fef1 	bl	800192c <LL_ADC_IsDeepPowerDownEnabled>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d004      	beq.n	8001b5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fed7 	bl	8001908 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff ff0c 	bl	800197c <LL_ADC_IsInternalRegulatorEnabled>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d115      	bne.n	8001b96 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fef0 	bl	8001954 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b74:	4b81      	ldr	r3, [pc, #516]	; (8001d7c <HAL_ADC_Init+0x278>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	099b      	lsrs	r3, r3, #6
 8001b7a:	4a81      	ldr	r2, [pc, #516]	; (8001d80 <HAL_ADC_Init+0x27c>)
 8001b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b80:	099b      	lsrs	r3, r3, #6
 8001b82:	3301      	adds	r3, #1
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b88:	e002      	b.n	8001b90 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f9      	bne.n	8001b8a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff feee 	bl	800197c <LL_ADC_IsInternalRegulatorEnabled>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10d      	bne.n	8001bc2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001baa:	f043 0210 	orr.w	r2, r3, #16
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb6:	f043 0201 	orr.w	r2, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff ff62 	bl	8001a90 <LL_ADC_REG_IsConversionOngoing>
 8001bcc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	f003 0310 	and.w	r3, r3, #16
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 80c2 	bne.w	8001d60 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f040 80be 	bne.w	8001d60 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bec:	f043 0202 	orr.w	r2, r3, #2
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fefb 	bl	80019f4 <LL_ADC_IsEnabled>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10b      	bne.n	8001c1c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c04:	485f      	ldr	r0, [pc, #380]	; (8001d84 <HAL_ADC_Init+0x280>)
 8001c06:	f7ff fef5 	bl	80019f4 <LL_ADC_IsEnabled>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d105      	bne.n	8001c1c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4619      	mov	r1, r3
 8001c16:	485c      	ldr	r0, [pc, #368]	; (8001d88 <HAL_ADC_Init+0x284>)
 8001c18:	f7ff fd4c 	bl	80016b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	7e5b      	ldrb	r3, [r3, #25]
 8001c20:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c26:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001c2c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c32:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c3a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d106      	bne.n	8001c58 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	045b      	lsls	r3, r3, #17
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d009      	beq.n	8001c74 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	4b44      	ldr	r3, [pc, #272]	; (8001d8c <HAL_ADC_Init+0x288>)
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	69b9      	ldr	r1, [r7, #24]
 8001c84:	430b      	orrs	r3, r1
 8001c86:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff26 	bl	8001ade <LL_ADC_INJ_IsConversionOngoing>
 8001c92:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d140      	bne.n	8001d1c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d13d      	bne.n	8001d1c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	7e1b      	ldrb	r3, [r3, #24]
 8001ca8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001caa:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cb2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cc2:	f023 0306 	bic.w	r3, r3, #6
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6812      	ldr	r2, [r2, #0]
 8001cca:	69b9      	ldr	r1, [r7, #24]
 8001ccc:	430b      	orrs	r3, r1
 8001cce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d118      	bne.n	8001d0c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ce4:	f023 0304 	bic.w	r3, r3, #4
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cf0:	4311      	orrs	r1, r2
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cf6:	4311      	orrs	r1, r2
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f042 0201 	orr.w	r2, r2, #1
 8001d08:	611a      	str	r2, [r3, #16]
 8001d0a:	e007      	b.n	8001d1c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0201 	bic.w	r2, r2, #1
 8001d1a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d10c      	bne.n	8001d3e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f023 010f 	bic.w	r1, r3, #15
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	1e5a      	subs	r2, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d3c:	e007      	b.n	8001d4e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 020f 	bic.w	r2, r2, #15
 8001d4c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	f023 0303 	bic.w	r3, r3, #3
 8001d56:	f043 0201 	orr.w	r2, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	659a      	str	r2, [r3, #88]	; 0x58
 8001d5e:	e007      	b.n	8001d70 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d64:	f043 0210 	orr.w	r2, r3, #16
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d70:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3720      	adds	r7, #32
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	2000000c 	.word	0x2000000c
 8001d80:	053e2d63 	.word	0x053e2d63
 8001d84:	50040000 	.word	0x50040000
 8001d88:	50040300 	.word	0x50040300
 8001d8c:	fff0c007 	.word	0xfff0c007

08001d90 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fe77 	bl	8001a90 <LL_ADC_REG_IsConversionOngoing>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d14f      	bne.n	8001e48 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_ADC_Start+0x26>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e04b      	b.n	8001e4e <HAL_ADC_Start+0xbe>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 fdd0 	bl	8002964 <ADC_Enable>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d137      	bne.n	8001e3e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001dd6:	f023 0301 	bic.w	r3, r3, #1
 8001dda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dee:	d106      	bne.n	8001dfe <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	f023 0206 	bic.w	r2, r3, #6
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dfc:	e002      	b.n	8001e04 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	221c      	movs	r2, #28
 8001e0a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fe02 	bl	8001a40 <LL_ADC_REG_StartConversion>
 8001e3c:	e006      	b.n	8001e4c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001e46:	e001      	b.n	8001e4c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d101      	bne.n	8001e6c <HAL_ADC_Stop+0x16>
 8001e68:	2302      	movs	r3, #2
 8001e6a:	e023      	b.n	8001eb4 <HAL_ADC_Stop+0x5e>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001e74:	2103      	movs	r1, #3
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 fcb8 	bl	80027ec <ADC_ConversionStop>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d111      	bne.n	8001eaa <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fdf2 	bl	8002a70 <ADC_Disable>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e9e:	f023 0301 	bic.w	r3, r3, #1
 8001ea2:	f043 0201 	orr.w	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d102      	bne.n	8001ed4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001ece:	2308      	movs	r3, #8
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	e010      	b.n	8001ef6 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d007      	beq.n	8001ef2 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	f043 0220 	orr.w	r2, r3, #32
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e06f      	b.n	8001fd2 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001ef6:	f7ff fbad 	bl	8001654 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001efc:	e021      	b.n	8001f42 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f04:	d01d      	beq.n	8001f42 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f06:	f7ff fba5 	bl	8001654 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d302      	bcc.n	8001f1c <HAL_ADC_PollForConversion+0x60>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d112      	bne.n	8001f42 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10b      	bne.n	8001f42 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	f043 0204 	orr.w	r2, r3, #4
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e047      	b.n	8001fd2 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0d6      	beq.n	8001efe <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fc43 	bl	80017ec <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01c      	beq.n	8001fa6 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	7e5b      	ldrb	r3, [r3, #25]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d118      	bne.n	8001fa6 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d111      	bne.n	8001fa6 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d105      	bne.n	8001fa6 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	f043 0201 	orr.w	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d104      	bne.n	8001fbe <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2208      	movs	r2, #8
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	e008      	b.n	8001fd0 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d103      	bne.n	8001fd0 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	220c      	movs	r2, #12
 8001fce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b0b6      	sub	sp, #216	; 0xd8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002004:	2300      	movs	r3, #0
 8002006:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x22>
 8002012:	2302      	movs	r3, #2
 8002014:	e3d5      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x7ce>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fd34 	bl	8001a90 <LL_ADC_REG_IsConversionOngoing>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	f040 83ba 	bne.w	80027a4 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b05      	cmp	r3, #5
 800203e:	d824      	bhi.n	800208a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	3b02      	subs	r3, #2
 8002046:	2b03      	cmp	r3, #3
 8002048:	d81b      	bhi.n	8002082 <HAL_ADC_ConfigChannel+0x8e>
 800204a:	a201      	add	r2, pc, #4	; (adr r2, 8002050 <HAL_ADC_ConfigChannel+0x5c>)
 800204c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002050:	08002061 	.word	0x08002061
 8002054:	08002069 	.word	0x08002069
 8002058:	08002071 	.word	0x08002071
 800205c:	08002079 	.word	0x08002079
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002060:	230c      	movs	r3, #12
 8002062:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002066:	e010      	b.n	800208a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002068:	2312      	movs	r3, #18
 800206a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800206e:	e00c      	b.n	800208a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002070:	2318      	movs	r3, #24
 8002072:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002076:	e008      	b.n	800208a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800207c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002080:	e003      	b.n	800208a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002082:	2306      	movs	r3, #6
 8002084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002088:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002098:	f7ff fbbb 	bl	8001812 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fcf5 	bl	8001a90 <LL_ADC_REG_IsConversionOngoing>
 80020a6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fd15 	bl	8001ade <LL_ADC_INJ_IsConversionOngoing>
 80020b4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f040 81bf 	bne.w	8002440 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f040 81ba 	bne.w	8002440 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020d4:	d10f      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6818      	ldr	r0, [r3, #0]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2200      	movs	r2, #0
 80020e0:	4619      	mov	r1, r3
 80020e2:	f7ff fbc2 	bl	800186a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fb69 	bl	80017c6 <LL_ADC_SetSamplingTimeCommonConfig>
 80020f4:	e00e      	b.n	8002114 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6818      	ldr	r0, [r3, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	6819      	ldr	r1, [r3, #0]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	461a      	mov	r2, r3
 8002104:	f7ff fbb1 	bl	800186a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fb59 	bl	80017c6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	08db      	lsrs	r3, r3, #3
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2b04      	cmp	r3, #4
 8002134:	d00a      	beq.n	800214c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	6919      	ldr	r1, [r3, #16]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002146:	f7ff fae9 	bl	800171c <LL_ADC_SetOffset>
 800214a:	e179      	b.n	8002440 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fb06 	bl	8001764 <LL_ADC_GetOffsetChannel>
 8002158:	4603      	mov	r3, r0
 800215a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10a      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x184>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2100      	movs	r1, #0
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fafb 	bl	8001764 <LL_ADC_GetOffsetChannel>
 800216e:	4603      	mov	r3, r0
 8002170:	0e9b      	lsrs	r3, r3, #26
 8002172:	f003 021f 	and.w	r2, r3, #31
 8002176:	e01e      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x1c2>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2100      	movs	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff faf0 	bl	8001764 <LL_ADC_GetOffsetChannel>
 8002184:	4603      	mov	r3, r0
 8002186:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800218e:	fa93 f3a3 	rbit	r3, r3
 8002192:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800219a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800219e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80021a6:	2320      	movs	r3, #32
 80021a8:	e004      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80021aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d105      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x1da>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	0e9b      	lsrs	r3, r3, #26
 80021c8:	f003 031f 	and.w	r3, r3, #31
 80021cc:	e018      	b.n	8002200 <HAL_ADC_ConfigChannel+0x20c>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80021e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80021ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80021f2:	2320      	movs	r3, #32
 80021f4:	e004      	b.n	8002200 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80021f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002200:	429a      	cmp	r2, r3
 8002202:	d106      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2200      	movs	r2, #0
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fabf 	bl	8001790 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2101      	movs	r1, #1
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff faa3 	bl	8001764 <LL_ADC_GetOffsetChannel>
 800221e:	4603      	mov	r3, r0
 8002220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10a      	bne.n	800223e <HAL_ADC_ConfigChannel+0x24a>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2101      	movs	r1, #1
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fa98 	bl	8001764 <LL_ADC_GetOffsetChannel>
 8002234:	4603      	mov	r3, r0
 8002236:	0e9b      	lsrs	r3, r3, #26
 8002238:	f003 021f 	and.w	r2, r3, #31
 800223c:	e01e      	b.n	800227c <HAL_ADC_ConfigChannel+0x288>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2101      	movs	r1, #1
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fa8d 	bl	8001764 <LL_ADC_GetOffsetChannel>
 800224a:	4603      	mov	r3, r0
 800224c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002250:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002254:	fa93 f3a3 	rbit	r3, r3
 8002258:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800225c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002260:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002264:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800226c:	2320      	movs	r3, #32
 800226e:	e004      	b.n	800227a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002270:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002274:	fab3 f383 	clz	r3, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002284:	2b00      	cmp	r3, #0
 8002286:	d105      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x2a0>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0e9b      	lsrs	r3, r3, #26
 800228e:	f003 031f 	and.w	r3, r3, #31
 8002292:	e018      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x2d2>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80022a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80022b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80022b8:	2320      	movs	r3, #32
 80022ba:	e004      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80022bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022c0:	fab3 f383 	clz	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d106      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2200      	movs	r2, #0
 80022d0:	2101      	movs	r1, #1
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff fa5c 	bl	8001790 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2102      	movs	r1, #2
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fa40 	bl	8001764 <LL_ADC_GetOffsetChannel>
 80022e4:	4603      	mov	r3, r0
 80022e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10a      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x310>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2102      	movs	r1, #2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fa35 	bl	8001764 <LL_ADC_GetOffsetChannel>
 80022fa:	4603      	mov	r3, r0
 80022fc:	0e9b      	lsrs	r3, r3, #26
 80022fe:	f003 021f 	and.w	r2, r3, #31
 8002302:	e01e      	b.n	8002342 <HAL_ADC_ConfigChannel+0x34e>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2102      	movs	r1, #2
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff fa2a 	bl	8001764 <LL_ADC_GetOffsetChannel>
 8002310:	4603      	mov	r3, r0
 8002312:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800231a:	fa93 f3a3 	rbit	r3, r3
 800231e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002322:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002326:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800232a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002332:	2320      	movs	r3, #32
 8002334:	e004      	b.n	8002340 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234a:	2b00      	cmp	r3, #0
 800234c:	d105      	bne.n	800235a <HAL_ADC_ConfigChannel+0x366>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	0e9b      	lsrs	r3, r3, #26
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	e014      	b.n	8002384 <HAL_ADC_ConfigChannel+0x390>
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800236a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800236e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002376:	2320      	movs	r3, #32
 8002378:	e004      	b.n	8002384 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800237a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002384:	429a      	cmp	r2, r3
 8002386:	d106      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2200      	movs	r2, #0
 800238e:	2102      	movs	r1, #2
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff f9fd 	bl	8001790 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2103      	movs	r1, #3
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff f9e1 	bl	8001764 <LL_ADC_GetOffsetChannel>
 80023a2:	4603      	mov	r3, r0
 80023a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10a      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x3ce>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2103      	movs	r1, #3
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff f9d6 	bl	8001764 <LL_ADC_GetOffsetChannel>
 80023b8:	4603      	mov	r3, r0
 80023ba:	0e9b      	lsrs	r3, r3, #26
 80023bc:	f003 021f 	and.w	r2, r3, #31
 80023c0:	e017      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x3fe>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2103      	movs	r1, #3
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff f9cb 	bl	8001764 <LL_ADC_GetOffsetChannel>
 80023ce:	4603      	mov	r3, r0
 80023d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023d4:	fa93 f3a3 	rbit	r3, r3
 80023d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80023da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023dc:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80023de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80023e4:	2320      	movs	r3, #32
 80023e6:	e003      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80023e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d105      	bne.n	800240a <HAL_ADC_ConfigChannel+0x416>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	0e9b      	lsrs	r3, r3, #26
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	e011      	b.n	800242e <HAL_ADC_ConfigChannel+0x43a>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002418:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800241a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800241c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002422:	2320      	movs	r3, #32
 8002424:	e003      	b.n	800242e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002426:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002428:	fab3 f383 	clz	r3, r3
 800242c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800242e:	429a      	cmp	r2, r3
 8002430:	d106      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2200      	movs	r2, #0
 8002438:	2103      	movs	r1, #3
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff f9a8 	bl	8001790 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fad5 	bl	80019f4 <LL_ADC_IsEnabled>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	f040 813f 	bne.w	80026d0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6819      	ldr	r1, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	461a      	mov	r2, r3
 8002460:	f7ff fa2e 	bl	80018c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4a8e      	ldr	r2, [pc, #568]	; (80026a4 <HAL_ADC_ConfigChannel+0x6b0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	f040 8130 	bne.w	80026d0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10b      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x4a4>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0e9b      	lsrs	r3, r3, #26
 8002486:	3301      	adds	r3, #1
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	2b09      	cmp	r3, #9
 800248e:	bf94      	ite	ls
 8002490:	2301      	movls	r3, #1
 8002492:	2300      	movhi	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	e019      	b.n	80024cc <HAL_ADC_ConfigChannel+0x4d8>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80024a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80024aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80024b0:	2320      	movs	r3, #32
 80024b2:	e003      	b.n	80024bc <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80024b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	3301      	adds	r3, #1
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	2b09      	cmp	r3, #9
 80024c4:	bf94      	ite	ls
 80024c6:	2301      	movls	r3, #1
 80024c8:	2300      	movhi	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d079      	beq.n	80025c4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d107      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x4f8>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	0e9b      	lsrs	r3, r3, #26
 80024e2:	3301      	adds	r3, #1
 80024e4:	069b      	lsls	r3, r3, #26
 80024e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ea:	e015      	b.n	8002518 <HAL_ADC_ConfigChannel+0x524>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f4:	fa93 f3a3 	rbit	r3, r3
 80024f8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80024fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024fc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80024fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002504:	2320      	movs	r3, #32
 8002506:	e003      	b.n	8002510 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	3301      	adds	r3, #1
 8002512:	069b      	lsls	r3, r3, #26
 8002514:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002520:	2b00      	cmp	r3, #0
 8002522:	d109      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x544>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	0e9b      	lsrs	r3, r3, #26
 800252a:	3301      	adds	r3, #1
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	2101      	movs	r1, #1
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
 8002536:	e017      	b.n	8002568 <HAL_ADC_ConfigChannel+0x574>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002548:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800254a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002550:	2320      	movs	r3, #32
 8002552:	e003      	b.n	800255c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	3301      	adds	r3, #1
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	2101      	movs	r1, #1
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	ea42 0103 	orr.w	r1, r2, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <HAL_ADC_ConfigChannel+0x59a>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	0e9b      	lsrs	r3, r3, #26
 800257e:	3301      	adds	r3, #1
 8002580:	f003 021f 	and.w	r2, r3, #31
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	051b      	lsls	r3, r3, #20
 800258c:	e018      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x5cc>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80025a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80025a6:	2320      	movs	r3, #32
 80025a8:	e003      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80025aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ac:	fab3 f383 	clz	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	3301      	adds	r3, #1
 80025b4:	f003 021f 	and.w	r2, r3, #31
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025c0:	430b      	orrs	r3, r1
 80025c2:	e080      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d107      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x5ec>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	0e9b      	lsrs	r3, r3, #26
 80025d6:	3301      	adds	r3, #1
 80025d8:	069b      	lsls	r3, r3, #26
 80025da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025de:	e015      	b.n	800260c <HAL_ADC_ConfigChannel+0x618>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80025f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80025f8:	2320      	movs	r3, #32
 80025fa:	e003      	b.n	8002604 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80025fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	3301      	adds	r3, #1
 8002606:	069b      	lsls	r3, r3, #26
 8002608:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002614:	2b00      	cmp	r3, #0
 8002616:	d109      	bne.n	800262c <HAL_ADC_ConfigChannel+0x638>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	0e9b      	lsrs	r3, r3, #26
 800261e:	3301      	adds	r3, #1
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	2101      	movs	r1, #1
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	e017      	b.n	800265c <HAL_ADC_ConfigChannel+0x668>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	61bb      	str	r3, [r7, #24]
  return result;
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002644:	2320      	movs	r3, #32
 8002646:	e003      	b.n	8002650 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	3301      	adds	r3, #1
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	2101      	movs	r1, #1
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	ea42 0103 	orr.w	r1, r2, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10d      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x694>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	0e9b      	lsrs	r3, r3, #26
 8002672:	3301      	adds	r3, #1
 8002674:	f003 021f 	and.w	r2, r3, #31
 8002678:	4613      	mov	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4413      	add	r3, r2
 800267e:	3b1e      	subs	r3, #30
 8002680:	051b      	lsls	r3, r3, #20
 8002682:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002686:	e01d      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x6d0>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	60fb      	str	r3, [r7, #12]
  return result;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d103      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80026a0:	2320      	movs	r3, #32
 80026a2:	e005      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x6bc>
 80026a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	3301      	adds	r3, #1
 80026b2:	f003 021f 	and.w	r2, r3, #31
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	3b1e      	subs	r3, #30
 80026be:	051b      	lsls	r3, r3, #20
 80026c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ca:	4619      	mov	r1, r3
 80026cc:	f7ff f8cd 	bl	800186a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b3d      	ldr	r3, [pc, #244]	; (80027cc <HAL_ADC_ConfigChannel+0x7d8>)
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d06c      	beq.n	80027b6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026dc:	483c      	ldr	r0, [pc, #240]	; (80027d0 <HAL_ADC_ConfigChannel+0x7dc>)
 80026de:	f7ff f80f 	bl	8001700 <LL_ADC_GetCommonPathInternalCh>
 80026e2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a3a      	ldr	r2, [pc, #232]	; (80027d4 <HAL_ADC_ConfigChannel+0x7e0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d127      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d121      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a35      	ldr	r2, [pc, #212]	; (80027d8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d157      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002706:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800270a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800270e:	4619      	mov	r1, r3
 8002710:	482f      	ldr	r0, [pc, #188]	; (80027d0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002712:	f7fe ffe2 	bl	80016da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002716:	4b31      	ldr	r3, [pc, #196]	; (80027dc <HAL_ADC_ConfigChannel+0x7e8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	099b      	lsrs	r3, r3, #6
 800271c:	4a30      	ldr	r2, [pc, #192]	; (80027e0 <HAL_ADC_ConfigChannel+0x7ec>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	099b      	lsrs	r3, r3, #6
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	4613      	mov	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002730:	e002      	b.n	8002738 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	3b01      	subs	r3, #1
 8002736:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f9      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800273e:	e03a      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a27      	ldr	r2, [pc, #156]	; (80027e4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d113      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800274a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800274e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10d      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1f      	ldr	r2, [pc, #124]	; (80027d8 <HAL_ADC_ConfigChannel+0x7e4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d12a      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002760:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002764:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002768:	4619      	mov	r1, r3
 800276a:	4819      	ldr	r0, [pc, #100]	; (80027d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800276c:	f7fe ffb5 	bl	80016da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002770:	e021      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a1c      	ldr	r2, [pc, #112]	; (80027e8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d11c      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800277c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d116      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <HAL_ADC_ConfigChannel+0x7e4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d111      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002792:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002796:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800279a:	4619      	mov	r1, r3
 800279c:	480c      	ldr	r0, [pc, #48]	; (80027d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800279e:	f7fe ff9c 	bl	80016da <LL_ADC_SetCommonPathInternalCh>
 80027a2:	e008      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a8:	f043 0220 	orr.w	r2, r3, #32
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80027be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	37d8      	adds	r7, #216	; 0xd8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	80080000 	.word	0x80080000
 80027d0:	50040300 	.word	0x50040300
 80027d4:	c7520000 	.word	0xc7520000
 80027d8:	50040000 	.word	0x50040000
 80027dc:	2000000c 	.word	0x2000000c
 80027e0:	053e2d63 	.word	0x053e2d63
 80027e4:	cb840000 	.word	0xcb840000
 80027e8:	80000001 	.word	0x80000001

080027ec <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff f944 	bl	8001a90 <LL_ADC_REG_IsConversionOngoing>
 8002808:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff f965 	bl	8001ade <LL_ADC_INJ_IsConversionOngoing>
 8002814:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d103      	bne.n	8002824 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 8098 	beq.w	8002954 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d02a      	beq.n	8002888 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	7e5b      	ldrb	r3, [r3, #25]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d126      	bne.n	8002888 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	7e1b      	ldrb	r3, [r3, #24]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d122      	bne.n	8002888 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002842:	2301      	movs	r3, #1
 8002844:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002846:	e014      	b.n	8002872 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	4a45      	ldr	r2, [pc, #276]	; (8002960 <ADC_ConversionStop+0x174>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d90d      	bls.n	800286c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002854:	f043 0210 	orr.w	r2, r3, #16
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002860:	f043 0201 	orr.w	r2, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e074      	b.n	8002956 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	3301      	adds	r3, #1
 8002870:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287c:	2b40      	cmp	r3, #64	; 0x40
 800287e:	d1e3      	bne.n	8002848 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2240      	movs	r2, #64	; 0x40
 8002886:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d014      	beq.n	80028b8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff f8fc 	bl	8001a90 <LL_ADC_REG_IsConversionOngoing>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00c      	beq.n	80028b8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff f8b9 	bl	8001a1a <LL_ADC_IsDisableOngoing>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d104      	bne.n	80028b8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff f8d8 	bl	8001a68 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d014      	beq.n	80028e8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff f90b 	bl	8001ade <LL_ADC_INJ_IsConversionOngoing>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00c      	beq.n	80028e8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff f8a1 	bl	8001a1a <LL_ADC_IsDisableOngoing>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d104      	bne.n	80028e8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff f8e7 	bl	8001ab6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d005      	beq.n	80028fa <ADC_ConversionStop+0x10e>
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d105      	bne.n	8002900 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80028f4:	230c      	movs	r3, #12
 80028f6:	617b      	str	r3, [r7, #20]
        break;
 80028f8:	e005      	b.n	8002906 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80028fa:	2308      	movs	r3, #8
 80028fc:	617b      	str	r3, [r7, #20]
        break;
 80028fe:	e002      	b.n	8002906 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002900:	2304      	movs	r3, #4
 8002902:	617b      	str	r3, [r7, #20]
        break;
 8002904:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002906:	f7fe fea5 	bl	8001654 <HAL_GetTick>
 800290a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800290c:	e01b      	b.n	8002946 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800290e:	f7fe fea1 	bl	8001654 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b05      	cmp	r3, #5
 800291a:	d914      	bls.n	8002946 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00d      	beq.n	8002946 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292e:	f043 0210 	orr.w	r2, r3, #16
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293a:	f043 0201 	orr.w	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e007      	b.n	8002956 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1dc      	bne.n	800290e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3720      	adds	r7, #32
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	a33fffff 	.word	0xa33fffff

08002964 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800296c:	2300      	movs	r3, #0
 800296e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff f83d 	bl	80019f4 <LL_ADC_IsEnabled>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d169      	bne.n	8002a54 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	4b36      	ldr	r3, [pc, #216]	; (8002a60 <ADC_Enable+0xfc>)
 8002988:	4013      	ands	r3, r2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00d      	beq.n	80029aa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002992:	f043 0210 	orr.w	r2, r3, #16
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299e:	f043 0201 	orr.w	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e055      	b.n	8002a56 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fe fff8 	bl	80019a4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029b4:	482b      	ldr	r0, [pc, #172]	; (8002a64 <ADC_Enable+0x100>)
 80029b6:	f7fe fea3 	bl	8001700 <LL_ADC_GetCommonPathInternalCh>
 80029ba:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80029bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d013      	beq.n	80029ec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029c4:	4b28      	ldr	r3, [pc, #160]	; (8002a68 <ADC_Enable+0x104>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	099b      	lsrs	r3, r3, #6
 80029ca:	4a28      	ldr	r2, [pc, #160]	; (8002a6c <ADC_Enable+0x108>)
 80029cc:	fba2 2303 	umull	r2, r3, r2, r3
 80029d0:	099b      	lsrs	r3, r3, #6
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	4613      	mov	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029de:	e002      	b.n	80029e6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f9      	bne.n	80029e0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029ec:	f7fe fe32 	bl	8001654 <HAL_GetTick>
 80029f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029f2:	e028      	b.n	8002a46 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fe fffb 	bl	80019f4 <LL_ADC_IsEnabled>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe ffcb 	bl	80019a4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a0e:	f7fe fe21 	bl	8001654 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d914      	bls.n	8002a46 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d00d      	beq.n	8002a46 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2e:	f043 0210 	orr.w	r2, r3, #16
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3a:	f043 0201 	orr.w	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e007      	b.n	8002a56 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d1cf      	bne.n	80029f4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	8000003f 	.word	0x8000003f
 8002a64:	50040300 	.word	0x50040300
 8002a68:	2000000c 	.word	0x2000000c
 8002a6c:	053e2d63 	.word	0x053e2d63

08002a70 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fe ffcc 	bl	8001a1a <LL_ADC_IsDisableOngoing>
 8002a82:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fe ffb3 	bl	80019f4 <LL_ADC_IsEnabled>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d047      	beq.n	8002b24 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d144      	bne.n	8002b24 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 030d 	and.w	r3, r3, #13
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d10c      	bne.n	8002ac2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fe ff8d 	bl	80019cc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002aba:	f7fe fdcb 	bl	8001654 <HAL_GetTick>
 8002abe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ac0:	e029      	b.n	8002b16 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac6:	f043 0210 	orr.w	r2, r3, #16
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad2:	f043 0201 	orr.w	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e023      	b.n	8002b26 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ade:	f7fe fdb9 	bl	8001654 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d914      	bls.n	8002b16 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00d      	beq.n	8002b16 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afe:	f043 0210 	orr.w	r2, r3, #16
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0a:	f043 0201 	orr.w	r2, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e007      	b.n	8002b26 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1dc      	bne.n	8002ade <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <LL_ADC_StartCalibration>:
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002b40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	609a      	str	r2, [r3, #8]
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_ADC_IsCalibrationOnGoing>:
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b74:	d101      	bne.n	8002b7a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ADCEx_Calibration_Start+0x1c>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e04d      	b.n	8002c40 <HAL_ADCEx_Calibration_Start+0xb8>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff ff5f 	bl	8002a70 <ADC_Disable>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d136      	bne.n	8002c2a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bc4:	f023 0302 	bic.w	r3, r3, #2
 8002bc8:	f043 0202 	orr.w	r2, r3, #2
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	659a      	str	r2, [r3, #88]	; 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6839      	ldr	r1, [r7, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7ff ffa9 	bl	8002b2e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002bdc:	e014      	b.n	8002c08 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	3301      	adds	r3, #1
 8002be2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8002bea:	d30d      	bcc.n	8002c08 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	f023 0312 	bic.w	r3, r3, #18
 8002bf4:	f043 0210 	orr.w	r2, r3, #16
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e01b      	b.n	8002c40 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ffa7 	bl	8002b60 <LL_ADC_IsCalibrationOnGoing>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e2      	bne.n	8002bde <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1c:	f023 0303 	bic.w	r3, r3, #3
 8002c20:	f043 0201 	orr.w	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	659a      	str	r2, [r3, #88]	; 0x58
 8002c28:	e005      	b.n	8002c36 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2e:	f043 0210 	orr.w	r2, r3, #16
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c58:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <__NVIC_SetPriorityGrouping+0x44>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c64:	4013      	ands	r3, r2
 8002c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c7a:	4a04      	ldr	r2, [pc, #16]	; (8002c8c <__NVIC_SetPriorityGrouping+0x44>)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	60d3      	str	r3, [r2, #12]
}
 8002c80:	bf00      	nop
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c94:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	0a1b      	lsrs	r3, r3, #8
 8002c9a:	f003 0307 	and.w	r3, r3, #7
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	6039      	str	r1, [r7, #0]
 8002cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	db0a      	blt.n	8002cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	490c      	ldr	r1, [pc, #48]	; (8002cf8 <__NVIC_SetPriority+0x4c>)
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	0112      	lsls	r2, r2, #4
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	440b      	add	r3, r1
 8002cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cd4:	e00a      	b.n	8002cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	4908      	ldr	r1, [pc, #32]	; (8002cfc <__NVIC_SetPriority+0x50>)
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	3b04      	subs	r3, #4
 8002ce4:	0112      	lsls	r2, r2, #4
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	440b      	add	r3, r1
 8002cea:	761a      	strb	r2, [r3, #24]
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000e100 	.word	0xe000e100
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b089      	sub	sp, #36	; 0x24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f1c3 0307 	rsb	r3, r3, #7
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	bf28      	it	cs
 8002d1e:	2304      	movcs	r3, #4
 8002d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	3304      	adds	r3, #4
 8002d26:	2b06      	cmp	r3, #6
 8002d28:	d902      	bls.n	8002d30 <NVIC_EncodePriority+0x30>
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3b03      	subs	r3, #3
 8002d2e:	e000      	b.n	8002d32 <NVIC_EncodePriority+0x32>
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d34:	f04f 32ff 	mov.w	r2, #4294967295
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43da      	mvns	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	401a      	ands	r2, r3
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d48:	f04f 31ff 	mov.w	r1, #4294967295
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	43d9      	mvns	r1, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d58:	4313      	orrs	r3, r2
         );
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3724      	adds	r7, #36	; 0x24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d78:	d301      	bcc.n	8002d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e00f      	b.n	8002d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d7e:	4a0a      	ldr	r2, [pc, #40]	; (8002da8 <SysTick_Config+0x40>)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d86:	210f      	movs	r1, #15
 8002d88:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8c:	f7ff ff8e 	bl	8002cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <SysTick_Config+0x40>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d96:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <SysTick_Config+0x40>)
 8002d98:	2207      	movs	r2, #7
 8002d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	e000e010 	.word	0xe000e010

08002dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7ff ff47 	bl	8002c48 <__NVIC_SetPriorityGrouping>
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b086      	sub	sp, #24
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	4603      	mov	r3, r0
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	607a      	str	r2, [r7, #4]
 8002dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dd4:	f7ff ff5c 	bl	8002c90 <__NVIC_GetPriorityGrouping>
 8002dd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68b9      	ldr	r1, [r7, #8]
 8002dde:	6978      	ldr	r0, [r7, #20]
 8002de0:	f7ff ff8e 	bl	8002d00 <NVIC_EncodePriority>
 8002de4:	4602      	mov	r2, r0
 8002de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dea:	4611      	mov	r1, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff5d 	bl	8002cac <__NVIC_SetPriority>
}
 8002df2:	bf00      	nop
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff ffb0 	bl	8002d68 <SysTick_Config>
 8002e08:	4603      	mov	r3, r0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b087      	sub	sp, #28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e22:	e166      	b.n	80030f2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	2101      	movs	r1, #1
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e30:	4013      	ands	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8158 	beq.w	80030ec <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d005      	beq.n	8002e54 <HAL_GPIO_Init+0x40>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d130      	bne.n	8002eb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	2203      	movs	r2, #3
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4013      	ands	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	091b      	lsrs	r3, r3, #4
 8002ea0:	f003 0201 	and.w	r2, r3, #1
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d017      	beq.n	8002ef2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	2203      	movs	r2, #3
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d123      	bne.n	8002f46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	08da      	lsrs	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3208      	adds	r2, #8
 8002f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	220f      	movs	r2, #15
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	691a      	ldr	r2, [r3, #16]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	08da      	lsrs	r2, r3, #3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3208      	adds	r2, #8
 8002f40:	6939      	ldr	r1, [r7, #16]
 8002f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	2203      	movs	r2, #3
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	43db      	mvns	r3, r3
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f003 0203 	and.w	r2, r3, #3
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 80b2 	beq.w	80030ec <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f88:	4b61      	ldr	r3, [pc, #388]	; (8003110 <HAL_GPIO_Init+0x2fc>)
 8002f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8c:	4a60      	ldr	r2, [pc, #384]	; (8003110 <HAL_GPIO_Init+0x2fc>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6613      	str	r3, [r2, #96]	; 0x60
 8002f94:	4b5e      	ldr	r3, [pc, #376]	; (8003110 <HAL_GPIO_Init+0x2fc>)
 8002f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fa0:	4a5c      	ldr	r2, [pc, #368]	; (8003114 <HAL_GPIO_Init+0x300>)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	089b      	lsrs	r3, r3, #2
 8002fa6:	3302      	adds	r3, #2
 8002fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	220f      	movs	r2, #15
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fca:	d02b      	beq.n	8003024 <HAL_GPIO_Init+0x210>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a52      	ldr	r2, [pc, #328]	; (8003118 <HAL_GPIO_Init+0x304>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d025      	beq.n	8003020 <HAL_GPIO_Init+0x20c>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a51      	ldr	r2, [pc, #324]	; (800311c <HAL_GPIO_Init+0x308>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d01f      	beq.n	800301c <HAL_GPIO_Init+0x208>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a50      	ldr	r2, [pc, #320]	; (8003120 <HAL_GPIO_Init+0x30c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d019      	beq.n	8003018 <HAL_GPIO_Init+0x204>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a4f      	ldr	r2, [pc, #316]	; (8003124 <HAL_GPIO_Init+0x310>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d013      	beq.n	8003014 <HAL_GPIO_Init+0x200>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a4e      	ldr	r2, [pc, #312]	; (8003128 <HAL_GPIO_Init+0x314>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00d      	beq.n	8003010 <HAL_GPIO_Init+0x1fc>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a4d      	ldr	r2, [pc, #308]	; (800312c <HAL_GPIO_Init+0x318>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d007      	beq.n	800300c <HAL_GPIO_Init+0x1f8>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a4c      	ldr	r2, [pc, #304]	; (8003130 <HAL_GPIO_Init+0x31c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d101      	bne.n	8003008 <HAL_GPIO_Init+0x1f4>
 8003004:	2307      	movs	r3, #7
 8003006:	e00e      	b.n	8003026 <HAL_GPIO_Init+0x212>
 8003008:	2308      	movs	r3, #8
 800300a:	e00c      	b.n	8003026 <HAL_GPIO_Init+0x212>
 800300c:	2306      	movs	r3, #6
 800300e:	e00a      	b.n	8003026 <HAL_GPIO_Init+0x212>
 8003010:	2305      	movs	r3, #5
 8003012:	e008      	b.n	8003026 <HAL_GPIO_Init+0x212>
 8003014:	2304      	movs	r3, #4
 8003016:	e006      	b.n	8003026 <HAL_GPIO_Init+0x212>
 8003018:	2303      	movs	r3, #3
 800301a:	e004      	b.n	8003026 <HAL_GPIO_Init+0x212>
 800301c:	2302      	movs	r3, #2
 800301e:	e002      	b.n	8003026 <HAL_GPIO_Init+0x212>
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <HAL_GPIO_Init+0x212>
 8003024:	2300      	movs	r3, #0
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	f002 0203 	and.w	r2, r2, #3
 800302c:	0092      	lsls	r2, r2, #2
 800302e:	4093      	lsls	r3, r2
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003036:	4937      	ldr	r1, [pc, #220]	; (8003114 <HAL_GPIO_Init+0x300>)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	089b      	lsrs	r3, r3, #2
 800303c:	3302      	adds	r3, #2
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003044:	4b3b      	ldr	r3, [pc, #236]	; (8003134 <HAL_GPIO_Init+0x320>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	43db      	mvns	r3, r3
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4013      	ands	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003068:	4a32      	ldr	r2, [pc, #200]	; (8003134 <HAL_GPIO_Init+0x320>)
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800306e:	4b31      	ldr	r3, [pc, #196]	; (8003134 <HAL_GPIO_Init+0x320>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	43db      	mvns	r3, r3
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4013      	ands	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003092:	4a28      	ldr	r2, [pc, #160]	; (8003134 <HAL_GPIO_Init+0x320>)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003098:	4b26      	ldr	r3, [pc, #152]	; (8003134 <HAL_GPIO_Init+0x320>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	4013      	ands	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030bc:	4a1d      	ldr	r2, [pc, #116]	; (8003134 <HAL_GPIO_Init+0x320>)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80030c2:	4b1c      	ldr	r3, [pc, #112]	; (8003134 <HAL_GPIO_Init+0x320>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	43db      	mvns	r3, r3
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4013      	ands	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030e6:	4a13      	ldr	r2, [pc, #76]	; (8003134 <HAL_GPIO_Init+0x320>)
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	3301      	adds	r3, #1
 80030f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f47f ae91 	bne.w	8002e24 <HAL_GPIO_Init+0x10>
  }
}
 8003102:	bf00      	nop
 8003104:	bf00      	nop
 8003106:	371c      	adds	r7, #28
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	40021000 	.word	0x40021000
 8003114:	40010000 	.word	0x40010000
 8003118:	48000400 	.word	0x48000400
 800311c:	48000800 	.word	0x48000800
 8003120:	48000c00 	.word	0x48000c00
 8003124:	48001000 	.word	0x48001000
 8003128:	48001400 	.word	0x48001400
 800312c:	48001800 	.word	0x48001800
 8003130:	48001c00 	.word	0x48001c00
 8003134:	40010400 	.word	0x40010400

08003138 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	887b      	ldrh	r3, [r7, #2]
 800314a:	4013      	ands	r3, r2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
 8003154:	e001      	b.n	800315a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003156:	2300      	movs	r3, #0
 8003158:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800315a:	7bfb      	ldrb	r3, [r7, #15]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	807b      	strh	r3, [r7, #2]
 8003174:	4613      	mov	r3, r2
 8003176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003178:	787b      	ldrb	r3, [r7, #1]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800317e:	887a      	ldrh	r2, [r7, #2]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003184:	e002      	b.n	800318c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003186:	887a      	ldrh	r2, [r7, #2]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800319c:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a8:	d102      	bne.n	80031b0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80031aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ae:	e00b      	b.n	80031c8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80031b0:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80031b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031be:	d102      	bne.n	80031c6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80031c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031c4:	e000      	b.n	80031c8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80031c6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40007000 	.word	0x40007000

080031d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d141      	bne.n	800326a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031e6:	4b4b      	ldr	r3, [pc, #300]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f2:	d131      	bne.n	8003258 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031f4:	4b47      	ldr	r3, [pc, #284]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031fa:	4a46      	ldr	r2, [pc, #280]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003200:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003204:	4b43      	ldr	r3, [pc, #268]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800320c:	4a41      	ldr	r2, [pc, #260]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003212:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003214:	4b40      	ldr	r3, [pc, #256]	; (8003318 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2232      	movs	r2, #50	; 0x32
 800321a:	fb02 f303 	mul.w	r3, r2, r3
 800321e:	4a3f      	ldr	r2, [pc, #252]	; (800331c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003220:	fba2 2303 	umull	r2, r3, r2, r3
 8003224:	0c9b      	lsrs	r3, r3, #18
 8003226:	3301      	adds	r3, #1
 8003228:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800322a:	e002      	b.n	8003232 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	3b01      	subs	r3, #1
 8003230:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003232:	4b38      	ldr	r3, [pc, #224]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323e:	d102      	bne.n	8003246 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f2      	bne.n	800322c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003246:	4b33      	ldr	r3, [pc, #204]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003252:	d158      	bne.n	8003306 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e057      	b.n	8003308 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003258:	4b2e      	ldr	r3, [pc, #184]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800325e:	4a2d      	ldr	r2, [pc, #180]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003264:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003268:	e04d      	b.n	8003306 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003270:	d141      	bne.n	80032f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003272:	4b28      	ldr	r3, [pc, #160]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800327a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327e:	d131      	bne.n	80032e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003280:	4b24      	ldr	r3, [pc, #144]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003286:	4a23      	ldr	r2, [pc, #140]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003290:	4b20      	ldr	r3, [pc, #128]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003298:	4a1e      	ldr	r2, [pc, #120]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800329e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80032a0:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2232      	movs	r2, #50	; 0x32
 80032a6:	fb02 f303 	mul.w	r3, r2, r3
 80032aa:	4a1c      	ldr	r2, [pc, #112]	; (800331c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032ac:	fba2 2303 	umull	r2, r3, r2, r3
 80032b0:	0c9b      	lsrs	r3, r3, #18
 80032b2:	3301      	adds	r3, #1
 80032b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032b6:	e002      	b.n	80032be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032be:	4b15      	ldr	r3, [pc, #84]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ca:	d102      	bne.n	80032d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f2      	bne.n	80032b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032d2:	4b10      	ldr	r3, [pc, #64]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032de:	d112      	bne.n	8003306 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e011      	b.n	8003308 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ea:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032f4:	e007      	b.n	8003306 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032f6:	4b07      	ldr	r3, [pc, #28]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032fe:	4a05      	ldr	r2, [pc, #20]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003300:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003304:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	40007000 	.word	0x40007000
 8003318:	2000000c 	.word	0x2000000c
 800331c:	431bde83 	.word	0x431bde83

08003320 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d102      	bne.n	8003334 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	f000 bc08 	b.w	8003b44 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003334:	4b96      	ldr	r3, [pc, #600]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 030c 	and.w	r3, r3, #12
 800333c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800333e:	4b94      	ldr	r3, [pc, #592]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 80e4 	beq.w	800351e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <HAL_RCC_OscConfig+0x4c>
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2b0c      	cmp	r3, #12
 8003360:	f040 808b 	bne.w	800347a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	2b01      	cmp	r3, #1
 8003368:	f040 8087 	bne.w	800347a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800336c:	4b88      	ldr	r3, [pc, #544]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_OscConfig+0x64>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e3df      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1a      	ldr	r2, [r3, #32]
 8003388:	4b81      	ldr	r3, [pc, #516]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d004      	beq.n	800339e <HAL_RCC_OscConfig+0x7e>
 8003394:	4b7e      	ldr	r3, [pc, #504]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800339c:	e005      	b.n	80033aa <HAL_RCC_OscConfig+0x8a>
 800339e:	4b7c      	ldr	r3, [pc, #496]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d223      	bcs.n	80033f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fdcc 	bl	8003f50 <RCC_SetFlashLatencyFromMSIRange>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e3c0      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033c2:	4b73      	ldr	r3, [pc, #460]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a72      	ldr	r2, [pc, #456]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033c8:	f043 0308 	orr.w	r3, r3, #8
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b70      	ldr	r3, [pc, #448]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	496d      	ldr	r1, [pc, #436]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033e0:	4b6b      	ldr	r3, [pc, #428]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	4968      	ldr	r1, [pc, #416]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	604b      	str	r3, [r1, #4]
 80033f4:	e025      	b.n	8003442 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033f6:	4b66      	ldr	r3, [pc, #408]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a65      	ldr	r2, [pc, #404]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033fc:	f043 0308 	orr.w	r3, r3, #8
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b63      	ldr	r3, [pc, #396]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	4960      	ldr	r1, [pc, #384]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003410:	4313      	orrs	r3, r2
 8003412:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003414:	4b5e      	ldr	r3, [pc, #376]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	495b      	ldr	r1, [pc, #364]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d109      	bne.n	8003442 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fd8c 	bl	8003f50 <RCC_SetFlashLatencyFromMSIRange>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e380      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003442:	f000 fcc1 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 8003446:	4602      	mov	r2, r0
 8003448:	4b51      	ldr	r3, [pc, #324]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	091b      	lsrs	r3, r3, #4
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	4950      	ldr	r1, [pc, #320]	; (8003594 <HAL_RCC_OscConfig+0x274>)
 8003454:	5ccb      	ldrb	r3, [r1, r3]
 8003456:	f003 031f 	and.w	r3, r3, #31
 800345a:	fa22 f303 	lsr.w	r3, r2, r3
 800345e:	4a4e      	ldr	r2, [pc, #312]	; (8003598 <HAL_RCC_OscConfig+0x278>)
 8003460:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003462:	4b4e      	ldr	r3, [pc, #312]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fe f8a4 	bl	80015b4 <HAL_InitTick>
 800346c:	4603      	mov	r3, r0
 800346e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d052      	beq.n	800351c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	e364      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d032      	beq.n	80034e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003482:	4b43      	ldr	r3, [pc, #268]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a42      	ldr	r2, [pc, #264]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800348e:	f7fe f8e1 	bl	8001654 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003496:	f7fe f8dd 	bl	8001654 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e34d      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034a8:	4b39      	ldr	r3, [pc, #228]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034b4:	4b36      	ldr	r3, [pc, #216]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a35      	ldr	r2, [pc, #212]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034ba:	f043 0308 	orr.w	r3, r3, #8
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	4b33      	ldr	r3, [pc, #204]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4930      	ldr	r1, [pc, #192]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034d2:	4b2f      	ldr	r3, [pc, #188]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	021b      	lsls	r3, r3, #8
 80034e0:	492b      	ldr	r1, [pc, #172]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]
 80034e6:	e01a      	b.n	800351e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034e8:	4b29      	ldr	r3, [pc, #164]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a28      	ldr	r2, [pc, #160]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034ee:	f023 0301 	bic.w	r3, r3, #1
 80034f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034f4:	f7fe f8ae 	bl	8001654 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034fc:	f7fe f8aa 	bl	8001654 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e31a      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800350e:	4b20      	ldr	r3, [pc, #128]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x1dc>
 800351a:	e000      	b.n	800351e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800351c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d073      	beq.n	8003612 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d005      	beq.n	800353c <HAL_RCC_OscConfig+0x21c>
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	2b0c      	cmp	r3, #12
 8003534:	d10e      	bne.n	8003554 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b03      	cmp	r3, #3
 800353a:	d10b      	bne.n	8003554 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800353c:	4b14      	ldr	r3, [pc, #80]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d063      	beq.n	8003610 <HAL_RCC_OscConfig+0x2f0>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d15f      	bne.n	8003610 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e2f7      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355c:	d106      	bne.n	800356c <HAL_RCC_OscConfig+0x24c>
 800355e:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a0b      	ldr	r2, [pc, #44]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e025      	b.n	80035b8 <HAL_RCC_OscConfig+0x298>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003574:	d114      	bne.n	80035a0 <HAL_RCC_OscConfig+0x280>
 8003576:	4b06      	ldr	r3, [pc, #24]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a05      	ldr	r2, [pc, #20]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 800357c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	4b03      	ldr	r3, [pc, #12]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a02      	ldr	r2, [pc, #8]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	e013      	b.n	80035b8 <HAL_RCC_OscConfig+0x298>
 8003590:	40021000 	.word	0x40021000
 8003594:	08005840 	.word	0x08005840
 8003598:	2000000c 	.word	0x2000000c
 800359c:	20000010 	.word	0x20000010
 80035a0:	4ba0      	ldr	r3, [pc, #640]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a9f      	ldr	r2, [pc, #636]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80035a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	4b9d      	ldr	r3, [pc, #628]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a9c      	ldr	r2, [pc, #624]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80035b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d013      	beq.n	80035e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fe f848 	bl	8001654 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c8:	f7fe f844 	bl	8001654 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b64      	cmp	r3, #100	; 0x64
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e2b4      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035da:	4b92      	ldr	r3, [pc, #584]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0x2a8>
 80035e6:	e014      	b.n	8003612 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fe f834 	bl	8001654 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f0:	f7fe f830 	bl	8001654 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e2a0      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003602:	4b88      	ldr	r3, [pc, #544]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x2d0>
 800360e:	e000      	b.n	8003612 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d060      	beq.n	80036e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	2b04      	cmp	r3, #4
 8003622:	d005      	beq.n	8003630 <HAL_RCC_OscConfig+0x310>
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	2b0c      	cmp	r3, #12
 8003628:	d119      	bne.n	800365e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d116      	bne.n	800365e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003630:	4b7c      	ldr	r3, [pc, #496]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_RCC_OscConfig+0x328>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e27d      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003648:	4b76      	ldr	r3, [pc, #472]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	061b      	lsls	r3, r3, #24
 8003656:	4973      	ldr	r1, [pc, #460]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003658:	4313      	orrs	r3, r2
 800365a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800365c:	e040      	b.n	80036e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d023      	beq.n	80036ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003666:	4b6f      	ldr	r3, [pc, #444]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a6e      	ldr	r2, [pc, #440]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 800366c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003672:	f7fd ffef 	bl	8001654 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800367a:	f7fd ffeb 	bl	8001654 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e25b      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800368c:	4b65      	ldr	r3, [pc, #404]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003698:	4b62      	ldr	r3, [pc, #392]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	061b      	lsls	r3, r3, #24
 80036a6:	495f      	ldr	r1, [pc, #380]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]
 80036ac:	e018      	b.n	80036e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ae:	4b5d      	ldr	r3, [pc, #372]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a5c      	ldr	r2, [pc, #368]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80036b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ba:	f7fd ffcb 	bl	8001654 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c2:	f7fd ffc7 	bl	8001654 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e237      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036d4:	4b53      	ldr	r3, [pc, #332]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1f0      	bne.n	80036c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d03c      	beq.n	8003766 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01c      	beq.n	800372e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036f4:	4b4b      	ldr	r3, [pc, #300]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80036f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036fa:	4a4a      	ldr	r2, [pc, #296]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003704:	f7fd ffa6 	bl	8001654 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800370c:	f7fd ffa2 	bl	8001654 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e212      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800371e:	4b41      	ldr	r3, [pc, #260]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0ef      	beq.n	800370c <HAL_RCC_OscConfig+0x3ec>
 800372c:	e01b      	b.n	8003766 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800372e:	4b3d      	ldr	r3, [pc, #244]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003734:	4a3b      	ldr	r2, [pc, #236]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003736:	f023 0301 	bic.w	r3, r3, #1
 800373a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373e:	f7fd ff89 	bl	8001654 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003746:	f7fd ff85 	bl	8001654 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e1f5      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003758:	4b32      	ldr	r3, [pc, #200]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 800375a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1ef      	bne.n	8003746 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 80a6 	beq.w	80038c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003774:	2300      	movs	r3, #0
 8003776:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003778:	4b2a      	ldr	r3, [pc, #168]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 800377a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10d      	bne.n	80037a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003784:	4b27      	ldr	r3, [pc, #156]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003788:	4a26      	ldr	r2, [pc, #152]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 800378a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378e:	6593      	str	r3, [r2, #88]	; 0x58
 8003790:	4b24      	ldr	r3, [pc, #144]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003798:	60bb      	str	r3, [r7, #8]
 800379a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800379c:	2301      	movs	r3, #1
 800379e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037a0:	4b21      	ldr	r3, [pc, #132]	; (8003828 <HAL_RCC_OscConfig+0x508>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d118      	bne.n	80037de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ac:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <HAL_RCC_OscConfig+0x508>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1d      	ldr	r2, [pc, #116]	; (8003828 <HAL_RCC_OscConfig+0x508>)
 80037b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b8:	f7fd ff4c 	bl	8001654 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c0:	f7fd ff48 	bl	8001654 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e1b8      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037d2:	4b15      	ldr	r3, [pc, #84]	; (8003828 <HAL_RCC_OscConfig+0x508>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d108      	bne.n	80037f8 <HAL_RCC_OscConfig+0x4d8>
 80037e6:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80037e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ec:	4a0d      	ldr	r2, [pc, #52]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037f6:	e029      	b.n	800384c <HAL_RCC_OscConfig+0x52c>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b05      	cmp	r3, #5
 80037fe:	d115      	bne.n	800382c <HAL_RCC_OscConfig+0x50c>
 8003800:	4b08      	ldr	r3, [pc, #32]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	4a07      	ldr	r2, [pc, #28]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003808:	f043 0304 	orr.w	r3, r3, #4
 800380c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003810:	4b04      	ldr	r3, [pc, #16]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003816:	4a03      	ldr	r2, [pc, #12]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003820:	e014      	b.n	800384c <HAL_RCC_OscConfig+0x52c>
 8003822:	bf00      	nop
 8003824:	40021000 	.word	0x40021000
 8003828:	40007000 	.word	0x40007000
 800382c:	4b9d      	ldr	r3, [pc, #628]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003832:	4a9c      	ldr	r2, [pc, #624]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 8003834:	f023 0301 	bic.w	r3, r3, #1
 8003838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800383c:	4b99      	ldr	r3, [pc, #612]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	4a98      	ldr	r2, [pc, #608]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 8003844:	f023 0304 	bic.w	r3, r3, #4
 8003848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d016      	beq.n	8003882 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003854:	f7fd fefe 	bl	8001654 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800385a:	e00a      	b.n	8003872 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385c:	f7fd fefa 	bl	8001654 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	f241 3288 	movw	r2, #5000	; 0x1388
 800386a:	4293      	cmp	r3, r2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e168      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003872:	4b8c      	ldr	r3, [pc, #560]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 8003874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0ed      	beq.n	800385c <HAL_RCC_OscConfig+0x53c>
 8003880:	e015      	b.n	80038ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003882:	f7fd fee7 	bl	8001654 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003888:	e00a      	b.n	80038a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388a:	f7fd fee3 	bl	8001654 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f241 3288 	movw	r2, #5000	; 0x1388
 8003898:	4293      	cmp	r3, r2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e151      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038a0:	4b80      	ldr	r3, [pc, #512]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1ed      	bne.n	800388a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ae:	7ffb      	ldrb	r3, [r7, #31]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d105      	bne.n	80038c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b4:	4b7b      	ldr	r3, [pc, #492]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 80038b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b8:	4a7a      	ldr	r2, [pc, #488]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 80038ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d03c      	beq.n	8003946 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d01c      	beq.n	800390e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038d4:	4b73      	ldr	r3, [pc, #460]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 80038d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038da:	4a72      	ldr	r2, [pc, #456]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e4:	f7fd feb6 	bl	8001654 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038ec:	f7fd feb2 	bl	8001654 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e122      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038fe:	4b69      	ldr	r3, [pc, #420]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 8003900:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0ef      	beq.n	80038ec <HAL_RCC_OscConfig+0x5cc>
 800390c:	e01b      	b.n	8003946 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800390e:	4b65      	ldr	r3, [pc, #404]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 8003910:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003914:	4a63      	ldr	r2, [pc, #396]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 8003916:	f023 0301 	bic.w	r3, r3, #1
 800391a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391e:	f7fd fe99 	bl	8001654 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003926:	f7fd fe95 	bl	8001654 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e105      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003938:	4b5a      	ldr	r3, [pc, #360]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 800393a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1ef      	bne.n	8003926 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 80f9 	beq.w	8003b42 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	2b02      	cmp	r3, #2
 8003956:	f040 80cf 	bne.w	8003af8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800395a:	4b52      	ldr	r3, [pc, #328]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f003 0203 	and.w	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	429a      	cmp	r2, r3
 800396c:	d12c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	3b01      	subs	r3, #1
 800397a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800397c:	429a      	cmp	r2, r3
 800397e:	d123      	bne.n	80039c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800398c:	429a      	cmp	r2, r3
 800398e:	d11b      	bne.n	80039c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800399c:	429a      	cmp	r2, r3
 800399e:	d113      	bne.n	80039c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	085b      	lsrs	r3, r3, #1
 80039ac:	3b01      	subs	r3, #1
 80039ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d109      	bne.n	80039c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	085b      	lsrs	r3, r3, #1
 80039c0:	3b01      	subs	r3, #1
 80039c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d071      	beq.n	8003aac <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2b0c      	cmp	r3, #12
 80039cc:	d068      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039ce:	4b35      	ldr	r3, [pc, #212]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d105      	bne.n	80039e6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80039da:	4b32      	ldr	r3, [pc, #200]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e0ac      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039ea:	4b2e      	ldr	r3, [pc, #184]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a2d      	ldr	r2, [pc, #180]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 80039f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039f6:	f7fd fe2d 	bl	8001654 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039fe:	f7fd fe29 	bl	8001654 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e099      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a10:	4b24      	ldr	r3, [pc, #144]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f0      	bne.n	80039fe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a1c:	4b21      	ldr	r3, [pc, #132]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	4b21      	ldr	r3, [pc, #132]	; (8003aa8 <HAL_RCC_OscConfig+0x788>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a2c:	3a01      	subs	r2, #1
 8003a2e:	0112      	lsls	r2, r2, #4
 8003a30:	4311      	orrs	r1, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a36:	0212      	lsls	r2, r2, #8
 8003a38:	4311      	orrs	r1, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a3e:	0852      	lsrs	r2, r2, #1
 8003a40:	3a01      	subs	r2, #1
 8003a42:	0552      	lsls	r2, r2, #21
 8003a44:	4311      	orrs	r1, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a4a:	0852      	lsrs	r2, r2, #1
 8003a4c:	3a01      	subs	r2, #1
 8003a4e:	0652      	lsls	r2, r2, #25
 8003a50:	4311      	orrs	r1, r2
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a56:	06d2      	lsls	r2, r2, #27
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	4912      	ldr	r1, [pc, #72]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a60:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a0f      	ldr	r2, [pc, #60]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 8003a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a6c:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4a0c      	ldr	r2, [pc, #48]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 8003a72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a78:	f7fd fdec 	bl	8001654 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a80:	f7fd fde8 	bl	8001654 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e058      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a92:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <HAL_RCC_OscConfig+0x784>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0f0      	beq.n	8003a80 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a9e:	e050      	b.n	8003b42 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e04f      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aac:	4b27      	ldr	r3, [pc, #156]	; (8003b4c <HAL_RCC_OscConfig+0x82c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d144      	bne.n	8003b42 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ab8:	4b24      	ldr	r3, [pc, #144]	; (8003b4c <HAL_RCC_OscConfig+0x82c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a23      	ldr	r2, [pc, #140]	; (8003b4c <HAL_RCC_OscConfig+0x82c>)
 8003abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ac2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ac4:	4b21      	ldr	r3, [pc, #132]	; (8003b4c <HAL_RCC_OscConfig+0x82c>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4a20      	ldr	r2, [pc, #128]	; (8003b4c <HAL_RCC_OscConfig+0x82c>)
 8003aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ace:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ad0:	f7fd fdc0 	bl	8001654 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad8:	f7fd fdbc 	bl	8001654 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e02c      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aea:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <HAL_RCC_OscConfig+0x82c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x7b8>
 8003af6:	e024      	b.n	8003b42 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	2b0c      	cmp	r3, #12
 8003afc:	d01f      	beq.n	8003b3e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afe:	4b13      	ldr	r3, [pc, #76]	; (8003b4c <HAL_RCC_OscConfig+0x82c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a12      	ldr	r2, [pc, #72]	; (8003b4c <HAL_RCC_OscConfig+0x82c>)
 8003b04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b0a:	f7fd fda3 	bl	8001654 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b12:	f7fd fd9f 	bl	8001654 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e00f      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b24:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <HAL_RCC_OscConfig+0x82c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1f0      	bne.n	8003b12 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b30:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <HAL_RCC_OscConfig+0x82c>)
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	4905      	ldr	r1, [pc, #20]	; (8003b4c <HAL_RCC_OscConfig+0x82c>)
 8003b36:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <HAL_RCC_OscConfig+0x830>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	60cb      	str	r3, [r1, #12]
 8003b3c:	e001      	b.n	8003b42 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3720      	adds	r7, #32
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	feeefffc 	.word	0xfeeefffc

08003b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e11d      	b.n	8003da8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b6c:	4b90      	ldr	r3, [pc, #576]	; (8003db0 <HAL_RCC_ClockConfig+0x25c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d910      	bls.n	8003b9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b7a:	4b8d      	ldr	r3, [pc, #564]	; (8003db0 <HAL_RCC_ClockConfig+0x25c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 020f 	bic.w	r2, r3, #15
 8003b82:	498b      	ldr	r1, [pc, #556]	; (8003db0 <HAL_RCC_ClockConfig+0x25c>)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8a:	4b89      	ldr	r3, [pc, #548]	; (8003db0 <HAL_RCC_ClockConfig+0x25c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d001      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e105      	b.n	8003da8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d010      	beq.n	8003bca <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	4b81      	ldr	r3, [pc, #516]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d908      	bls.n	8003bca <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bb8:	4b7e      	ldr	r3, [pc, #504]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	497b      	ldr	r1, [pc, #492]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d079      	beq.n	8003cca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	d11e      	bne.n	8003c1c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bde:	4b75      	ldr	r3, [pc, #468]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e0dc      	b.n	8003da8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003bee:	f000 fa09 	bl	8004004 <RCC_GetSysClockFreqFromPLLSource>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	4a70      	ldr	r2, [pc, #448]	; (8003db8 <HAL_RCC_ClockConfig+0x264>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d946      	bls.n	8003c88 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003bfa:	4b6e      	ldr	r3, [pc, #440]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d140      	bne.n	8003c88 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c06:	4b6b      	ldr	r3, [pc, #428]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c0e:	4a69      	ldr	r2, [pc, #420]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	e035      	b.n	8003c88 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d107      	bne.n	8003c34 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c24:	4b63      	ldr	r3, [pc, #396]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d115      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0b9      	b.n	8003da8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d107      	bne.n	8003c4c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c3c:	4b5d      	ldr	r3, [pc, #372]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d109      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e0ad      	b.n	8003da8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c4c:	4b59      	ldr	r3, [pc, #356]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e0a5      	b.n	8003da8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003c5c:	f000 f8b4 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 8003c60:	4603      	mov	r3, r0
 8003c62:	4a55      	ldr	r2, [pc, #340]	; (8003db8 <HAL_RCC_ClockConfig+0x264>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d90f      	bls.n	8003c88 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003c68:	4b52      	ldr	r3, [pc, #328]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d109      	bne.n	8003c88 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c74:	4b4f      	ldr	r3, [pc, #316]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c7c:	4a4d      	ldr	r2, [pc, #308]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c82:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c84:	2380      	movs	r3, #128	; 0x80
 8003c86:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c88:	4b4a      	ldr	r3, [pc, #296]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f023 0203 	bic.w	r2, r3, #3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	4947      	ldr	r1, [pc, #284]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c9a:	f7fd fcdb 	bl	8001654 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca0:	e00a      	b.n	8003cb8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca2:	f7fd fcd7 	bl	8001654 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e077      	b.n	8003da8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb8:	4b3e      	ldr	r3, [pc, #248]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 020c 	and.w	r2, r3, #12
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d1eb      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b80      	cmp	r3, #128	; 0x80
 8003cce:	d105      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003cd0:	4b38      	ldr	r3, [pc, #224]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4a37      	ldr	r2, [pc, #220]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cda:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d010      	beq.n	8003d0a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	4b31      	ldr	r3, [pc, #196]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d208      	bcs.n	8003d0a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf8:	4b2e      	ldr	r3, [pc, #184]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	492b      	ldr	r1, [pc, #172]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d0a:	4b29      	ldr	r3, [pc, #164]	; (8003db0 <HAL_RCC_ClockConfig+0x25c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d210      	bcs.n	8003d3a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d18:	4b25      	ldr	r3, [pc, #148]	; (8003db0 <HAL_RCC_ClockConfig+0x25c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f023 020f 	bic.w	r2, r3, #15
 8003d20:	4923      	ldr	r1, [pc, #140]	; (8003db0 <HAL_RCC_ClockConfig+0x25c>)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d28:	4b21      	ldr	r3, [pc, #132]	; (8003db0 <HAL_RCC_ClockConfig+0x25c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d001      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e036      	b.n	8003da8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d008      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d46:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	4918      	ldr	r1, [pc, #96]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d009      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d64:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4910      	ldr	r1, [pc, #64]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d78:	f000 f826 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	4b0d      	ldr	r3, [pc, #52]	; (8003db4 <HAL_RCC_ClockConfig+0x260>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	091b      	lsrs	r3, r3, #4
 8003d84:	f003 030f 	and.w	r3, r3, #15
 8003d88:	490c      	ldr	r1, [pc, #48]	; (8003dbc <HAL_RCC_ClockConfig+0x268>)
 8003d8a:	5ccb      	ldrb	r3, [r1, r3]
 8003d8c:	f003 031f 	and.w	r3, r3, #31
 8003d90:	fa22 f303 	lsr.w	r3, r2, r3
 8003d94:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <HAL_RCC_ClockConfig+0x26c>)
 8003d96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d98:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <HAL_RCC_ClockConfig+0x270>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fd fc09 	bl	80015b4 <HAL_InitTick>
 8003da2:	4603      	mov	r3, r0
 8003da4:	73fb      	strb	r3, [r7, #15]

  return status;
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40022000 	.word	0x40022000
 8003db4:	40021000 	.word	0x40021000
 8003db8:	04c4b400 	.word	0x04c4b400
 8003dbc:	08005840 	.word	0x08005840
 8003dc0:	2000000c 	.word	0x2000000c
 8003dc4:	20000010 	.word	0x20000010

08003dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b089      	sub	sp, #36	; 0x24
 8003dcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dd6:	4b3e      	ldr	r3, [pc, #248]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003de0:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_RCC_GetSysClockFreq+0x34>
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	2b0c      	cmp	r3, #12
 8003df4:	d121      	bne.n	8003e3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d11e      	bne.n	8003e3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003dfc:	4b34      	ldr	r3, [pc, #208]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d107      	bne.n	8003e18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e08:	4b31      	ldr	r3, [pc, #196]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e0e:	0a1b      	lsrs	r3, r3, #8
 8003e10:	f003 030f 	and.w	r3, r3, #15
 8003e14:	61fb      	str	r3, [r7, #28]
 8003e16:	e005      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e18:	4b2d      	ldr	r3, [pc, #180]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e24:	4a2b      	ldr	r2, [pc, #172]	; (8003ed4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10d      	bne.n	8003e50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e38:	e00a      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d102      	bne.n	8003e46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e40:	4b25      	ldr	r3, [pc, #148]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	e004      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d101      	bne.n	8003e50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e4c:	4b23      	ldr	r3, [pc, #140]	; (8003edc <HAL_RCC_GetSysClockFreq+0x114>)
 8003e4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b0c      	cmp	r3, #12
 8003e54:	d134      	bne.n	8003ec0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e56:	4b1e      	ldr	r3, [pc, #120]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d003      	beq.n	8003e6e <HAL_RCC_GetSysClockFreq+0xa6>
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d003      	beq.n	8003e74 <HAL_RCC_GetSysClockFreq+0xac>
 8003e6c:	e005      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e6e:	4b1a      	ldr	r3, [pc, #104]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e70:	617b      	str	r3, [r7, #20]
      break;
 8003e72:	e005      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e74:	4b19      	ldr	r3, [pc, #100]	; (8003edc <HAL_RCC_GetSysClockFreq+0x114>)
 8003e76:	617b      	str	r3, [r7, #20]
      break;
 8003e78:	e002      	b.n	8003e80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	617b      	str	r3, [r7, #20]
      break;
 8003e7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e80:	4b13      	ldr	r3, [pc, #76]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	091b      	lsrs	r3, r3, #4
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e8e:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	0a1b      	lsrs	r3, r3, #8
 8003e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	fb03 f202 	mul.w	r2, r3, r2
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ea6:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	0e5b      	lsrs	r3, r3, #25
 8003eac:	f003 0303 	and.w	r3, r3, #3
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ec0:	69bb      	ldr	r3, [r7, #24]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3724      	adds	r7, #36	; 0x24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	08005858 	.word	0x08005858
 8003ed8:	00f42400 	.word	0x00f42400
 8003edc:	007a1200 	.word	0x007a1200

08003ee0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ee4:	4b03      	ldr	r3, [pc, #12]	; (8003ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	2000000c 	.word	0x2000000c

08003ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003efc:	f7ff fff0 	bl	8003ee0 <HAL_RCC_GetHCLKFreq>
 8003f00:	4602      	mov	r2, r0
 8003f02:	4b06      	ldr	r3, [pc, #24]	; (8003f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	0a1b      	lsrs	r3, r3, #8
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	4904      	ldr	r1, [pc, #16]	; (8003f20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f0e:	5ccb      	ldrb	r3, [r1, r3]
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	08005850 	.word	0x08005850

08003f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f28:	f7ff ffda 	bl	8003ee0 <HAL_RCC_GetHCLKFreq>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	0adb      	lsrs	r3, r3, #11
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	4904      	ldr	r1, [pc, #16]	; (8003f4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f3a:	5ccb      	ldrb	r3, [r1, r3]
 8003f3c:	f003 031f 	and.w	r3, r3, #31
 8003f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	08005850 	.word	0x08005850

08003f50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f58:	2300      	movs	r3, #0
 8003f5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f5c:	4b27      	ldr	r3, [pc, #156]	; (8003ffc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f68:	f7ff f916 	bl	8003198 <HAL_PWREx_GetVoltageRange>
 8003f6c:	6178      	str	r0, [r7, #20]
 8003f6e:	e014      	b.n	8003f9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f70:	4b22      	ldr	r3, [pc, #136]	; (8003ffc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f74:	4a21      	ldr	r2, [pc, #132]	; (8003ffc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f7c:	4b1f      	ldr	r3, [pc, #124]	; (8003ffc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f88:	f7ff f906 	bl	8003198 <HAL_PWREx_GetVoltageRange>
 8003f8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f8e:	4b1b      	ldr	r3, [pc, #108]	; (8003ffc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f92:	4a1a      	ldr	r2, [pc, #104]	; (8003ffc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa0:	d10b      	bne.n	8003fba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b80      	cmp	r3, #128	; 0x80
 8003fa6:	d913      	bls.n	8003fd0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2ba0      	cmp	r3, #160	; 0xa0
 8003fac:	d902      	bls.n	8003fb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fae:	2302      	movs	r3, #2
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	e00d      	b.n	8003fd0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	e00a      	b.n	8003fd0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b7f      	cmp	r3, #127	; 0x7f
 8003fbe:	d902      	bls.n	8003fc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	e004      	b.n	8003fd0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b70      	cmp	r3, #112	; 0x70
 8003fca:	d101      	bne.n	8003fd0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fcc:	2301      	movs	r3, #1
 8003fce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f023 020f 	bic.w	r2, r3, #15
 8003fd8:	4909      	ldr	r1, [pc, #36]	; (8004000 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fe0:	4b07      	ldr	r3, [pc, #28]	; (8004000 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d001      	beq.n	8003ff2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40022000 	.word	0x40022000

08004004 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800400a:	4b2d      	ldr	r3, [pc, #180]	; (80040c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b03      	cmp	r3, #3
 8004018:	d00b      	beq.n	8004032 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2b03      	cmp	r3, #3
 800401e:	d825      	bhi.n	800406c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d008      	beq.n	8004038 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d11f      	bne.n	800406c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800402c:	4b25      	ldr	r3, [pc, #148]	; (80040c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800402e:	613b      	str	r3, [r7, #16]
    break;
 8004030:	e01f      	b.n	8004072 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004032:	4b25      	ldr	r3, [pc, #148]	; (80040c8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004034:	613b      	str	r3, [r7, #16]
    break;
 8004036:	e01c      	b.n	8004072 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004038:	4b21      	ldr	r3, [pc, #132]	; (80040c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d107      	bne.n	8004054 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004044:	4b1e      	ldr	r3, [pc, #120]	; (80040c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800404a:	0a1b      	lsrs	r3, r3, #8
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	e005      	b.n	8004060 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004054:	4b1a      	ldr	r3, [pc, #104]	; (80040c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004060:	4a1a      	ldr	r2, [pc, #104]	; (80040cc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004068:	613b      	str	r3, [r7, #16]
    break;
 800406a:	e002      	b.n	8004072 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	613b      	str	r3, [r7, #16]
    break;
 8004070:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004072:	4b13      	ldr	r3, [pc, #76]	; (80040c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	091b      	lsrs	r3, r3, #4
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	3301      	adds	r3, #1
 800407e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004080:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	0a1b      	lsrs	r3, r3, #8
 8004086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	fb03 f202 	mul.w	r2, r3, r2
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	fbb2 f3f3 	udiv	r3, r2, r3
 8004096:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004098:	4b09      	ldr	r3, [pc, #36]	; (80040c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	0e5b      	lsrs	r3, r3, #25
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	3301      	adds	r3, #1
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80040b2:	683b      	ldr	r3, [r7, #0]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	371c      	adds	r7, #28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	40021000 	.word	0x40021000
 80040c4:	00f42400 	.word	0x00f42400
 80040c8:	007a1200 	.word	0x007a1200
 80040cc:	08005858 	.word	0x08005858

080040d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040d8:	2300      	movs	r3, #0
 80040da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040dc:	2300      	movs	r3, #0
 80040de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d040      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040f0:	2b80      	cmp	r3, #128	; 0x80
 80040f2:	d02a      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80040f4:	2b80      	cmp	r3, #128	; 0x80
 80040f6:	d825      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80040f8:	2b60      	cmp	r3, #96	; 0x60
 80040fa:	d026      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80040fc:	2b60      	cmp	r3, #96	; 0x60
 80040fe:	d821      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004100:	2b40      	cmp	r3, #64	; 0x40
 8004102:	d006      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004104:	2b40      	cmp	r3, #64	; 0x40
 8004106:	d81d      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004108:	2b00      	cmp	r3, #0
 800410a:	d009      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800410c:	2b20      	cmp	r3, #32
 800410e:	d010      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004110:	e018      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004112:	4b89      	ldr	r3, [pc, #548]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	4a88      	ldr	r2, [pc, #544]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800411c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800411e:	e015      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	3304      	adds	r3, #4
 8004124:	2100      	movs	r1, #0
 8004126:	4618      	mov	r0, r3
 8004128:	f000 fb02 	bl	8004730 <RCCEx_PLLSAI1_Config>
 800412c:	4603      	mov	r3, r0
 800412e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004130:	e00c      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3320      	adds	r3, #32
 8004136:	2100      	movs	r1, #0
 8004138:	4618      	mov	r0, r3
 800413a:	f000 fbed 	bl	8004918 <RCCEx_PLLSAI2_Config>
 800413e:	4603      	mov	r3, r0
 8004140:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004142:	e003      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	74fb      	strb	r3, [r7, #19]
      break;
 8004148:	e000      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800414a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800414c:	7cfb      	ldrb	r3, [r7, #19]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10b      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004152:	4b79      	ldr	r3, [pc, #484]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004154:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004158:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004160:	4975      	ldr	r1, [pc, #468]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004168:	e001      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416a:	7cfb      	ldrb	r3, [r7, #19]
 800416c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d047      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004182:	d030      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004188:	d82a      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800418a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800418e:	d02a      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004190:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004194:	d824      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800419a:	d008      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xde>
 800419c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a0:	d81e      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80041a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041aa:	d010      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80041ac:	e018      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041ae:	4b62      	ldr	r3, [pc, #392]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	4a61      	ldr	r2, [pc, #388]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041ba:	e015      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3304      	adds	r3, #4
 80041c0:	2100      	movs	r1, #0
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fab4 	bl	8004730 <RCCEx_PLLSAI1_Config>
 80041c8:	4603      	mov	r3, r0
 80041ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041cc:	e00c      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	3320      	adds	r3, #32
 80041d2:	2100      	movs	r1, #0
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 fb9f 	bl	8004918 <RCCEx_PLLSAI2_Config>
 80041da:	4603      	mov	r3, r0
 80041dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80041de:	e003      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	74fb      	strb	r3, [r7, #19]
      break;
 80041e4:	e000      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80041e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041e8:	7cfb      	ldrb	r3, [r7, #19]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10b      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80041ee:	4b52      	ldr	r3, [pc, #328]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fc:	494e      	ldr	r1, [pc, #312]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004204:	e001      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004206:	7cfb      	ldrb	r3, [r7, #19]
 8004208:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 809f 	beq.w	8004356 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004218:	2300      	movs	r3, #0
 800421a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800421c:	4b46      	ldr	r3, [pc, #280]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800421e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004228:	2301      	movs	r3, #1
 800422a:	e000      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800422c:	2300      	movs	r3, #0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00d      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004232:	4b41      	ldr	r3, [pc, #260]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004236:	4a40      	ldr	r2, [pc, #256]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423c:	6593      	str	r3, [r2, #88]	; 0x58
 800423e:	4b3e      	ldr	r3, [pc, #248]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424a:	2301      	movs	r3, #1
 800424c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800424e:	4b3b      	ldr	r3, [pc, #236]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a3a      	ldr	r2, [pc, #232]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004258:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800425a:	f7fd f9fb 	bl	8001654 <HAL_GetTick>
 800425e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004260:	e009      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004262:	f7fd f9f7 	bl	8001654 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d902      	bls.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	74fb      	strb	r3, [r7, #19]
        break;
 8004274:	e005      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004276:	4b31      	ldr	r3, [pc, #196]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0ef      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004282:	7cfb      	ldrb	r3, [r7, #19]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d15b      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004288:	4b2b      	ldr	r3, [pc, #172]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800428a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004292:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d01f      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d019      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042a6:	4b24      	ldr	r3, [pc, #144]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042b2:	4b21      	ldr	r3, [pc, #132]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b8:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042c2:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c8:	4a1b      	ldr	r2, [pc, #108]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042d2:	4a19      	ldr	r2, [pc, #100]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d016      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e4:	f7fd f9b6 	bl	8001654 <HAL_GetTick>
 80042e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ea:	e00b      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ec:	f7fd f9b2 	bl	8001654 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d902      	bls.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	74fb      	strb	r3, [r7, #19]
            break;
 8004302:	e006      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0ec      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004312:	7cfb      	ldrb	r3, [r7, #19]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10c      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004318:	4b07      	ldr	r3, [pc, #28]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004328:	4903      	ldr	r1, [pc, #12]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004330:	e008      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004332:	7cfb      	ldrb	r3, [r7, #19]
 8004334:	74bb      	strb	r3, [r7, #18]
 8004336:	e005      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004338:	40021000 	.word	0x40021000
 800433c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004340:	7cfb      	ldrb	r3, [r7, #19]
 8004342:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004344:	7c7b      	ldrb	r3, [r7, #17]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d105      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800434a:	4ba0      	ldr	r3, [pc, #640]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800434c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434e:	4a9f      	ldr	r2, [pc, #636]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004354:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004362:	4b9a      	ldr	r3, [pc, #616]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004368:	f023 0203 	bic.w	r2, r3, #3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004370:	4996      	ldr	r1, [pc, #600]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004384:	4b91      	ldr	r3, [pc, #580]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438a:	f023 020c 	bic.w	r2, r3, #12
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	498e      	ldr	r1, [pc, #568]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043a6:	4b89      	ldr	r3, [pc, #548]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b4:	4985      	ldr	r1, [pc, #532]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043c8:	4b80      	ldr	r3, [pc, #512]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d6:	497d      	ldr	r1, [pc, #500]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0310 	and.w	r3, r3, #16
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043ea:	4b78      	ldr	r3, [pc, #480]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f8:	4974      	ldr	r1, [pc, #464]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0320 	and.w	r3, r3, #32
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800440c:	4b6f      	ldr	r3, [pc, #444]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004412:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800441a:	496c      	ldr	r1, [pc, #432]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800442e:	4b67      	ldr	r3, [pc, #412]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004434:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800443c:	4963      	ldr	r1, [pc, #396]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004450:	4b5e      	ldr	r3, [pc, #376]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004456:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800445e:	495b      	ldr	r1, [pc, #364]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004472:	4b56      	ldr	r3, [pc, #344]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004478:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004480:	4952      	ldr	r1, [pc, #328]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004494:	4b4d      	ldr	r3, [pc, #308]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a2:	494a      	ldr	r1, [pc, #296]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044b6:	4b45      	ldr	r3, [pc, #276]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c4:	4941      	ldr	r1, [pc, #260]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044d8:	4b3c      	ldr	r3, [pc, #240]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044de:	f023 0203 	bic.w	r2, r3, #3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e6:	4939      	ldr	r1, [pc, #228]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d028      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044fa:	4b34      	ldr	r3, [pc, #208]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004500:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004508:	4930      	ldr	r1, [pc, #192]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004514:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004518:	d106      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800451a:	4b2c      	ldr	r3, [pc, #176]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	4a2b      	ldr	r2, [pc, #172]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004524:	60d3      	str	r3, [r2, #12]
 8004526:	e011      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800452c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004530:	d10c      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3304      	adds	r3, #4
 8004536:	2101      	movs	r1, #1
 8004538:	4618      	mov	r0, r3
 800453a:	f000 f8f9 	bl	8004730 <RCCEx_PLLSAI1_Config>
 800453e:	4603      	mov	r3, r0
 8004540:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004542:	7cfb      	ldrb	r3, [r7, #19]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004548:	7cfb      	ldrb	r3, [r7, #19]
 800454a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d04d      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800455c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004560:	d108      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004562:	4b1a      	ldr	r3, [pc, #104]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004564:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004568:	4a18      	ldr	r2, [pc, #96]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800456a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800456e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004572:	e012      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004574:	4b15      	ldr	r3, [pc, #84]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004576:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800457a:	4a14      	ldr	r2, [pc, #80]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800457c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004580:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004584:	4b11      	ldr	r3, [pc, #68]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004592:	490e      	ldr	r1, [pc, #56]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800459e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045a2:	d106      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045a4:	4b09      	ldr	r3, [pc, #36]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	4a08      	ldr	r2, [pc, #32]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ae:	60d3      	str	r3, [r2, #12]
 80045b0:	e020      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045ba:	d109      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045bc:	4b03      	ldr	r3, [pc, #12]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4a02      	ldr	r2, [pc, #8]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c6:	60d3      	str	r3, [r2, #12]
 80045c8:	e014      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80045ca:	bf00      	nop
 80045cc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045d8:	d10c      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3304      	adds	r3, #4
 80045de:	2101      	movs	r1, #1
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 f8a5 	bl	8004730 <RCCEx_PLLSAI1_Config>
 80045e6:	4603      	mov	r3, r0
 80045e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045ea:	7cfb      	ldrb	r3, [r7, #19]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80045f0:	7cfb      	ldrb	r3, [r7, #19]
 80045f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d028      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004600:	4b4a      	ldr	r3, [pc, #296]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800460e:	4947      	ldr	r1, [pc, #284]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004610:	4313      	orrs	r3, r2
 8004612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800461a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800461e:	d106      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004620:	4b42      	ldr	r3, [pc, #264]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	4a41      	ldr	r2, [pc, #260]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800462a:	60d3      	str	r3, [r2, #12]
 800462c:	e011      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004632:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004636:	d10c      	bne.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3304      	adds	r3, #4
 800463c:	2101      	movs	r1, #1
 800463e:	4618      	mov	r0, r3
 8004640:	f000 f876 	bl	8004730 <RCCEx_PLLSAI1_Config>
 8004644:	4603      	mov	r3, r0
 8004646:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004648:	7cfb      	ldrb	r3, [r7, #19]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800464e:	7cfb      	ldrb	r3, [r7, #19]
 8004650:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d01e      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800465e:	4b33      	ldr	r3, [pc, #204]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004664:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800466e:	492f      	ldr	r1, [pc, #188]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800467c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004680:	d10c      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3304      	adds	r3, #4
 8004686:	2102      	movs	r1, #2
 8004688:	4618      	mov	r0, r3
 800468a:	f000 f851 	bl	8004730 <RCCEx_PLLSAI1_Config>
 800468e:	4603      	mov	r3, r0
 8004690:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004692:	7cfb      	ldrb	r3, [r7, #19]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00b      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046a8:	4b20      	ldr	r3, [pc, #128]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046ae:	f023 0204 	bic.w	r2, r3, #4
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b8:	491c      	ldr	r1, [pc, #112]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00b      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80046cc:	4b17      	ldr	r3, [pc, #92]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046d2:	f023 0218 	bic.w	r2, r3, #24
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046dc:	4913      	ldr	r1, [pc, #76]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d017      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80046f0:	4b0e      	ldr	r3, [pc, #56]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004700:	490a      	ldr	r1, [pc, #40]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800470e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004712:	d105      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4a04      	ldr	r2, [pc, #16]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800471a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800471e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004720:	7cbb      	ldrb	r3, [r7, #18]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40021000 	.word	0x40021000

08004730 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800473e:	4b72      	ldr	r3, [pc, #456]	; (8004908 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00e      	beq.n	8004768 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800474a:	4b6f      	ldr	r3, [pc, #444]	; (8004908 <RCCEx_PLLSAI1_Config+0x1d8>)
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f003 0203 	and.w	r2, r3, #3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d103      	bne.n	8004762 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
       ||
 800475e:	2b00      	cmp	r3, #0
 8004760:	d142      	bne.n	80047e8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	73fb      	strb	r3, [r7, #15]
 8004766:	e03f      	b.n	80047e8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b03      	cmp	r3, #3
 800476e:	d018      	beq.n	80047a2 <RCCEx_PLLSAI1_Config+0x72>
 8004770:	2b03      	cmp	r3, #3
 8004772:	d825      	bhi.n	80047c0 <RCCEx_PLLSAI1_Config+0x90>
 8004774:	2b01      	cmp	r3, #1
 8004776:	d002      	beq.n	800477e <RCCEx_PLLSAI1_Config+0x4e>
 8004778:	2b02      	cmp	r3, #2
 800477a:	d009      	beq.n	8004790 <RCCEx_PLLSAI1_Config+0x60>
 800477c:	e020      	b.n	80047c0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800477e:	4b62      	ldr	r3, [pc, #392]	; (8004908 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d11d      	bne.n	80047c6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800478e:	e01a      	b.n	80047c6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004790:	4b5d      	ldr	r3, [pc, #372]	; (8004908 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004798:	2b00      	cmp	r3, #0
 800479a:	d116      	bne.n	80047ca <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a0:	e013      	b.n	80047ca <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047a2:	4b59      	ldr	r3, [pc, #356]	; (8004908 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10f      	bne.n	80047ce <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047ae:	4b56      	ldr	r3, [pc, #344]	; (8004908 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d109      	bne.n	80047ce <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047be:	e006      	b.n	80047ce <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	73fb      	strb	r3, [r7, #15]
      break;
 80047c4:	e004      	b.n	80047d0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047c6:	bf00      	nop
 80047c8:	e002      	b.n	80047d0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047ca:	bf00      	nop
 80047cc:	e000      	b.n	80047d0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d108      	bne.n	80047e8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80047d6:	4b4c      	ldr	r3, [pc, #304]	; (8004908 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f023 0203 	bic.w	r2, r3, #3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4949      	ldr	r1, [pc, #292]	; (8004908 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f040 8086 	bne.w	80048fc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047f0:	4b45      	ldr	r3, [pc, #276]	; (8004908 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a44      	ldr	r2, [pc, #272]	; (8004908 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047fc:	f7fc ff2a 	bl	8001654 <HAL_GetTick>
 8004800:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004802:	e009      	b.n	8004818 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004804:	f7fc ff26 	bl	8001654 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d902      	bls.n	8004818 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	73fb      	strb	r3, [r7, #15]
        break;
 8004816:	e005      	b.n	8004824 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004818:	4b3b      	ldr	r3, [pc, #236]	; (8004908 <RCCEx_PLLSAI1_Config+0x1d8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1ef      	bne.n	8004804 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d168      	bne.n	80048fc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d113      	bne.n	8004858 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004830:	4b35      	ldr	r3, [pc, #212]	; (8004908 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004832:	691a      	ldr	r2, [r3, #16]
 8004834:	4b35      	ldr	r3, [pc, #212]	; (800490c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004836:	4013      	ands	r3, r2
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6892      	ldr	r2, [r2, #8]
 800483c:	0211      	lsls	r1, r2, #8
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	68d2      	ldr	r2, [r2, #12]
 8004842:	06d2      	lsls	r2, r2, #27
 8004844:	4311      	orrs	r1, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6852      	ldr	r2, [r2, #4]
 800484a:	3a01      	subs	r2, #1
 800484c:	0112      	lsls	r2, r2, #4
 800484e:	430a      	orrs	r2, r1
 8004850:	492d      	ldr	r1, [pc, #180]	; (8004908 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004852:	4313      	orrs	r3, r2
 8004854:	610b      	str	r3, [r1, #16]
 8004856:	e02d      	b.n	80048b4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d115      	bne.n	800488a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800485e:	4b2a      	ldr	r3, [pc, #168]	; (8004908 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004860:	691a      	ldr	r2, [r3, #16]
 8004862:	4b2b      	ldr	r3, [pc, #172]	; (8004910 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004864:	4013      	ands	r3, r2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6892      	ldr	r2, [r2, #8]
 800486a:	0211      	lsls	r1, r2, #8
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6912      	ldr	r2, [r2, #16]
 8004870:	0852      	lsrs	r2, r2, #1
 8004872:	3a01      	subs	r2, #1
 8004874:	0552      	lsls	r2, r2, #21
 8004876:	4311      	orrs	r1, r2
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6852      	ldr	r2, [r2, #4]
 800487c:	3a01      	subs	r2, #1
 800487e:	0112      	lsls	r2, r2, #4
 8004880:	430a      	orrs	r2, r1
 8004882:	4921      	ldr	r1, [pc, #132]	; (8004908 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004884:	4313      	orrs	r3, r2
 8004886:	610b      	str	r3, [r1, #16]
 8004888:	e014      	b.n	80048b4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800488a:	4b1f      	ldr	r3, [pc, #124]	; (8004908 <RCCEx_PLLSAI1_Config+0x1d8>)
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	4b21      	ldr	r3, [pc, #132]	; (8004914 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004890:	4013      	ands	r3, r2
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6892      	ldr	r2, [r2, #8]
 8004896:	0211      	lsls	r1, r2, #8
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6952      	ldr	r2, [r2, #20]
 800489c:	0852      	lsrs	r2, r2, #1
 800489e:	3a01      	subs	r2, #1
 80048a0:	0652      	lsls	r2, r2, #25
 80048a2:	4311      	orrs	r1, r2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6852      	ldr	r2, [r2, #4]
 80048a8:	3a01      	subs	r2, #1
 80048aa:	0112      	lsls	r2, r2, #4
 80048ac:	430a      	orrs	r2, r1
 80048ae:	4916      	ldr	r1, [pc, #88]	; (8004908 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048b4:	4b14      	ldr	r3, [pc, #80]	; (8004908 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a13      	ldr	r2, [pc, #76]	; (8004908 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c0:	f7fc fec8 	bl	8001654 <HAL_GetTick>
 80048c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048c6:	e009      	b.n	80048dc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048c8:	f7fc fec4 	bl	8001654 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d902      	bls.n	80048dc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	73fb      	strb	r3, [r7, #15]
          break;
 80048da:	e005      	b.n	80048e8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048dc:	4b0a      	ldr	r3, [pc, #40]	; (8004908 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0ef      	beq.n	80048c8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048ee:	4b06      	ldr	r3, [pc, #24]	; (8004908 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048f0:	691a      	ldr	r2, [r3, #16]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	4904      	ldr	r1, [pc, #16]	; (8004908 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40021000 	.word	0x40021000
 800490c:	07ff800f 	.word	0x07ff800f
 8004910:	ff9f800f 	.word	0xff9f800f
 8004914:	f9ff800f 	.word	0xf9ff800f

08004918 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004926:	4b72      	ldr	r3, [pc, #456]	; (8004af0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00e      	beq.n	8004950 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004932:	4b6f      	ldr	r3, [pc, #444]	; (8004af0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0203 	and.w	r2, r3, #3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d103      	bne.n	800494a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
       ||
 8004946:	2b00      	cmp	r3, #0
 8004948:	d142      	bne.n	80049d0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	73fb      	strb	r3, [r7, #15]
 800494e:	e03f      	b.n	80049d0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b03      	cmp	r3, #3
 8004956:	d018      	beq.n	800498a <RCCEx_PLLSAI2_Config+0x72>
 8004958:	2b03      	cmp	r3, #3
 800495a:	d825      	bhi.n	80049a8 <RCCEx_PLLSAI2_Config+0x90>
 800495c:	2b01      	cmp	r3, #1
 800495e:	d002      	beq.n	8004966 <RCCEx_PLLSAI2_Config+0x4e>
 8004960:	2b02      	cmp	r3, #2
 8004962:	d009      	beq.n	8004978 <RCCEx_PLLSAI2_Config+0x60>
 8004964:	e020      	b.n	80049a8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004966:	4b62      	ldr	r3, [pc, #392]	; (8004af0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d11d      	bne.n	80049ae <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004976:	e01a      	b.n	80049ae <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004978:	4b5d      	ldr	r3, [pc, #372]	; (8004af0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004980:	2b00      	cmp	r3, #0
 8004982:	d116      	bne.n	80049b2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004988:	e013      	b.n	80049b2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800498a:	4b59      	ldr	r3, [pc, #356]	; (8004af0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10f      	bne.n	80049b6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004996:	4b56      	ldr	r3, [pc, #344]	; (8004af0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d109      	bne.n	80049b6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049a6:	e006      	b.n	80049b6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	73fb      	strb	r3, [r7, #15]
      break;
 80049ac:	e004      	b.n	80049b8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80049ae:	bf00      	nop
 80049b0:	e002      	b.n	80049b8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80049b2:	bf00      	nop
 80049b4:	e000      	b.n	80049b8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80049b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d108      	bne.n	80049d0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80049be:	4b4c      	ldr	r3, [pc, #304]	; (8004af0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f023 0203 	bic.w	r2, r3, #3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4949      	ldr	r1, [pc, #292]	; (8004af0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f040 8086 	bne.w	8004ae4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049d8:	4b45      	ldr	r3, [pc, #276]	; (8004af0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a44      	ldr	r2, [pc, #272]	; (8004af0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e4:	f7fc fe36 	bl	8001654 <HAL_GetTick>
 80049e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049ea:	e009      	b.n	8004a00 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049ec:	f7fc fe32 	bl	8001654 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d902      	bls.n	8004a00 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	73fb      	strb	r3, [r7, #15]
        break;
 80049fe:	e005      	b.n	8004a0c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a00:	4b3b      	ldr	r3, [pc, #236]	; (8004af0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1ef      	bne.n	80049ec <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d168      	bne.n	8004ae4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d113      	bne.n	8004a40 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a18:	4b35      	ldr	r3, [pc, #212]	; (8004af0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a1a:	695a      	ldr	r2, [r3, #20]
 8004a1c:	4b35      	ldr	r3, [pc, #212]	; (8004af4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6892      	ldr	r2, [r2, #8]
 8004a24:	0211      	lsls	r1, r2, #8
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	68d2      	ldr	r2, [r2, #12]
 8004a2a:	06d2      	lsls	r2, r2, #27
 8004a2c:	4311      	orrs	r1, r2
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6852      	ldr	r2, [r2, #4]
 8004a32:	3a01      	subs	r2, #1
 8004a34:	0112      	lsls	r2, r2, #4
 8004a36:	430a      	orrs	r2, r1
 8004a38:	492d      	ldr	r1, [pc, #180]	; (8004af0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	614b      	str	r3, [r1, #20]
 8004a3e:	e02d      	b.n	8004a9c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d115      	bne.n	8004a72 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a46:	4b2a      	ldr	r3, [pc, #168]	; (8004af0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a48:	695a      	ldr	r2, [r3, #20]
 8004a4a:	4b2b      	ldr	r3, [pc, #172]	; (8004af8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6892      	ldr	r2, [r2, #8]
 8004a52:	0211      	lsls	r1, r2, #8
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6912      	ldr	r2, [r2, #16]
 8004a58:	0852      	lsrs	r2, r2, #1
 8004a5a:	3a01      	subs	r2, #1
 8004a5c:	0552      	lsls	r2, r2, #21
 8004a5e:	4311      	orrs	r1, r2
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6852      	ldr	r2, [r2, #4]
 8004a64:	3a01      	subs	r2, #1
 8004a66:	0112      	lsls	r2, r2, #4
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	4921      	ldr	r1, [pc, #132]	; (8004af0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	614b      	str	r3, [r1, #20]
 8004a70:	e014      	b.n	8004a9c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a72:	4b1f      	ldr	r3, [pc, #124]	; (8004af0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a74:	695a      	ldr	r2, [r3, #20]
 8004a76:	4b21      	ldr	r3, [pc, #132]	; (8004afc <RCCEx_PLLSAI2_Config+0x1e4>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6892      	ldr	r2, [r2, #8]
 8004a7e:	0211      	lsls	r1, r2, #8
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6952      	ldr	r2, [r2, #20]
 8004a84:	0852      	lsrs	r2, r2, #1
 8004a86:	3a01      	subs	r2, #1
 8004a88:	0652      	lsls	r2, r2, #25
 8004a8a:	4311      	orrs	r1, r2
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6852      	ldr	r2, [r2, #4]
 8004a90:	3a01      	subs	r2, #1
 8004a92:	0112      	lsls	r2, r2, #4
 8004a94:	430a      	orrs	r2, r1
 8004a96:	4916      	ldr	r1, [pc, #88]	; (8004af0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a9c:	4b14      	ldr	r3, [pc, #80]	; (8004af0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a13      	ldr	r2, [pc, #76]	; (8004af0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa8:	f7fc fdd4 	bl	8001654 <HAL_GetTick>
 8004aac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004aae:	e009      	b.n	8004ac4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ab0:	f7fc fdd0 	bl	8001654 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d902      	bls.n	8004ac4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	73fb      	strb	r3, [r7, #15]
          break;
 8004ac2:	e005      	b.n	8004ad0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ac4:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0ef      	beq.n	8004ab0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ad6:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ad8:	695a      	ldr	r2, [r3, #20]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	4904      	ldr	r1, [pc, #16]	; (8004af0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40021000 	.word	0x40021000
 8004af4:	07ff800f 	.word	0x07ff800f
 8004af8:	ff9f800f 	.word	0xff9f800f
 8004afc:	f9ff800f 	.word	0xf9ff800f

08004b00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e042      	b.n	8004b98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7fc fc6b 	bl	8001400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2224      	movs	r2, #36	; 0x24
 8004b2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0201 	bic.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fb24 	bl	8005198 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f825 	bl	8004ba0 <UART_SetConfig>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d101      	bne.n	8004b60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e01b      	b.n	8004b98 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0201 	orr.w	r2, r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 fba3 	bl	80052dc <UART_CheckIdleState>
 8004b96:	4603      	mov	r3, r0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ba4:	b08c      	sub	sp, #48	; 0x30
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	4baa      	ldr	r3, [pc, #680]	; (8004e78 <UART_SetConfig+0x2d8>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	6812      	ldr	r2, [r2, #0]
 8004bd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bd8:	430b      	orrs	r3, r1
 8004bda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	68da      	ldr	r2, [r3, #12]
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a9f      	ldr	r2, [pc, #636]	; (8004e7c <UART_SetConfig+0x2dc>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d004      	beq.n	8004c0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004c16:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	6812      	ldr	r2, [r2, #0]
 8004c1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c20:	430b      	orrs	r3, r1
 8004c22:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	f023 010f 	bic.w	r1, r3, #15
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a90      	ldr	r2, [pc, #576]	; (8004e80 <UART_SetConfig+0x2e0>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d125      	bne.n	8004c90 <UART_SetConfig+0xf0>
 8004c44:	4b8f      	ldr	r3, [pc, #572]	; (8004e84 <UART_SetConfig+0x2e4>)
 8004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d81a      	bhi.n	8004c88 <UART_SetConfig+0xe8>
 8004c52:	a201      	add	r2, pc, #4	; (adr r2, 8004c58 <UART_SetConfig+0xb8>)
 8004c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c58:	08004c69 	.word	0x08004c69
 8004c5c:	08004c79 	.word	0x08004c79
 8004c60:	08004c71 	.word	0x08004c71
 8004c64:	08004c81 	.word	0x08004c81
 8004c68:	2301      	movs	r3, #1
 8004c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c6e:	e116      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004c70:	2302      	movs	r3, #2
 8004c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c76:	e112      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004c78:	2304      	movs	r3, #4
 8004c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c7e:	e10e      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004c80:	2308      	movs	r3, #8
 8004c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c86:	e10a      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004c88:	2310      	movs	r3, #16
 8004c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c8e:	e106      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a7c      	ldr	r2, [pc, #496]	; (8004e88 <UART_SetConfig+0x2e8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d138      	bne.n	8004d0c <UART_SetConfig+0x16c>
 8004c9a:	4b7a      	ldr	r3, [pc, #488]	; (8004e84 <UART_SetConfig+0x2e4>)
 8004c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca0:	f003 030c 	and.w	r3, r3, #12
 8004ca4:	2b0c      	cmp	r3, #12
 8004ca6:	d82d      	bhi.n	8004d04 <UART_SetConfig+0x164>
 8004ca8:	a201      	add	r2, pc, #4	; (adr r2, 8004cb0 <UART_SetConfig+0x110>)
 8004caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cae:	bf00      	nop
 8004cb0:	08004ce5 	.word	0x08004ce5
 8004cb4:	08004d05 	.word	0x08004d05
 8004cb8:	08004d05 	.word	0x08004d05
 8004cbc:	08004d05 	.word	0x08004d05
 8004cc0:	08004cf5 	.word	0x08004cf5
 8004cc4:	08004d05 	.word	0x08004d05
 8004cc8:	08004d05 	.word	0x08004d05
 8004ccc:	08004d05 	.word	0x08004d05
 8004cd0:	08004ced 	.word	0x08004ced
 8004cd4:	08004d05 	.word	0x08004d05
 8004cd8:	08004d05 	.word	0x08004d05
 8004cdc:	08004d05 	.word	0x08004d05
 8004ce0:	08004cfd 	.word	0x08004cfd
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cea:	e0d8      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004cec:	2302      	movs	r3, #2
 8004cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cf2:	e0d4      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004cf4:	2304      	movs	r3, #4
 8004cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cfa:	e0d0      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004cfc:	2308      	movs	r3, #8
 8004cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d02:	e0cc      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004d04:	2310      	movs	r3, #16
 8004d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d0a:	e0c8      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a5e      	ldr	r2, [pc, #376]	; (8004e8c <UART_SetConfig+0x2ec>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d125      	bne.n	8004d62 <UART_SetConfig+0x1c2>
 8004d16:	4b5b      	ldr	r3, [pc, #364]	; (8004e84 <UART_SetConfig+0x2e4>)
 8004d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d20:	2b30      	cmp	r3, #48	; 0x30
 8004d22:	d016      	beq.n	8004d52 <UART_SetConfig+0x1b2>
 8004d24:	2b30      	cmp	r3, #48	; 0x30
 8004d26:	d818      	bhi.n	8004d5a <UART_SetConfig+0x1ba>
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d00a      	beq.n	8004d42 <UART_SetConfig+0x1a2>
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d814      	bhi.n	8004d5a <UART_SetConfig+0x1ba>
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <UART_SetConfig+0x19a>
 8004d34:	2b10      	cmp	r3, #16
 8004d36:	d008      	beq.n	8004d4a <UART_SetConfig+0x1aa>
 8004d38:	e00f      	b.n	8004d5a <UART_SetConfig+0x1ba>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d40:	e0ad      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004d42:	2302      	movs	r3, #2
 8004d44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d48:	e0a9      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004d4a:	2304      	movs	r3, #4
 8004d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d50:	e0a5      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004d52:	2308      	movs	r3, #8
 8004d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d58:	e0a1      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004d5a:	2310      	movs	r3, #16
 8004d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d60:	e09d      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a4a      	ldr	r2, [pc, #296]	; (8004e90 <UART_SetConfig+0x2f0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d125      	bne.n	8004db8 <UART_SetConfig+0x218>
 8004d6c:	4b45      	ldr	r3, [pc, #276]	; (8004e84 <UART_SetConfig+0x2e4>)
 8004d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d76:	2bc0      	cmp	r3, #192	; 0xc0
 8004d78:	d016      	beq.n	8004da8 <UART_SetConfig+0x208>
 8004d7a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d7c:	d818      	bhi.n	8004db0 <UART_SetConfig+0x210>
 8004d7e:	2b80      	cmp	r3, #128	; 0x80
 8004d80:	d00a      	beq.n	8004d98 <UART_SetConfig+0x1f8>
 8004d82:	2b80      	cmp	r3, #128	; 0x80
 8004d84:	d814      	bhi.n	8004db0 <UART_SetConfig+0x210>
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <UART_SetConfig+0x1f0>
 8004d8a:	2b40      	cmp	r3, #64	; 0x40
 8004d8c:	d008      	beq.n	8004da0 <UART_SetConfig+0x200>
 8004d8e:	e00f      	b.n	8004db0 <UART_SetConfig+0x210>
 8004d90:	2300      	movs	r3, #0
 8004d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d96:	e082      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d9e:	e07e      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004da0:	2304      	movs	r3, #4
 8004da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004da6:	e07a      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004da8:	2308      	movs	r3, #8
 8004daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dae:	e076      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004db0:	2310      	movs	r3, #16
 8004db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004db6:	e072      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a35      	ldr	r2, [pc, #212]	; (8004e94 <UART_SetConfig+0x2f4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d12a      	bne.n	8004e18 <UART_SetConfig+0x278>
 8004dc2:	4b30      	ldr	r3, [pc, #192]	; (8004e84 <UART_SetConfig+0x2e4>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dd0:	d01a      	beq.n	8004e08 <UART_SetConfig+0x268>
 8004dd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dd6:	d81b      	bhi.n	8004e10 <UART_SetConfig+0x270>
 8004dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ddc:	d00c      	beq.n	8004df8 <UART_SetConfig+0x258>
 8004dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004de2:	d815      	bhi.n	8004e10 <UART_SetConfig+0x270>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <UART_SetConfig+0x250>
 8004de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dec:	d008      	beq.n	8004e00 <UART_SetConfig+0x260>
 8004dee:	e00f      	b.n	8004e10 <UART_SetConfig+0x270>
 8004df0:	2300      	movs	r3, #0
 8004df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004df6:	e052      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dfe:	e04e      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004e00:	2304      	movs	r3, #4
 8004e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e06:	e04a      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004e08:	2308      	movs	r3, #8
 8004e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e0e:	e046      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004e10:	2310      	movs	r3, #16
 8004e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e16:	e042      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a17      	ldr	r2, [pc, #92]	; (8004e7c <UART_SetConfig+0x2dc>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d13a      	bne.n	8004e98 <UART_SetConfig+0x2f8>
 8004e22:	4b18      	ldr	r3, [pc, #96]	; (8004e84 <UART_SetConfig+0x2e4>)
 8004e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e30:	d01a      	beq.n	8004e68 <UART_SetConfig+0x2c8>
 8004e32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e36:	d81b      	bhi.n	8004e70 <UART_SetConfig+0x2d0>
 8004e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e3c:	d00c      	beq.n	8004e58 <UART_SetConfig+0x2b8>
 8004e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e42:	d815      	bhi.n	8004e70 <UART_SetConfig+0x2d0>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <UART_SetConfig+0x2b0>
 8004e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e4c:	d008      	beq.n	8004e60 <UART_SetConfig+0x2c0>
 8004e4e:	e00f      	b.n	8004e70 <UART_SetConfig+0x2d0>
 8004e50:	2300      	movs	r3, #0
 8004e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e56:	e022      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e5e:	e01e      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004e60:	2304      	movs	r3, #4
 8004e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e66:	e01a      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004e68:	2308      	movs	r3, #8
 8004e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e6e:	e016      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004e70:	2310      	movs	r3, #16
 8004e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e76:	e012      	b.n	8004e9e <UART_SetConfig+0x2fe>
 8004e78:	cfff69f3 	.word	0xcfff69f3
 8004e7c:	40008000 	.word	0x40008000
 8004e80:	40013800 	.word	0x40013800
 8004e84:	40021000 	.word	0x40021000
 8004e88:	40004400 	.word	0x40004400
 8004e8c:	40004800 	.word	0x40004800
 8004e90:	40004c00 	.word	0x40004c00
 8004e94:	40005000 	.word	0x40005000
 8004e98:	2310      	movs	r3, #16
 8004e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4aae      	ldr	r2, [pc, #696]	; (800515c <UART_SetConfig+0x5bc>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	f040 8097 	bne.w	8004fd8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004eaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d823      	bhi.n	8004efa <UART_SetConfig+0x35a>
 8004eb2:	a201      	add	r2, pc, #4	; (adr r2, 8004eb8 <UART_SetConfig+0x318>)
 8004eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb8:	08004edd 	.word	0x08004edd
 8004ebc:	08004efb 	.word	0x08004efb
 8004ec0:	08004ee5 	.word	0x08004ee5
 8004ec4:	08004efb 	.word	0x08004efb
 8004ec8:	08004eeb 	.word	0x08004eeb
 8004ecc:	08004efb 	.word	0x08004efb
 8004ed0:	08004efb 	.word	0x08004efb
 8004ed4:	08004efb 	.word	0x08004efb
 8004ed8:	08004ef3 	.word	0x08004ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004edc:	f7ff f80c 	bl	8003ef8 <HAL_RCC_GetPCLK1Freq>
 8004ee0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ee2:	e010      	b.n	8004f06 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee4:	4b9e      	ldr	r3, [pc, #632]	; (8005160 <UART_SetConfig+0x5c0>)
 8004ee6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ee8:	e00d      	b.n	8004f06 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eea:	f7fe ff6d 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 8004eee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ef0:	e009      	b.n	8004f06 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ef8:	e005      	b.n	8004f06 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 8130 	beq.w	800516e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	4a94      	ldr	r2, [pc, #592]	; (8005164 <UART_SetConfig+0x5c4>)
 8004f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f20:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	4613      	mov	r3, r2
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	4413      	add	r3, r2
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d305      	bcc.n	8004f3e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d903      	bls.n	8004f46 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f44:	e113      	b.n	800516e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	2200      	movs	r2, #0
 8004f4a:	60bb      	str	r3, [r7, #8]
 8004f4c:	60fa      	str	r2, [r7, #12]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f52:	4a84      	ldr	r2, [pc, #528]	; (8005164 <UART_SetConfig+0x5c4>)
 8004f54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	603b      	str	r3, [r7, #0]
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f68:	f7fb fd66 	bl	8000a38 <__aeabi_uldivmod>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4610      	mov	r0, r2
 8004f72:	4619      	mov	r1, r3
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	f04f 0300 	mov.w	r3, #0
 8004f7c:	020b      	lsls	r3, r1, #8
 8004f7e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f82:	0202      	lsls	r2, r0, #8
 8004f84:	6979      	ldr	r1, [r7, #20]
 8004f86:	6849      	ldr	r1, [r1, #4]
 8004f88:	0849      	lsrs	r1, r1, #1
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	4605      	mov	r5, r0
 8004f90:	eb12 0804 	adds.w	r8, r2, r4
 8004f94:	eb43 0905 	adc.w	r9, r3, r5
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	469a      	mov	sl, r3
 8004fa0:	4693      	mov	fp, r2
 8004fa2:	4652      	mov	r2, sl
 8004fa4:	465b      	mov	r3, fp
 8004fa6:	4640      	mov	r0, r8
 8004fa8:	4649      	mov	r1, r9
 8004faa:	f7fb fd45 	bl	8000a38 <__aeabi_uldivmod>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fbc:	d308      	bcc.n	8004fd0 <UART_SetConfig+0x430>
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fc4:	d204      	bcs.n	8004fd0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6a3a      	ldr	r2, [r7, #32]
 8004fcc:	60da      	str	r2, [r3, #12]
 8004fce:	e0ce      	b.n	800516e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004fd6:	e0ca      	b.n	800516e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe0:	d166      	bne.n	80050b0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004fe2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	d827      	bhi.n	800503a <UART_SetConfig+0x49a>
 8004fea:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <UART_SetConfig+0x450>)
 8004fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff0:	08005015 	.word	0x08005015
 8004ff4:	0800501d 	.word	0x0800501d
 8004ff8:	08005025 	.word	0x08005025
 8004ffc:	0800503b 	.word	0x0800503b
 8005000:	0800502b 	.word	0x0800502b
 8005004:	0800503b 	.word	0x0800503b
 8005008:	0800503b 	.word	0x0800503b
 800500c:	0800503b 	.word	0x0800503b
 8005010:	08005033 	.word	0x08005033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005014:	f7fe ff70 	bl	8003ef8 <HAL_RCC_GetPCLK1Freq>
 8005018:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800501a:	e014      	b.n	8005046 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800501c:	f7fe ff82 	bl	8003f24 <HAL_RCC_GetPCLK2Freq>
 8005020:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005022:	e010      	b.n	8005046 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005024:	4b4e      	ldr	r3, [pc, #312]	; (8005160 <UART_SetConfig+0x5c0>)
 8005026:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005028:	e00d      	b.n	8005046 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800502a:	f7fe fecd 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 800502e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005030:	e009      	b.n	8005046 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005038:	e005      	b.n	8005046 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005044:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8090 	beq.w	800516e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	4a44      	ldr	r2, [pc, #272]	; (8005164 <UART_SetConfig+0x5c4>)
 8005054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005058:	461a      	mov	r2, r3
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005060:	005a      	lsls	r2, r3, #1
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	085b      	lsrs	r3, r3, #1
 8005068:	441a      	add	r2, r3
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005072:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	2b0f      	cmp	r3, #15
 8005078:	d916      	bls.n	80050a8 <UART_SetConfig+0x508>
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005080:	d212      	bcs.n	80050a8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	b29b      	uxth	r3, r3
 8005086:	f023 030f 	bic.w	r3, r3, #15
 800508a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	085b      	lsrs	r3, r3, #1
 8005090:	b29b      	uxth	r3, r3
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	b29a      	uxth	r2, r3
 8005098:	8bfb      	ldrh	r3, [r7, #30]
 800509a:	4313      	orrs	r3, r2
 800509c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	8bfa      	ldrh	r2, [r7, #30]
 80050a4:	60da      	str	r2, [r3, #12]
 80050a6:	e062      	b.n	800516e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80050ae:	e05e      	b.n	800516e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d828      	bhi.n	800510a <UART_SetConfig+0x56a>
 80050b8:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <UART_SetConfig+0x520>)
 80050ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050be:	bf00      	nop
 80050c0:	080050e5 	.word	0x080050e5
 80050c4:	080050ed 	.word	0x080050ed
 80050c8:	080050f5 	.word	0x080050f5
 80050cc:	0800510b 	.word	0x0800510b
 80050d0:	080050fb 	.word	0x080050fb
 80050d4:	0800510b 	.word	0x0800510b
 80050d8:	0800510b 	.word	0x0800510b
 80050dc:	0800510b 	.word	0x0800510b
 80050e0:	08005103 	.word	0x08005103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e4:	f7fe ff08 	bl	8003ef8 <HAL_RCC_GetPCLK1Freq>
 80050e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050ea:	e014      	b.n	8005116 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050ec:	f7fe ff1a 	bl	8003f24 <HAL_RCC_GetPCLK2Freq>
 80050f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050f2:	e010      	b.n	8005116 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f4:	4b1a      	ldr	r3, [pc, #104]	; (8005160 <UART_SetConfig+0x5c0>)
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050f8:	e00d      	b.n	8005116 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050fa:	f7fe fe65 	bl	8003dc8 <HAL_RCC_GetSysClockFreq>
 80050fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005100:	e009      	b.n	8005116 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005108:	e005      	b.n	8005116 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005114:	bf00      	nop
    }

    if (pclk != 0U)
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	2b00      	cmp	r3, #0
 800511a:	d028      	beq.n	800516e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	4a10      	ldr	r2, [pc, #64]	; (8005164 <UART_SetConfig+0x5c4>)
 8005122:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005126:	461a      	mov	r2, r3
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	fbb3 f2f2 	udiv	r2, r3, r2
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	085b      	lsrs	r3, r3, #1
 8005134:	441a      	add	r2, r3
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	fbb2 f3f3 	udiv	r3, r2, r3
 800513e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	2b0f      	cmp	r3, #15
 8005144:	d910      	bls.n	8005168 <UART_SetConfig+0x5c8>
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800514c:	d20c      	bcs.n	8005168 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	b29a      	uxth	r2, r3
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	60da      	str	r2, [r3, #12]
 8005158:	e009      	b.n	800516e <UART_SetConfig+0x5ce>
 800515a:	bf00      	nop
 800515c:	40008000 	.word	0x40008000
 8005160:	00f42400 	.word	0x00f42400
 8005164:	08005888 	.word	0x08005888
      }
      else
      {
        ret = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2201      	movs	r2, #1
 8005172:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2201      	movs	r2, #1
 800517a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2200      	movs	r2, #0
 8005182:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	2200      	movs	r2, #0
 8005188:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800518a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800518e:	4618      	mov	r0, r3
 8005190:	3730      	adds	r7, #48	; 0x30
 8005192:	46bd      	mov	sp, r7
 8005194:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005198 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a4:	f003 0308 	and.w	r3, r3, #8
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00a      	beq.n	8005206 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	f003 0304 	and.w	r3, r3, #4
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522c:	f003 0310 	and.w	r3, r3, #16
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00a      	beq.n	800524a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524e:	f003 0320 	and.w	r3, r3, #32
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00a      	beq.n	800526c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005274:	2b00      	cmp	r3, #0
 8005276:	d01a      	beq.n	80052ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005296:	d10a      	bne.n	80052ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	605a      	str	r2, [r3, #4]
  }
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b098      	sub	sp, #96	; 0x60
 80052e0:	af02      	add	r7, sp, #8
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052ec:	f7fc f9b2 	bl	8001654 <HAL_GetTick>
 80052f0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0308 	and.w	r3, r3, #8
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d12f      	bne.n	8005360 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005300:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005308:	2200      	movs	r2, #0
 800530a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f88e 	bl	8005430 <UART_WaitOnFlagUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d022      	beq.n	8005360 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800532e:	653b      	str	r3, [r7, #80]	; 0x50
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	461a      	mov	r2, r3
 8005336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005338:	647b      	str	r3, [r7, #68]	; 0x44
 800533a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800533e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005340:	e841 2300 	strex	r3, r2, [r1]
 8005344:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e6      	bne.n	800531a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2220      	movs	r2, #32
 8005350:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e063      	b.n	8005428 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	2b04      	cmp	r3, #4
 800536c:	d149      	bne.n	8005402 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800536e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005376:	2200      	movs	r2, #0
 8005378:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f857 	bl	8005430 <UART_WaitOnFlagUntilTimeout>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d03c      	beq.n	8005402 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	e853 3f00 	ldrex	r3, [r3]
 8005394:	623b      	str	r3, [r7, #32]
   return(result);
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800539c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	461a      	mov	r2, r3
 80053a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a6:	633b      	str	r3, [r7, #48]	; 0x30
 80053a8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1e6      	bne.n	8005388 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3308      	adds	r3, #8
 80053c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	e853 3f00 	ldrex	r3, [r3]
 80053c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f023 0301 	bic.w	r3, r3, #1
 80053d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3308      	adds	r3, #8
 80053d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053da:	61fa      	str	r2, [r7, #28]
 80053dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053de:	69b9      	ldr	r1, [r7, #24]
 80053e0:	69fa      	ldr	r2, [r7, #28]
 80053e2:	e841 2300 	strex	r3, r2, [r1]
 80053e6:	617b      	str	r3, [r7, #20]
   return(result);
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1e5      	bne.n	80053ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e012      	b.n	8005428 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2220      	movs	r2, #32
 8005406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3758      	adds	r7, #88	; 0x58
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	603b      	str	r3, [r7, #0]
 800543c:	4613      	mov	r3, r2
 800543e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005440:	e049      	b.n	80054d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005448:	d045      	beq.n	80054d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800544a:	f7fc f903 	bl	8001654 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	429a      	cmp	r2, r3
 8005458:	d302      	bcc.n	8005460 <UART_WaitOnFlagUntilTimeout+0x30>
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e048      	b.n	80054f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	2b00      	cmp	r3, #0
 8005470:	d031      	beq.n	80054d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b08      	cmp	r3, #8
 800547e:	d110      	bne.n	80054a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2208      	movs	r2, #8
 8005486:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 f838 	bl	80054fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2208      	movs	r2, #8
 8005492:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e029      	b.n	80054f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b0:	d111      	bne.n	80054d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f81e 	bl	80054fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e00f      	b.n	80054f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69da      	ldr	r2, [r3, #28]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4013      	ands	r3, r2
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	bf0c      	ite	eq
 80054e6:	2301      	moveq	r3, #1
 80054e8:	2300      	movne	r3, #0
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	461a      	mov	r2, r3
 80054ee:	79fb      	ldrb	r3, [r7, #7]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d0a6      	beq.n	8005442 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054fe:	b480      	push	{r7}
 8005500:	b095      	sub	sp, #84	; 0x54
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550e:	e853 3f00 	ldrex	r3, [r3]
 8005512:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005516:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800551a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005524:	643b      	str	r3, [r7, #64]	; 0x40
 8005526:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800552a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800552c:	e841 2300 	strex	r3, r2, [r1]
 8005530:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e6      	bne.n	8005506 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3308      	adds	r3, #8
 800553e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005540:	6a3b      	ldr	r3, [r7, #32]
 8005542:	e853 3f00 	ldrex	r3, [r3]
 8005546:	61fb      	str	r3, [r7, #28]
   return(result);
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800554e:	f023 0301 	bic.w	r3, r3, #1
 8005552:	64bb      	str	r3, [r7, #72]	; 0x48
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3308      	adds	r3, #8
 800555a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800555c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800555e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005560:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005564:	e841 2300 	strex	r3, r2, [r1]
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1e3      	bne.n	8005538 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005574:	2b01      	cmp	r3, #1
 8005576:	d118      	bne.n	80055aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	60bb      	str	r3, [r7, #8]
   return(result);
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f023 0310 	bic.w	r3, r3, #16
 800558c:	647b      	str	r3, [r7, #68]	; 0x44
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005596:	61bb      	str	r3, [r7, #24]
 8005598:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	6979      	ldr	r1, [r7, #20]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	613b      	str	r3, [r7, #16]
   return(result);
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1e6      	bne.n	8005578 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80055be:	bf00      	nop
 80055c0:	3754      	adds	r7, #84	; 0x54
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b085      	sub	sp, #20
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_UARTEx_DisableFifoMode+0x16>
 80055dc:	2302      	movs	r3, #2
 80055de:	e027      	b.n	8005630 <HAL_UARTEx_DisableFifoMode+0x66>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2224      	movs	r2, #36	; 0x24
 80055ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0201 	bic.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800560e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2220      	movs	r2, #32
 8005622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005650:	2302      	movs	r3, #2
 8005652:	e02d      	b.n	80056b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2224      	movs	r2, #36	; 0x24
 8005660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0201 	bic.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f84f 	bl	8005734 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2220      	movs	r2, #32
 80056a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e02d      	b.n	800572c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2224      	movs	r2, #36	; 0x24
 80056dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0201 	bic.w	r2, r2, #1
 80056f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f811 	bl	8005734 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2220      	movs	r2, #32
 800571e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005740:	2b00      	cmp	r3, #0
 8005742:	d108      	bne.n	8005756 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005754:	e031      	b.n	80057ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005756:	2308      	movs	r3, #8
 8005758:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800575a:	2308      	movs	r3, #8
 800575c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	0e5b      	lsrs	r3, r3, #25
 8005766:	b2db      	uxtb	r3, r3
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	0f5b      	lsrs	r3, r3, #29
 8005776:	b2db      	uxtb	r3, r3
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800577e:	7bbb      	ldrb	r3, [r7, #14]
 8005780:	7b3a      	ldrb	r2, [r7, #12]
 8005782:	4911      	ldr	r1, [pc, #68]	; (80057c8 <UARTEx_SetNbDataToProcess+0x94>)
 8005784:	5c8a      	ldrb	r2, [r1, r2]
 8005786:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800578a:	7b3a      	ldrb	r2, [r7, #12]
 800578c:	490f      	ldr	r1, [pc, #60]	; (80057cc <UARTEx_SetNbDataToProcess+0x98>)
 800578e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005790:	fb93 f3f2 	sdiv	r3, r3, r2
 8005794:	b29a      	uxth	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	7b7a      	ldrb	r2, [r7, #13]
 80057a0:	4909      	ldr	r1, [pc, #36]	; (80057c8 <UARTEx_SetNbDataToProcess+0x94>)
 80057a2:	5c8a      	ldrb	r2, [r1, r2]
 80057a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057a8:	7b7a      	ldrb	r2, [r7, #13]
 80057aa:	4908      	ldr	r1, [pc, #32]	; (80057cc <UARTEx_SetNbDataToProcess+0x98>)
 80057ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80057ba:	bf00      	nop
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	080058a0 	.word	0x080058a0
 80057cc:	080058a8 	.word	0x080058a8

080057d0 <memset>:
 80057d0:	4402      	add	r2, r0
 80057d2:	4603      	mov	r3, r0
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d100      	bne.n	80057da <memset+0xa>
 80057d8:	4770      	bx	lr
 80057da:	f803 1b01 	strb.w	r1, [r3], #1
 80057de:	e7f9      	b.n	80057d4 <memset+0x4>

080057e0 <__libc_init_array>:
 80057e0:	b570      	push	{r4, r5, r6, lr}
 80057e2:	4d0d      	ldr	r5, [pc, #52]	; (8005818 <__libc_init_array+0x38>)
 80057e4:	4c0d      	ldr	r4, [pc, #52]	; (800581c <__libc_init_array+0x3c>)
 80057e6:	1b64      	subs	r4, r4, r5
 80057e8:	10a4      	asrs	r4, r4, #2
 80057ea:	2600      	movs	r6, #0
 80057ec:	42a6      	cmp	r6, r4
 80057ee:	d109      	bne.n	8005804 <__libc_init_array+0x24>
 80057f0:	4d0b      	ldr	r5, [pc, #44]	; (8005820 <__libc_init_array+0x40>)
 80057f2:	4c0c      	ldr	r4, [pc, #48]	; (8005824 <__libc_init_array+0x44>)
 80057f4:	f000 f818 	bl	8005828 <_init>
 80057f8:	1b64      	subs	r4, r4, r5
 80057fa:	10a4      	asrs	r4, r4, #2
 80057fc:	2600      	movs	r6, #0
 80057fe:	42a6      	cmp	r6, r4
 8005800:	d105      	bne.n	800580e <__libc_init_array+0x2e>
 8005802:	bd70      	pop	{r4, r5, r6, pc}
 8005804:	f855 3b04 	ldr.w	r3, [r5], #4
 8005808:	4798      	blx	r3
 800580a:	3601      	adds	r6, #1
 800580c:	e7ee      	b.n	80057ec <__libc_init_array+0xc>
 800580e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005812:	4798      	blx	r3
 8005814:	3601      	adds	r6, #1
 8005816:	e7f2      	b.n	80057fe <__libc_init_array+0x1e>
 8005818:	080058b8 	.word	0x080058b8
 800581c:	080058b8 	.word	0x080058b8
 8005820:	080058b8 	.word	0x080058b8
 8005824:	080058bc 	.word	0x080058bc

08005828 <_init>:
 8005828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582a:	bf00      	nop
 800582c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582e:	bc08      	pop	{r3}
 8005830:	469e      	mov	lr, r3
 8005832:	4770      	bx	lr

08005834 <_fini>:
 8005834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005836:	bf00      	nop
 8005838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583a:	bc08      	pop	{r3}
 800583c:	469e      	mov	lr, r3
 800583e:	4770      	bx	lr
